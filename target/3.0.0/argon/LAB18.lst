
c:/Users/Vishal/Documents/CTDProjects/LAB18/target/3.0.0/argon/LAB18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008500  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc520  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d8  2003e324  000dc524  0001e324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002f4  2003e500  2003e500  0002e500  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dc6fc  000dc6fc  0002c6fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc724  000dc724  0002c724  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023cae6  00000000  00000000  0002c728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020b30  00000000  00000000  0026920e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000482a7  00000000  00000000  00289d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003638  00000000  00000000  002d1fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000ae18  00000000  00000000  002d561d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045a13  00000000  00000000  002e0435  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00057178  00000000  00000000  00325e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00130c01  00000000  00000000  0037cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a8c8  00000000  00000000  004adbc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f887 	bl	d9144 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f88f 	bl	d9160 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e324 	.word	0x2003e324
   d404c:	000dc524 	.word	0x000dc524
   d4050:	2003e4fc 	.word	0x2003e4fc
   d4054:	2003e500 	.word	0x2003e500
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fb2b 	bl	d76bc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc4f4 	.word	0x000dc4f4
   d4080:	000dc518 	.word	0x000dc518

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc98 	b.w	d49b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fdd1 	bl	d4c30 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bad5 	b.w	d7640 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 becf 	b.w	d6e38 <malloc>

000d409a <_Znaj>:
   d409a:	f002 becd 	b.w	d6e38 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bed3 	b.w	d6e48 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f002 bed1 	b.w	d6e48 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fe0e 	bl	d6cd0 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d69a1 	.word	0x000d69a1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z8callbackPcPhj>:

MQTT client("lab.thewcl.com", 1883, callback);

// to recieve messages
void callback(char *topic, byte *payload, unsigned int length)
{
   d40cc:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   d40ce:	f102 0308 	add.w	r3, r2, #8
{
   d40d2:	b088      	sub	sp, #32
  char p[length + 1];
   d40d4:	f023 0307 	bic.w	r3, r3, #7
{
   d40d8:	af00      	add	r7, sp, #0
  char p[length + 1];
   d40da:	ebad 0d03 	sub.w	sp, sp, r3
{
   d40de:	4615      	mov	r5, r2
   d40e0:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   d40e2:	4668      	mov	r0, sp
   d40e4:	f005 f82e 	bl	d9144 <memcpy>
  p[length] = NULL;
   d40e8:	2300      	movs	r3, #0
  String s = p;
   d40ea:	4669      	mov	r1, sp
   d40ec:	4638      	mov	r0, r7
  p[length] = NULL;
   d40ee:	f80d 3005 	strb.w	r3, [sp, r5]
  String s = p;
   d40f2:	f003 f855 	bl	d71a0 <_ZN6StringC1EPKc>
   Serial.println(p);
   d40f6:	f003 fc09 	bl	d790c <_Z16_fetch_usbserialv>
   d40fa:	4669      	mov	r1, sp
   d40fc:	f003 f8fb 	bl	d72f6 <_ZN5Print7printlnEPKc>
  // Serial.println(value);
  if ((String) topic == "NODERED2")
   d4100:	4621      	mov	r1, r4
   d4102:	f107 0010 	add.w	r0, r7, #16
   d4106:	f003 f84b 	bl	d71a0 <_ZN6StringC1EPKc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410a:	4925      	ldr	r1, [pc, #148]	; (d41a0 <_Z8callbackPcPhj+0xd4>)
   d410c:	f107 0010 	add.w	r0, r7, #16
   d4110:	f003 f86c 	bl	d71ec <_ZNK6String6equalsEPKc>
   d4114:	4605      	mov	r5, r0
   d4116:	f107 0010 	add.w	r0, r7, #16
   d411a:	f002 fff6 	bl	d710a <_ZN6StringD1Ev>
   d411e:	b1a5      	cbz	r5, d414a <_Z8callbackPcPhj+0x7e>
    {
     
      lat = s.toFloat();
   d4120:	4638      	mov	r0, r7
   d4122:	f003 f875 	bl	d7210 <_ZNK6String7toFloatEv>
   d4126:	ee10 0a10 	vmov	r0, s0
   d412a:	f004 fc33 	bl	d8994 <__aeabi_f2d>
   d412e:	4d1d      	ldr	r5, [pc, #116]	; (d41a4 <_Z8callbackPcPhj+0xd8>)
   d4130:	e9c5 0100 	strd	r0, r1, [r5]
      Serial.println(lat);
   d4134:	f003 fbea 	bl	d790c <_Z16_fetch_usbserialv>
   d4138:	ed95 0b00 	vldr	d0, [r5]
   d413c:	2102      	movs	r1, #2
   d413e:	f003 f9cb 	bl	d74d8 <_ZN5Print7printlnEdi>
      delay(500);
   d4142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4146:	f003 fa41 	bl	d75cc <delay>
    }

  if ((String) topic == "NODERED3")
   d414a:	4621      	mov	r1, r4
   d414c:	f107 0010 	add.w	r0, r7, #16
   d4150:	f003 f826 	bl	d71a0 <_ZN6StringC1EPKc>
   d4154:	4914      	ldr	r1, [pc, #80]	; (d41a8 <_Z8callbackPcPhj+0xdc>)
   d4156:	f107 0010 	add.w	r0, r7, #16
   d415a:	f003 f847 	bl	d71ec <_ZNK6String6equalsEPKc>
   d415e:	4604      	mov	r4, r0
   d4160:	f107 0010 	add.w	r0, r7, #16
   d4164:	f002 ffd1 	bl	d710a <_ZN6StringD1Ev>
   d4168:	b1a4      	cbz	r4, d4194 <_Z8callbackPcPhj+0xc8>
    {
      longitude = s.toFloat();
   d416a:	4638      	mov	r0, r7
   d416c:	f003 f850 	bl	d7210 <_ZNK6String7toFloatEv>
   d4170:	ee10 0a10 	vmov	r0, s0
   d4174:	f004 fc0e 	bl	d8994 <__aeabi_f2d>
   d4178:	4c0c      	ldr	r4, [pc, #48]	; (d41ac <_Z8callbackPcPhj+0xe0>)
   d417a:	e9c4 0100 	strd	r0, r1, [r4]
      Serial.println(longitude);
   d417e:	f003 fbc5 	bl	d790c <_Z16_fetch_usbserialv>
   d4182:	ed94 0b00 	vldr	d0, [r4]
   d4186:	2102      	movs	r1, #2
   d4188:	f003 f9a6 	bl	d74d8 <_ZN5Print7printlnEdi>
      delay(500);
   d418c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4190:	f003 fa1c 	bl	d75cc <delay>
  String s = p;
   d4194:	4638      	mov	r0, r7
   d4196:	f002 ffb8 	bl	d710a <_ZN6StringD1Ev>
    }
}
   d419a:	3720      	adds	r7, #32
   d419c:	46bd      	mov	sp, r7
   d419e:	bdb0      	pop	{r4, r5, r7, pc}
   d41a0:	000daf80 	.word	0x000daf80
   d41a4:	2003e638 	.word	0x2003e638
   d41a8:	000daf89 	.word	0x000daf89
   d41ac:	2003e640 	.word	0x2003e640

000d41b0 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d41b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41b2:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d41b4:	4608      	mov	r0, r1
   d41b6:	9101      	str	r1, [sp, #4]
   d41b8:	f005 f808 	bl	d91cc <strlen>
    if (len + l > buff_size)
   d41bc:	6863      	ldr	r3, [r4, #4]
   d41be:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d41c0:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d41c2:	18e8      	adds	r0, r5, r3
   d41c4:	4290      	cmp	r0, r2
   d41c6:	d808      	bhi.n	d41da <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d41c8:	6820      	ldr	r0, [r4, #0]
   d41ca:	9901      	ldr	r1, [sp, #4]
   d41cc:	462a      	mov	r2, r5
   d41ce:	4418      	add	r0, r3
   d41d0:	f004 ffb8 	bl	d9144 <memcpy>
    len += l;
   d41d4:	6860      	ldr	r0, [r4, #4]
   d41d6:	4428      	add	r0, r5
   d41d8:	6060      	str	r0, [r4, #4]
}
   d41da:	b003      	add	sp, #12
   d41dc:	bd30      	pop	{r4, r5, pc}
	...

000d41e0 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d41e0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41e2:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41e4:	4b0a      	ldr	r3, [pc, #40]	; (d4210 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d41e6:	6003      	str	r3, [r0, #0]
   d41e8:	4605      	mov	r5, r0
   d41ea:	b17c      	cbz	r4, d420c <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d41ec:	6863      	ldr	r3, [r4, #4]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	6063      	str	r3, [r4, #4]
   d41f2:	b95b      	cbnz	r3, d420c <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	689b      	ldr	r3, [r3, #8]
   d41fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41fc:	68a3      	ldr	r3, [r4, #8]
   d41fe:	3b01      	subs	r3, #1
   d4200:	60a3      	str	r3, [r4, #8]
   d4202:	b91b      	cbnz	r3, d420c <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4204:	6823      	ldr	r3, [r4, #0]
   d4206:	4620      	mov	r0, r4
   d4208:	68db      	ldr	r3, [r3, #12]
   d420a:	4798      	blx	r3
   d420c:	4628      	mov	r0, r5
   d420e:	bd38      	pop	{r3, r4, r5, pc}
   d4210:	000dc0d4 	.word	0x000dc0d4

000d4214 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4214:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4216:	f002 fbcb 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d421a:	4b03      	ldr	r3, [pc, #12]	; (d4228 <_ZN10CloudClass7processEv+0x14>)
   d421c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d421e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d4222:	f002 bdf1 	b.w	d6e08 <spark_process>
   d4226:	bf00      	nop
   d4228:	2003e7d8 	.word	0x2003e7d8

000d422c <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d422c:	6803      	ldr	r3, [r0, #0]
   d422e:	b12b      	cbz	r3, d423c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4230:	6842      	ldr	r2, [r0, #4]
   d4232:	4293      	cmp	r3, r2
   d4234:	d202      	bcs.n	d423c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4236:	4618      	mov	r0, r3
   d4238:	f004 bf6d 	b.w	d9116 <atoi>
   d423c:	2000      	movs	r0, #0
   d423e:	4770      	bx	lr

000d4240 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4240:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4242:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4244:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4246:	b145      	cbz	r5, d425a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4248:	6843      	ldr	r3, [r0, #4]
   d424a:	429d      	cmp	r5, r3
   d424c:	d205      	bcs.n	d425a <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d424e:	4628      	mov	r0, r5
   d4250:	f004 ffbc 	bl	d91cc <strlen>
   d4254:	3001      	adds	r0, #1
   d4256:	4405      	add	r5, r0
   d4258:	6025      	str	r5, [r4, #0]
        }
   d425a:	4620      	mov	r0, r4
   d425c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4260 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4260:	b538      	push	{r3, r4, r5, lr}
   d4262:	4604      	mov	r4, r0
   d4264:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4266:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d426a:	6825      	ldr	r5, [r4, #0]
   d426c:	4a04      	ldr	r2, [pc, #16]	; (d4280 <_ZN10BlynkParam3addEi+0x20>)
   d426e:	1a09      	subs	r1, r1, r0
   d4270:	4428      	add	r0, r5
   d4272:	f002 fdf9 	bl	d6e68 <snprintf>
   d4276:	6863      	ldr	r3, [r4, #4]
   d4278:	3001      	adds	r0, #1
   d427a:	4403      	add	r3, r0
   d427c:	6063      	str	r3, [r4, #4]
    }
   d427e:	bd38      	pop	{r3, r4, r5, pc}
   d4280:	000daf92 	.word	0x000daf92

000d4284 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4284:	b538      	push	{r3, r4, r5, lr}
   d4286:	4604      	mov	r4, r0
   d4288:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d428a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d428e:	6825      	ldr	r5, [r4, #0]
   d4290:	4a04      	ldr	r2, [pc, #16]	; (d42a4 <_ZN10BlynkParam3addEl+0x20>)
   d4292:	1a09      	subs	r1, r1, r0
   d4294:	4428      	add	r0, r5
   d4296:	f002 fde7 	bl	d6e68 <snprintf>
   d429a:	6863      	ldr	r3, [r4, #4]
   d429c:	3001      	adds	r0, #1
   d429e:	4403      	add	r3, r0
   d42a0:	6063      	str	r3, [r4, #4]
    }
   d42a2:	bd38      	pop	{r3, r4, r5, pc}
   d42a4:	000daf95 	.word	0x000daf95

000d42a8 <_ZN10BlynkParam3addEd>:
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
    }

    inline
    void BlynkParam::add(double value)
    {
   d42a8:	b513      	push	{r0, r1, r4, lr}
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d42aa:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    {
   d42ae:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d42b0:	6800      	ldr	r0, [r0, #0]
   d42b2:	4a06      	ldr	r2, [pc, #24]	; (d42cc <_ZN10BlynkParam3addEd+0x24>)
   d42b4:	1ac9      	subs	r1, r1, r3
   d42b6:	ed8d 0b00 	vstr	d0, [sp]
   d42ba:	4418      	add	r0, r3
   d42bc:	f002 fdd4 	bl	d6e68 <snprintf>
   d42c0:	6863      	ldr	r3, [r4, #4]
   d42c2:	3001      	adds	r0, #1
   d42c4:	4403      	add	r3, r0
   d42c6:	6063      	str	r3, [r4, #4]
    }
   d42c8:	b002      	add	sp, #8
   d42ca:	bd10      	pop	{r4, pc}
   d42cc:	000daf99 	.word	0x000daf99

000d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d42d0:	b508      	push	{r3, lr}
        state = CONNECTING;
   d42d2:	2300      	movs	r3, #0
   d42d4:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d42d6:	6800      	ldr	r0, [r0, #0]
   d42d8:	f003 fe1a 	bl	d7f10 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d42dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d42e0:	f002 bae8 	b.w	d68b4 <BlynkNoOpCbk>

000d42e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d42e8:	eb01 0902 	add.w	r9, r1, r2
   d42ec:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d42ee:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d42f0:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42f4:	4680      	mov	r8, r0
   d42f6:	460d      	mov	r5, r1
   d42f8:	4616      	mov	r6, r2
    if (it >= param.end())
   d42fa:	f080 8092 	bcs.w	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d42fe:	a805      	add	r0, sp, #20
   d4300:	880f      	ldrh	r7, [r1, #0]
   d4302:	f7ff ff9d 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
   d4306:	6803      	ldr	r3, [r0, #0]
   d4308:	4599      	cmp	r9, r3
   d430a:	f240 808a 	bls.w	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d430e:	a805      	add	r0, sp, #20
   d4310:	f7ff ff8c 	bl	d422c <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4314:	f247 2376 	movw	r3, #29302	; 0x7276
   d4318:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d431a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d431c:	f000 80a9 	beq.w	d4472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4320:	d827      	bhi.n	d4372 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d4322:	f247 2361 	movw	r3, #29281	; 0x7261
   d4326:	429f      	cmp	r7, r3
   d4328:	d07e      	beq.n	d4428 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d432a:	f247 2364 	movw	r3, #29284	; 0x7264
   d432e:	429f      	cmp	r7, r3
   d4330:	d042      	beq.n	d43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d4332:	f646 5370 	movw	r3, #28016	; 0x6d70
   d4336:	429f      	cmp	r7, r3
   d4338:	d128      	bne.n	d438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d433a:	4e63      	ldr	r6, [pc, #396]	; (d44c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d433c:	4f63      	ldr	r7, [pc, #396]	; (d44cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d433e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d44e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4342:	9b05      	ldr	r3, [sp, #20]
   d4344:	4599      	cmp	r9, r3
   d4346:	d96c      	bls.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4348:	a805      	add	r0, sp, #20
   d434a:	f7ff ff6f 	bl	d422c <_ZNK10BlynkParam8iterator5asIntEv>
   d434e:	b2c4      	uxtb	r4, r0
            ++it;
   d4350:	a805      	add	r0, sp, #20
   d4352:	f7ff ff75 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4356:	9d05      	ldr	r5, [sp, #20]
   d4358:	4631      	mov	r1, r6
   d435a:	4628      	mov	r0, r5
   d435c:	f004 ff2c 	bl	d91b8 <strcmp>
   d4360:	4601      	mov	r1, r0
   d4362:	b9e0      	cbnz	r0, d439e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4364:	4620      	mov	r0, r4
   d4366:	f003 ffdb 	bl	d8320 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d436a:	a805      	add	r0, sp, #20
   d436c:	f7ff ff68 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4370:	e7e7      	b.n	d4342 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4372:	f247 7364 	movw	r3, #30564	; 0x7764
   d4376:	429f      	cmp	r7, r3
   d4378:	d03f      	beq.n	d43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d437a:	f247 7376 	movw	r3, #30582	; 0x7776
   d437e:	429f      	cmp	r7, r3
   d4380:	f000 8087 	beq.w	d4492 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4384:	f247 7361 	movw	r3, #30561	; 0x7761
   d4388:	429f      	cmp	r7, r3
   d438a:	d05f      	beq.n	d444c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d438c:	2300      	movs	r3, #0
   d438e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4392:	2202      	movs	r2, #2
   d4394:	9200      	str	r2, [sp, #0]
   d4396:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d439a:	4619      	mov	r1, r3
   d439c:	e029      	b.n	d43f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d439e:	4639      	mov	r1, r7
   d43a0:	4628      	mov	r0, r5
   d43a2:	f004 ff09 	bl	d91b8 <strcmp>
   d43a6:	b128      	cbz	r0, d43b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d43a8:	4641      	mov	r1, r8
   d43aa:	4628      	mov	r0, r5
   d43ac:	f004 ff04 	bl	d91b8 <strcmp>
   d43b0:	2800      	cmp	r0, #0
   d43b2:	d1da      	bne.n	d436a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d43b4:	2101      	movs	r1, #1
   d43b6:	e7d5      	b.n	d4364 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43b8:	ab0a      	add	r3, sp, #40	; 0x28
   d43ba:	4945      	ldr	r1, [pc, #276]	; (d44d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d43bc:	9307      	str	r3, [sp, #28]
   d43be:	a807      	add	r0, sp, #28
   d43c0:	2310      	movs	r3, #16
   d43c2:	2500      	movs	r5, #0
   d43c4:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43c8:	f7ff fef2 	bl	d41b0 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d43cc:	a807      	add	r0, sp, #28
   d43ce:	4621      	mov	r1, r4
   d43d0:	f7ff ff46 	bl	d4260 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d43d4:	4620      	mov	r0, r4
   d43d6:	f003 ffcd 	bl	d8374 <digitalRead>
        rsp.add(analogRead(pin));
   d43da:	4601      	mov	r1, r0
   d43dc:	a807      	add	r0, sp, #28
   d43de:	f7ff ff51 	bl	d4284 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d43e2:	9b08      	ldr	r3, [sp, #32]
   d43e4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d43e8:	3b01      	subs	r3, #1
   d43ea:	9300      	str	r3, [sp, #0]
   d43ec:	9b07      	ldr	r3, [sp, #28]
   d43ee:	462a      	mov	r2, r5
   d43f0:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d43f2:	4640      	mov	r0, r8
   d43f4:	f000 fb10 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d43f8:	e013      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d43fa:	a805      	add	r0, sp, #20
   d43fc:	f7ff ff20 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
   d4400:	6803      	ldr	r3, [r0, #0]
   d4402:	4599      	cmp	r9, r3
   d4404:	d90d      	bls.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4406:	b2a4      	uxth	r4, r4
   d4408:	2101      	movs	r1, #1
   d440a:	4620      	mov	r0, r4
   d440c:	f003 ff88 	bl	d8320 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4410:	a805      	add	r0, sp, #20
   d4412:	f7ff ff0b 	bl	d422c <_ZNK10BlynkParam8iterator5asIntEv>
   d4416:	1e01      	subs	r1, r0, #0
   d4418:	bf18      	it	ne
   d441a:	2101      	movne	r1, #1
   d441c:	4620      	mov	r0, r4
   d441e:	f003 ff90 	bl	d8342 <digitalWrite>
    }
}
   d4422:	b00f      	add	sp, #60	; 0x3c
   d4424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4428:	ab0a      	add	r3, sp, #40	; 0x28
   d442a:	9307      	str	r3, [sp, #28]
   d442c:	a807      	add	r0, sp, #28
   d442e:	2310      	movs	r3, #16
   d4430:	4928      	ldr	r1, [pc, #160]	; (d44d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d4432:	2500      	movs	r5, #0
   d4434:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4438:	f7ff feba 	bl	d41b0 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d443c:	a807      	add	r0, sp, #28
   d443e:	4621      	mov	r1, r4
   d4440:	f7ff ff0e 	bl	d4260 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4444:	4620      	mov	r0, r4
   d4446:	f003 ffa8 	bl	d839a <analogRead>
   d444a:	e7c6      	b.n	d43da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d444c:	a805      	add	r0, sp, #20
   d444e:	f7ff fef7 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
   d4452:	6803      	ldr	r3, [r0, #0]
   d4454:	4599      	cmp	r9, r3
   d4456:	d9e4      	bls.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4458:	b2a4      	uxth	r4, r4
   d445a:	2101      	movs	r1, #1
   d445c:	4620      	mov	r0, r4
   d445e:	f003 ff5f 	bl	d8320 <pinMode>
        analogWrite(pin, it.asInt());
   d4462:	a805      	add	r0, sp, #20
   d4464:	f7ff fee2 	bl	d422c <_ZNK10BlynkParam8iterator5asIntEv>
   d4468:	4601      	mov	r1, r0
   d446a:	4620      	mov	r0, r4
   d446c:	f003 ffac 	bl	d83c8 <_Z11analogWritetm>
    } break;
   d4470:	e7d7      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4472:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4474:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4478:	f002 fa1e 	bl	d68b8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d447c:	4603      	mov	r3, r0
            handler(req);
   d447e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4480:	b123      	cbz	r3, d448c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4482:	4a15      	ldr	r2, [pc, #84]	; (d44d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4484:	4293      	cmp	r3, r2
   d4486:	d001      	beq.n	d448c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4488:	4798      	blx	r3
   d448a:	e7ca      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d448c:	f002 fa10 	bl	d68b0 <BlynkWidgetRead>
        }
    }
   d4490:	e7c7      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4492:	a805      	add	r0, sp, #20
   d4494:	f7ff fed4 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4498:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d449a:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d449e:	1b5d      	subs	r5, r3, r5
   d44a0:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d44a2:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d44a4:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d44a8:	950c      	str	r5, [sp, #48]	; 0x30
   d44aa:	f002 fa0f 	bl	d68cc <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d44ae:	4603      	mov	r3, r0
            handler(req, param);
   d44b0:	a90a      	add	r1, sp, #40	; 0x28
   d44b2:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d44b4:	b123      	cbz	r3, d44c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d44b6:	4a09      	ldr	r2, [pc, #36]	; (d44dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d44b8:	4293      	cmp	r3, r2
   d44ba:	d001      	beq.n	d44c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d44bc:	4798      	blx	r3
   d44be:	e7b0      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d44c0:	f002 f9f7 	bl	d68b2 <BlynkWidgetWrite>
    } break;
   d44c4:	e7ad      	b.n	d4422 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d44c6:	bf00      	nop
   d44c8:	000daf9f 	.word	0x000daf9f
   d44cc:	000dafa2 	.word	0x000dafa2
   d44d0:	000dafaa 	.word	0x000dafaa
   d44d4:	000dafad 	.word	0x000dafad
   d44d8:	000d68b1 	.word	0x000d68b1
   d44dc:	000d68b3 	.word	0x000d68b3
   d44e0:	000dafa6 	.word	0x000dafa6

000d44e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44e8:	b08c      	sub	sp, #48	; 0x30
   d44ea:	af04      	add	r7, sp, #16
   d44ec:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d44ee:	2205      	movs	r2, #5
   d44f0:	6800      	ldr	r0, [r0, #0]
   d44f2:	1d39      	adds	r1, r7, #4
   d44f4:	f003 f841 	bl	d757a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d44f8:	b3b8      	cbz	r0, d456a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d44fa:	2805      	cmp	r0, #5
   d44fc:	d004      	beq.n	d4508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d44fe:	2000      	movs	r0, #0
}
   d4500:	3720      	adds	r7, #32
   d4502:	46bd      	mov	sp, r7
   d4504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4508:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d450c:	0a13      	lsrs	r3, r2, #8
   d450e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4512:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d4516:	f8a7 3005 	strh.w	r3, [r7, #5]
   d451a:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d451c:	0a13      	lsrs	r3, r2, #8
   d451e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4522:	fa1f f883 	uxth.w	r8, r3
   d4526:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d452a:	2900      	cmp	r1, #0
   d452c:	d0e7      	beq.n	d44fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d452e:	793b      	ldrb	r3, [r7, #4]
   d4530:	bb23      	cbnz	r3, d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4532:	f002 f9bb 	bl	d68ac <_Z11BlynkMillisv>
   d4536:	4602      	mov	r2, r0
   d4538:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d453a:	7f60      	ldrb	r0, [r4, #29]
   d453c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4540:	b9c0      	cbnz	r0, d4574 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4542:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4546:	2901      	cmp	r1, #1
   d4548:	d114      	bne.n	d4574 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d454a:	2b09      	cmp	r3, #9
   d454c:	d00f      	beq.n	d456e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d454e:	2bc8      	cmp	r3, #200	; 0xc8
   d4550:	d001      	beq.n	d4556 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4552:	2b04      	cmp	r3, #4
   d4554:	d1d4      	bne.n	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4556:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4558:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d455a:	4620      	mov	r0, r4
                state = CONNECTED;
   d455c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d455e:	f000 fb09 	bl	d4b74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4562:	f7ff fe57 	bl	d4214 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4566:	f002 f9a5 	bl	d68b4 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d456a:	2001      	movs	r0, #1
   d456c:	e7c8      	b.n	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d456e:	2303      	movs	r3, #3
   d4570:	7763      	strb	r3, [r4, #29]
                break;
   d4572:	e7c5      	b.n	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4574:	1f58      	subs	r0, r3, #5
   d4576:	bf18      	it	ne
   d4578:	2001      	movne	r0, #1
   d457a:	e7c1      	b.n	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d457c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4580:	d903      	bls.n	d458a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4582:	4620      	mov	r0, r4
   d4584:	f7ff fea4 	bl	d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4588:	e7ef      	b.n	d456a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d458a:	f108 0308 	add.w	r3, r8, #8
   d458e:	f023 0307 	bic.w	r3, r3, #7
   d4592:	466e      	mov	r6, sp
   d4594:	ebad 0d03 	sub.w	sp, sp, r3
   d4598:	ad04      	add	r5, sp, #16
   d459a:	6820      	ldr	r0, [r4, #0]
   d459c:	4642      	mov	r2, r8
   d459e:	4629      	mov	r1, r5
   d45a0:	f002 ffeb 	bl	d757a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d45a4:	4580      	cmp	r8, r0
   d45a6:	f04f 0000 	mov.w	r0, #0
   d45aa:	d17f      	bne.n	d46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d45ac:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d45b0:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d45b2:	f002 f97b 	bl	d68ac <_Z11BlynkMillisv>
    switch (hdr.type)
   d45b6:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d45b8:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d45ba:	2b14      	cmp	r3, #20
   d45bc:	f000 80a6 	beq.w	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45c0:	d848      	bhi.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d45c2:	2b0f      	cmp	r3, #15
   d45c4:	f000 80a2 	beq.w	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45c8:	d807      	bhi.n	d45da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d45ca:	2b02      	cmp	r3, #2
   d45cc:	d048      	beq.n	d4660 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d45ce:	2b06      	cmp	r3, #6
   d45d0:	d051      	beq.n	d4676 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d45d2:	4620      	mov	r0, r4
   d45d4:	f7ff fe7c 	bl	d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45d8:	e058      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d45da:	2b11      	cmp	r3, #17
   d45dc:	d1f9      	bne.n	d45d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d45de:	2300      	movs	r3, #0
   d45e0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d45e2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d45e6:	442b      	add	r3, r5
        if (it >= param.end())
   d45e8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45ea:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d45ee:	d24d      	bcs.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d45f0:	f107 000c 	add.w	r0, r7, #12
   d45f4:	f8d5 8000 	ldr.w	r8, [r5]
   d45f8:	f7ff fe22 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d45fc:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d45fe:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d4602:	1b5d      	subs	r5, r3, r5
   d4604:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d4606:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d460a:	687b      	ldr	r3, [r7, #4]
   d460c:	61fd      	str	r5, [r7, #28]
   d460e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4612:	8363      	strh	r3, [r4, #26]
   d4614:	4b64      	ldr	r3, [pc, #400]	; (d47a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d4616:	4598      	cmp	r8, r3
   d4618:	f000 80bf 	beq.w	d479a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d461c:	f200 808c 	bhi.w	d4738 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4620:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4624:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4628:	4413      	add	r3, r2
   d462a:	4598      	cmp	r8, r3
   d462c:	f000 809d 	beq.w	d476a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4630:	d879      	bhi.n	d4726 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4632:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d4636:	3b06      	subs	r3, #6
   d4638:	4598      	cmp	r8, r3
   d463a:	f000 809c 	beq.w	d4776 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d463e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4642:	3303      	adds	r3, #3
   d4644:	4598      	cmp	r8, r3
   d4646:	d16b      	bne.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4648:	f107 0114 	add.w	r1, r7, #20
   d464c:	4638      	mov	r0, r7
   d464e:	f002 f930 	bl	d68b2 <BlynkWidgetWrite>
   d4652:	e065      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4654:	2b29      	cmp	r3, #41	; 0x29
   d4656:	d01b      	beq.n	d4690 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4658:	2b37      	cmp	r3, #55	; 0x37
   d465a:	d017      	beq.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d465c:	2b1d      	cmp	r3, #29
   d465e:	d1b8      	bne.n	d45d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4660:	7f63      	ldrb	r3, [r4, #29]
   d4662:	b943      	cbnz	r3, d4676 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4664:	2301      	movs	r3, #1
   d4666:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4668:	4620      	mov	r0, r4
   d466a:	f000 fa83 	bl	d4b74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d466e:	f7ff fdd1 	bl	d4214 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4672:	f002 f91f 	bl	d68b4 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d4676:	2300      	movs	r3, #0
   d4678:	21c8      	movs	r1, #200	; 0xc8
   d467a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d467e:	9100      	str	r1, [sp, #0]
   d4680:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4684:	4619      	mov	r1, r3
   d4686:	4620      	mov	r0, r4
   d4688:	f000 f9c6 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d468c:	2001      	movs	r0, #1
   d468e:	e00d      	b.n	d46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4690:	68a3      	ldr	r3, [r4, #8]
   d4692:	b91b      	cbnz	r3, d469c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4694:	2040      	movs	r0, #64	; 0x40
   d4696:	f002 fbcf 	bl	d6e38 <malloc>
   d469a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d469c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46a0:	44a8      	add	r8, r5
        if (it >= param.end())
   d46a2:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46a4:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d46a8:	d302      	bcc.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d46aa:	2000      	movs	r0, #0
   d46ac:	46b5      	mov	sp, r6
   d46ae:	e727      	b.n	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d46b0:	4629      	mov	r1, r5
   d46b2:	2240      	movs	r2, #64	; 0x40
   d46b4:	68a0      	ldr	r0, [r4, #8]
   d46b6:	f004 fda3 	bl	d9200 <strncpy>
        redir_serv[63] = '\0';
   d46ba:	68a3      	ldr	r3, [r4, #8]
   d46bc:	2500      	movs	r5, #0
   d46be:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d46c2:	f107 0014 	add.w	r0, r7, #20
   d46c6:	f7ff fdbb 	bl	d4240 <_ZN10BlynkParam8iteratorppEv>
   d46ca:	6803      	ldr	r3, [r0, #0]
   d46cc:	4543      	cmp	r3, r8
   d46ce:	d21b      	bcs.n	d4708 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d46d0:	6978      	ldr	r0, [r7, #20]
   d46d2:	b120      	cbz	r0, d46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d46d4:	69bb      	ldr	r3, [r7, #24]
   d46d6:	4298      	cmp	r0, r3
   d46d8:	d214      	bcs.n	d4704 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46da:	f004 fd20 	bl	d911e <atol>
            redir_port = it.asLong();
   d46de:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d46e0:	6820      	ldr	r0, [r4, #0]
   d46e2:	f003 fc15 	bl	d7f10 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d46e6:	6823      	ldr	r3, [r4, #0]
   d46e8:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d46ea:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d46ec:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d46ee:	2300      	movs	r3, #0
   d46f0:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d46f2:	f002 f8db 	bl	d68ac <_Z11BlynkMillisv>
   d46f6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d46fa:	3808      	subs	r0, #8
   d46fc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4700:	6160      	str	r0, [r4, #20]
   d4702:	e7c3      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4704:	4628      	mov	r0, r5
   d4706:	e7ea      	b.n	d46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4708:	2550      	movs	r5, #80	; 0x50
   d470a:	e7e9      	b.n	d46e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d470c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d470e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4712:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4716:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4718:	4629      	mov	r1, r5
   d471a:	4620      	mov	r0, r4
   d471c:	f7ff fde2 	bl	d42e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4720:	2300      	movs	r3, #0
   d4722:	8363      	strh	r3, [r4, #26]
   d4724:	e7b2      	b.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4726:	4b21      	ldr	r3, [pc, #132]	; (d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4728:	4598      	cmp	r8, r3
   d472a:	d1f9      	bne.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d472c:	f107 0114 	add.w	r1, r7, #20
   d4730:	4638      	mov	r0, r7
   d4732:	f002 f8be 	bl	d68b2 <BlynkWidgetWrite>
   d4736:	e7f3      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4738:	4b1d      	ldr	r3, [pc, #116]	; (d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d473a:	4598      	cmp	r8, r3
   d473c:	d021      	beq.n	d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d473e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4742:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4746:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d474a:	4598      	cmp	r8, r3
   d474c:	d01f      	beq.n	d478e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d474e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4752:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d4756:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d475a:	4598      	cmp	r8, r3
   d475c:	d1e0      	bne.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d475e:	f107 0114 	add.w	r1, r7, #20
   d4762:	4638      	mov	r0, r7
   d4764:	f002 f8a5 	bl	d68b2 <BlynkWidgetWrite>
   d4768:	e7da      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d476a:	f107 0114 	add.w	r1, r7, #20
   d476e:	4638      	mov	r0, r7
   d4770:	f002 f89f 	bl	d68b2 <BlynkWidgetWrite>
   d4774:	e7d4      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4776:	f107 0114 	add.w	r1, r7, #20
   d477a:	4638      	mov	r0, r7
   d477c:	f002 f899 	bl	d68b2 <BlynkWidgetWrite>
   d4780:	e7ce      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4782:	f107 0114 	add.w	r1, r7, #20
   d4786:	4638      	mov	r0, r7
   d4788:	f002 f893 	bl	d68b2 <BlynkWidgetWrite>
   d478c:	e7c8      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d478e:	f107 0114 	add.w	r1, r7, #20
   d4792:	4638      	mov	r0, r7
   d4794:	f002 f88d 	bl	d68b2 <BlynkWidgetWrite>
   d4798:	e7c2      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d479a:	f107 0114 	add.w	r1, r7, #20
   d479e:	4638      	mov	r0, r7
   d47a0:	f002 f887 	bl	d68b2 <BlynkWidgetWrite>
   d47a4:	e7bc      	b.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d47a6:	bf00      	nop
   d47a8:	00736676 	.word	0x00736676
   d47ac:	00676264 	.word	0x00676264
   d47b0:	6e6f6361 	.word	0x6e6f6361

000d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47b8:	4604      	mov	r4, r0
   d47ba:	b08c      	sub	sp, #48	; 0x30
   d47bc:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d47be:	f7ff fd29 	bl	d4214 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d47c2:	7f63      	ldrb	r3, [r4, #29]
   d47c4:	2b02      	cmp	r3, #2
   d47c6:	f000 80a8 	beq.w	d491a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d47ca:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d47cc:	8b62      	ldrh	r2, [r4, #26]
   d47ce:	3301      	adds	r3, #1
   d47d0:	b2db      	uxtb	r3, r3
   d47d2:	7723      	strb	r3, [r4, #28]
   d47d4:	b10a      	cbz	r2, d47da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d47d6:	2501      	movs	r5, #1
   d47d8:	e016      	b.n	d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d47da:	2b02      	cmp	r3, #2
   d47dc:	d8fb      	bhi.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d47de:	6820      	ldr	r0, [r4, #0]
   d47e0:	f003 f9b5 	bl	d7b4e <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d47e4:	b1b8      	cbz	r0, d4816 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d47e6:	b925      	cbnz	r5, d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d47e8:	6820      	ldr	r0, [r4, #0]
   d47ea:	f003 fb37 	bl	d7e5c <_ZN9TCPClient9availableEv>
   d47ee:	2800      	cmp	r0, #0
   d47f0:	dd11      	ble.n	d4816 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d47f2:	4620      	mov	r0, r4
   d47f4:	f7ff fe76 	bl	d44e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d47f8:	4605      	mov	r5, r0
   d47fa:	2800      	cmp	r0, #0
   d47fc:	d1f4      	bne.n	d47e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d47fe:	6820      	ldr	r0, [r4, #0]
   d4800:	f003 fb86 	bl	d7f10 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4804:	f002 f856 	bl	d68b4 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4808:	7f23      	ldrb	r3, [r4, #28]
   d480a:	3b01      	subs	r3, #1
   d480c:	7723      	strb	r3, [r4, #28]
}
   d480e:	4628      	mov	r0, r5
   d4810:	b00c      	add	sp, #48	; 0x30
   d4812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d4816:	f002 f849 	bl	d68ac <_Z11BlynkMillisv>
   d481a:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d481c:	6820      	ldr	r0, [r4, #0]
   d481e:	f003 f996 	bl	d7b4e <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4822:	7f67      	ldrb	r7, [r4, #29]
   d4824:	2f01      	cmp	r7, #1
   d4826:	4605      	mov	r5, r0
   d4828:	d129      	bne.n	d487e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d482a:	b920      	cbnz	r0, d4836 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d482c:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d482e:	4620      	mov	r0, r4
   d4830:	f7ff fd4e 	bl	d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4834:	e7e8      	b.n	d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4836:	68e3      	ldr	r3, [r4, #12]
   d4838:	f24f 6218 	movw	r2, #63000	; 0xf618
   d483c:	1af3      	subs	r3, r6, r3
   d483e:	4293      	cmp	r3, r2
   d4840:	d904      	bls.n	d484c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4842:	4620      	mov	r0, r4
   d4844:	f7ff fd44 	bl	d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4848:	2500      	movs	r5, #0
   d484a:	e7dd      	b.n	d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d484c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4850:	4293      	cmp	r3, r2
   d4852:	d803      	bhi.n	d485c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4854:	6923      	ldr	r3, [r4, #16]
   d4856:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4858:	4293      	cmp	r3, r2
   d485a:	d9bc      	bls.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d485c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d485e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4862:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4864:	4293      	cmp	r3, r2
   d4866:	d9b6      	bls.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4868:	2300      	movs	r3, #0
   d486a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d486e:	9300      	str	r3, [sp, #0]
   d4870:	461a      	mov	r2, r3
   d4872:	2106      	movs	r1, #6
   d4874:	4620      	mov	r0, r4
   d4876:	f000 f8cf 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d487a:	6166      	str	r6, [r4, #20]
   d487c:	e7ab      	b.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d487e:	2f00      	cmp	r7, #0
   d4880:	d1a9      	bne.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4882:	6962      	ldr	r2, [r4, #20]
   d4884:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4886:	b140      	cbz	r0, d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4888:	f241 7370 	movw	r3, #6000	; 0x1770
   d488c:	429a      	cmp	r2, r3
   d488e:	d9a2      	bls.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4890:	6820      	ldr	r0, [r4, #0]
   d4892:	f003 fb3d 	bl	d7f10 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4896:	7767      	strb	r7, [r4, #29]
   d4898:	e7d6      	b.n	d4848 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d489a:	f241 3388 	movw	r3, #5000	; 0x1388
   d489e:	429a      	cmp	r2, r3
   d48a0:	d999      	bls.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48a2:	6820      	ldr	r0, [r4, #0]
   d48a4:	f003 fb34 	bl	d7f10 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d48a8:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d48ac:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d48b0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d48b4:	f1be 0f00 	cmp.w	lr, #0
   d48b8:	d00b      	beq.n	d48d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d48ba:	462b      	mov	r3, r5
   d48bc:	4642      	mov	r2, r8
   d48be:	4671      	mov	r1, lr
   d48c0:	4660      	mov	r0, ip
   d48c2:	f003 fb83 	bl	d7fcc <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d48c6:	1e43      	subs	r3, r0, #1
   d48c8:	425d      	negs	r5, r3
   d48ca:	415d      	adcs	r5, r3
   d48cc:	b98d      	cbnz	r5, d48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d48ce:	6166      	str	r6, [r4, #20]
                return false;
   d48d0:	e79a      	b.n	d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48d2:	4b13      	ldr	r3, [pc, #76]	; (d4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d48d4:	9306      	str	r3, [sp, #24]
   d48d6:	f10c 0720 	add.w	r7, ip, #32
   d48da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48dc:	ad07      	add	r5, sp, #28
   d48de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48e0:	683b      	ldr	r3, [r7, #0]
   d48e2:	702b      	strb	r3, [r5, #0]
   d48e4:	4642      	mov	r2, r8
   d48e6:	4673      	mov	r3, lr
   d48e8:	a906      	add	r1, sp, #24
   d48ea:	4660      	mov	r0, ip
   d48ec:	f003 fa3b 	bl	d7d66 <_ZN9TCPClient7connectE9IPAddresstm>
   d48f0:	e7e9      	b.n	d48c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48f2:	6863      	ldr	r3, [r4, #4]
   d48f4:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d48f6:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48f8:	4618      	mov	r0, r3
            msgIdOut = 1;
   d48fa:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48fc:	f004 fc66 	bl	d91cc <strlen>
   d4900:	2200      	movs	r2, #0
   d4902:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4906:	9b05      	ldr	r3, [sp, #20]
   d4908:	9000      	str	r0, [sp, #0]
   d490a:	4632      	mov	r2, r6
   d490c:	211d      	movs	r1, #29
   d490e:	4620      	mov	r0, r4
   d4910:	f000 f882 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4914:	6923      	ldr	r3, [r4, #16]
   d4916:	6163      	str	r3, [r4, #20]
            return true;
   d4918:	e776      	b.n	d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d491a:	2500      	movs	r5, #0
   d491c:	e777      	b.n	d480e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d491e:	bf00      	nop
   d4920:	000dc004 	.word	0x000dc004

000d4924 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4928:	4615      	mov	r5, r2
   d492a:	b08c      	sub	sp, #48	; 0x30
   d492c:	4604      	mov	r4, r0
   d492e:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4930:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4934:	460f      	mov	r7, r1
   d4936:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4938:	f001 ffb6 	bl	d68a8 <_Z10BlynkDelaym>
   d493c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d493e:	ae01      	add	r6, sp, #4
   d4940:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4942:	682b      	ldr	r3, [r5, #0]
   d4944:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d4946:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4948:	f001 ffb0 	bl	d68ac <_Z11BlynkMillisv>
   d494c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4950:	3808      	subs	r0, #8
   d4952:	af01      	add	r7, sp, #4
   d4954:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4958:	6160      	str	r0, [r4, #20]
   d495a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d495c:	ae07      	add	r6, sp, #28
   d495e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4960:	683b      	ldr	r3, [r7, #0]
   d4962:	7033      	strb	r3, [r6, #0]
   d4964:	af07      	add	r7, sp, #28
   d4966:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4968:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d496a:	f04f 0c00 	mov.w	ip, #0
   d496e:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4972:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d4976:	3520      	adds	r5, #32
   d4978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d497a:	6833      	ldr	r3, [r6, #0]
   d497c:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d497e:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4980:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4984:	6820      	ldr	r0, [r4, #0]
   d4986:	f003 fac3 	bl	d7f10 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d498a:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d498c:	f001 ff8e 	bl	d68ac <_Z11BlynkMillisv>
   d4990:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4992:	7f63      	ldrb	r3, [r4, #29]
   d4994:	2b01      	cmp	r3, #1
   d4996:	d00c      	beq.n	d49b2 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4998:	f001 ff88 	bl	d68ac <_Z11BlynkMillisv>
   d499c:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d499e:	42b8      	cmp	r0, r7
   d49a0:	d804      	bhi.n	d49ac <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d49a2:	2100      	movs	r1, #0
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff ff05 	bl	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d49aa:	e7f2      	b.n	d4992 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d49ac:	7f63      	ldrb	r3, [r4, #29]
   d49ae:	2b01      	cmp	r3, #1
   d49b0:	d1e8      	bne.n	d4984 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d49b2:	b00c      	add	sp, #48	; 0x30
   d49b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d49b8 <setup>:

void setup()
{
   d49b8:	b510      	push	{r4, lr}
   d49ba:	b088      	sub	sp, #32
  Blynk.begin("rPvjevy8R-9N6CXt0GOrIu2meSjpbP1C", IPAddress(167, 172, 234, 162), 9090); // in setup
   d49bc:	23a2      	movs	r3, #162	; 0xa2
   d49be:	9300      	str	r3, [sp, #0]
   d49c0:	22ac      	movs	r2, #172	; 0xac
   d49c2:	23ea      	movs	r3, #234	; 0xea
   d49c4:	21a7      	movs	r1, #167	; 0xa7
   d49c6:	a802      	add	r0, sp, #8
   d49c8:	f002 ff28 	bl	d781c <_ZN9IPAddressC1Ehhhh>
  Serial.begin(9600);
  display.setup();
   d49cc:	4c0f      	ldr	r4, [pc, #60]	; (d4a0c <setup+0x54>)
  Blynk.begin("rPvjevy8R-9N6CXt0GOrIu2meSjpbP1C", IPAddress(167, 172, 234, 162), 9090); // in setup
   d49ce:	4910      	ldr	r1, [pc, #64]	; (d4a10 <setup+0x58>)
   d49d0:	4810      	ldr	r0, [pc, #64]	; (d4a14 <setup+0x5c>)
   d49d2:	aa02      	add	r2, sp, #8
   d49d4:	f242 3382 	movw	r3, #9090	; 0x2382
   d49d8:	f7ff ffa4 	bl	d4924 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Serial.begin(9600);
   d49dc:	f002 ff96 	bl	d790c <_Z16_fetch_usbserialv>
   d49e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49e4:	f002 ff86 	bl	d78f4 <_ZN9USBSerial5beginEl>
  display.setup();
   d49e8:	4620      	mov	r0, r4
   d49ea:	f000 fe41 	bl	d5670 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d49ee:	4620      	mov	r0, r4
   d49f0:	f001 fc54 	bl	d629c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d49f4:	2101      	movs	r1, #1
   d49f6:	4620      	mov	r0, r4
   d49f8:	f000 fdeb 	bl	d55d2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d49fc:	2200      	movs	r2, #0
   d49fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4a02:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
}
   d4a06:	b008      	add	sp, #32
   d4a08:	bd10      	pop	{r4, pc}
   d4a0a:	bf00      	nop
   d4a0c:	2003e5c4 	.word	0x2003e5c4
   d4a10:	000dafb0 	.word	0x000dafb0
   d4a14:	2003e504 	.word	0x2003e504

000d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a1c:	b083      	sub	sp, #12
   d4a1e:	af00      	add	r7, sp, #0
   d4a20:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4a22:	6800      	ldr	r0, [r0, #0]
   d4a24:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4a26:	4688      	mov	r8, r1
   d4a28:	4616      	mov	r6, r2
   d4a2a:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4a2c:	46eb      	mov	fp, sp
   d4a2e:	f003 f88e 	bl	d7b4e <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4a32:	2800      	cmp	r0, #0
   d4a34:	d07f      	beq.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a36:	f1b8 0f1d 	cmp.w	r8, #29
   d4a3a:	d804      	bhi.n	d4a46 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4a3c:	4b4c      	ldr	r3, [pc, #304]	; (d4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4a3e:	fa23 f308 	lsr.w	r3, r3, r8
   d4a42:	07db      	lsls	r3, r3, #31
   d4a44:	d402      	bmi.n	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4a46:	7f63      	ldrb	r3, [r4, #29]
   d4a48:	2b01      	cmp	r3, #1
   d4a4a:	d174      	bne.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4a4c:	b946      	cbnz	r6, d4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a4e:	8b66      	ldrh	r6, [r4, #26]
   d4a50:	b936      	cbnz	r6, d4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a52:	8b23      	ldrh	r3, [r4, #24]
   d4a54:	3301      	adds	r3, #1
   d4a56:	b29b      	uxth	r3, r3
   d4a58:	2b00      	cmp	r3, #0
   d4a5a:	d071      	beq.n	d4b40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4a5c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a5e:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a60:	f1a8 030c 	sub.w	r3, r8, #12
   d4a64:	2b08      	cmp	r3, #8
   d4a66:	d816      	bhi.n	d4a96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a68:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4a6c:	4293      	cmp	r3, r2
   d4a6e:	bf38      	it	cc
   d4a70:	4613      	movcc	r3, r2
   d4a72:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a76:	f001 ff19 	bl	d68ac <_Z11BlynkMillisv>
   d4a7a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4a7e:	2800      	cmp	r0, #0
   d4a80:	db60      	blt.n	d4b44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a82:	2100      	movs	r1, #0
   d4a84:	4620      	mov	r0, r4
   d4a86:	f7ff fe95 	bl	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a8a:	f001 ff0f 	bl	d68ac <_Z11BlynkMillisv>
   d4a8e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a92:	2800      	cmp	r0, #0
   d4a94:	daf5      	bge.n	d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a96:	f1b9 0f00 	cmp.w	r9, #0
   d4a9a:	d05a      	beq.n	d4b52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a9c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4aa0:	2a00      	cmp	r2, #0
   d4aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4aa4:	bf08      	it	eq
   d4aa6:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aa8:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4aac:	f10a 0307 	add.w	r3, sl, #7
   d4ab0:	f023 0307 	bic.w	r3, r3, #7
   d4ab4:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4aba:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4abe:	18ea      	adds	r2, r5, r3
   d4ac0:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4ac4:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4ac6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4aca:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4ace:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4ad2:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4ad6:	f1b9 0f00 	cmp.w	r9, #0
   d4ada:	d03c      	beq.n	d4b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4adc:	2d00      	cmp	r5, #0
   d4ade:	d03a      	beq.n	d4b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4ae0:	462a      	mov	r2, r5
   d4ae2:	4649      	mov	r1, r9
   d4ae4:	f10d 0005 	add.w	r0, sp, #5
   d4ae8:	f004 fb2c 	bl	d9144 <memcpy>
        pos += length;
   d4aec:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4af0:	b13b      	cbz	r3, d4b02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4af4:	b12b      	cbz	r3, d4b02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4af6:	461a      	mov	r2, r3
   d4af8:	687b      	ldr	r3, [r7, #4]
   d4afa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4afc:	4418      	add	r0, r3
   d4afe:	f004 fb21 	bl	d9144 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4b02:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4b04:	4555      	cmp	r5, sl
   d4b06:	d22a      	bcs.n	d4b5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4b08:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4b0c:	687b      	ldr	r3, [r7, #4]
   d4b0e:	6820      	ldr	r0, [r4, #0]
   d4b10:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4b14:	bf28      	it	cs
   d4b16:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4b1a:	1959      	adds	r1, r3, r5
   d4b1c:	f003 f801 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
   d4b20:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4b22:	2000      	movs	r0, #0
   d4b24:	f001 fec0 	bl	d68a8 <_Z10BlynkDelaym>
        if (w == 0) {
   d4b28:	b9be      	cbnz	r6, d4b5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4b2a:	6820      	ldr	r0, [r4, #0]
   d4b2c:	f003 f9f0 	bl	d7f10 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4b30:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4b32:	f001 febf 	bl	d68b4 <BlynkNoOpCbk>
}
   d4b36:	370c      	adds	r7, #12
   d4b38:	46dd      	mov	sp, fp
   d4b3a:	46bd      	mov	sp, r7
   d4b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4b40:	2301      	movs	r3, #1
   d4b42:	e78b      	b.n	d4a5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4b44:	7f21      	ldrb	r1, [r4, #28]
   d4b46:	2900      	cmp	r1, #0
   d4b48:	d1a5      	bne.n	d4a96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	f7ff fe32 	bl	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b50:	e7a1      	b.n	d4a96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b52:	2305      	movs	r3, #5
   d4b54:	e7a3      	b.n	d4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4b56:	2005      	movs	r0, #5
   d4b58:	e7c9      	b.n	d4aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4b5a:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4b5c:	e7d2      	b.n	d4b04 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4b5e:	d003      	beq.n	d4b68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4b60:	4620      	mov	r0, r4
   d4b62:	f7ff fbb5 	bl	d42d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b66:	e7e6      	b.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b68:	f001 fea0 	bl	d68ac <_Z11BlynkMillisv>
   d4b6c:	6120      	str	r0, [r4, #16]
   d4b6e:	e7e2      	b.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4b70:	20000045 	.word	0x20000045

000d4b74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4b74:	b500      	push	{lr}
   d4b76:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4b78:	ab04      	add	r3, sp, #16
   d4b7a:	2200      	movs	r2, #0
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	2349      	movs	r3, #73	; 0x49
   d4b80:	9300      	str	r3, [sp, #0]
   d4b82:	9202      	str	r2, [sp, #8]
   d4b84:	4b03      	ldr	r3, [pc, #12]	; (d4b94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b86:	2111      	movs	r1, #17
   d4b88:	f7ff ff46 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b8c:	b015      	add	sp, #84	; 0x54
   d4b8e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b92:	bf00      	nop
   d4b94:	000daff1 	.word	0x000daff1

000d4b98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b9a:	ed2d 8b02 	vpush	{d8}
   d4b9e:	eeb0 8a41 	vmov.f32	s16, s2
   d4ba2:	eef0 8a61 	vmov.f32	s17, s3
   d4ba6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
   d4baa:	461c      	mov	r4, r3
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bac:	ab0a      	add	r3, sp, #40	; 0x28
   d4bae:	460f      	mov	r7, r1
   d4bb0:	4616      	mov	r6, r2
   d4bb2:	491e      	ldr	r1, [pc, #120]	; (d4c2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x94>)
   d4bb4:	9307      	str	r3, [sp, #28]
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4bbc:	4605      	mov	r5, r0
   d4bbe:	a807      	add	r0, sp, #28
   d4bc0:	ed8d 0b04 	vstr	d0, [sp, #16]
   d4bc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (str == NULL) {
   d4bc8:	f7ff faf2 	bl	d41b0 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4bcc:	4639      	mov	r1, r7
   d4bce:	a807      	add	r0, sp, #28
   d4bd0:	f7ff fb46 	bl	d4260 <_ZN10BlynkParam3addEi>
        add(head);
   d4bd4:	4631      	mov	r1, r6
   d4bd6:	a807      	add	r0, sp, #28
   d4bd8:	f7ff fb42 	bl	d4260 <_ZN10BlynkParam3addEi>
   d4bdc:	ed9d 0b04 	vldr	d0, [sp, #16]
   d4be0:	a807      	add	r0, sp, #28
   d4be2:	f7ff fb61 	bl	d42a8 <_ZN10BlynkParam3addEd>
   d4be6:	eeb0 0a48 	vmov.f32	s0, s16
   d4bea:	eef0 0a68 	vmov.f32	s1, s17
   d4bee:	a807      	add	r0, sp, #28
   d4bf0:	f7ff fb5a 	bl	d42a8 <_ZN10BlynkParam3addEd>
    if (str == NULL) {
   d4bf4:	b9a4      	cbnz	r4, d4c20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x88>
        buff[len++] = '\0';
   d4bf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   d4bfa:	1c59      	adds	r1, r3, #1
   d4bfc:	9108      	str	r1, [sp, #32]
   d4bfe:	54d4      	strb	r4, [r2, r3]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4c00:	9b08      	ldr	r3, [sp, #32]
   d4c02:	2200      	movs	r2, #0
   d4c04:	3b01      	subs	r3, #1
   d4c06:	9300      	str	r3, [sp, #0]
   d4c08:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4c0c:	9b07      	ldr	r3, [sp, #28]
   d4c0e:	2114      	movs	r1, #20
   d4c10:	4628      	mov	r0, r5
   d4c12:	f7ff ff01 	bl	d4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c16:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d4c1a:	ecbd 8b02 	vpop	{d8}
   d4c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c20:	4621      	mov	r1, r4
   d4c22:	a807      	add	r0, sp, #28
   d4c24:	f7ff fac4 	bl	d41b0 <_ZN10BlynkParam3addEPKc.part.0>
   d4c28:	e7ea      	b.n	d4c00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x68>
   d4c2a:	bf00      	nop
   d4c2c:	000dafd1 	.word	0x000dafd1

000d4c30 <loop>:

void loop()
{
   d4c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  client.loop();
   d4c32:	4826      	ldr	r0, [pc, #152]	; (d4ccc <loop+0x9c>)
  display.loop();
  Blynk.run();

  bMap.location(1, lat, longitude, "Point");
   d4c34:	4d26      	ldr	r5, [pc, #152]	; (d4cd0 <loop+0xa0>)
   d4c36:	4e27      	ldr	r6, [pc, #156]	; (d4cd4 <loop+0xa4>)
  client.loop();
   d4c38:	f001 f844 	bl	d5cc4 <_ZN4MQTT4loopEv>
  display.loop();
   d4c3c:	4826      	ldr	r0, [pc, #152]	; (d4cd8 <loop+0xa8>)
   d4c3e:	f000 fd40 	bl	d56c2 <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   d4c42:	2100      	movs	r1, #0
   d4c44:	4825      	ldr	r0, [pc, #148]	; (d4cdc <loop+0xac>)
   d4c46:	f7ff fdb5 	bl	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        Blynk.virtualWrite(mPin, "clr");
    }

    template<typename T1, typename T2, typename T3, typename T4>
    void location(const T1& index, const T2& lat, const T3& lon, const T4& value) {
        Blynk.virtualWrite(mPin, index, lat, lon, value);
   d4c4a:	4925      	ldr	r1, [pc, #148]	; (d4ce0 <loop+0xb0>)
   d4c4c:	4823      	ldr	r0, [pc, #140]	; (d4cdc <loop+0xac>)
   d4c4e:	4b25      	ldr	r3, [pc, #148]	; (d4ce4 <loop+0xb4>)
   d4c50:	7809      	ldrb	r1, [r1, #0]
   d4c52:	ed95 1b00 	vldr	d1, [r5]
   d4c56:	ed96 0b00 	vldr	d0, [r6]
   d4c5a:	2201      	movs	r2, #1
   d4c5c:	f7ff ff9c 	bl	d4b98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_>

  if (client.isConnected())
   d4c60:	481a      	ldr	r0, [pc, #104]	; (d4ccc <loop+0x9c>)
   d4c62:	f000 fee6 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d4c66:	b328      	cbz	r0, d4cb4 <loop+0x84>
  {
    client.connect(System.deviceID());
    client.subscribe("NODERED2"); // lat
    client.subscribe("NODERED3"); // long
  }
  display.clearDisplay();
   d4c68:	4c1b      	ldr	r4, [pc, #108]	; (d4cd8 <loop+0xa8>)
    client.subscribe("NODERED2"); // lat
   d4c6a:	491f      	ldr	r1, [pc, #124]	; (d4ce8 <loop+0xb8>)
   d4c6c:	4817      	ldr	r0, [pc, #92]	; (d4ccc <loop+0x9c>)
   d4c6e:	f001 f971 	bl	d5f54 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("NODERED3"); // long
   d4c72:	491e      	ldr	r1, [pc, #120]	; (d4cec <loop+0xbc>)
   d4c74:	4815      	ldr	r0, [pc, #84]	; (d4ccc <loop+0x9c>)
   d4c76:	f001 f96d 	bl	d5f54 <_ZN4MQTT9subscribeEPKc>
  display.clearDisplay();
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f001 fb0e 	bl	d629c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4c80:	4620      	mov	r0, r4
   d4c82:	2101      	movs	r1, #1
   d4c84:	f000 fca5 	bl	d55d2 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4c88:	2200      	movs	r2, #0
   d4c8a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(lat);
   d4c8e:	ed96 0b00 	vldr	d0, [r6]
   d4c92:	2102      	movs	r1, #2
   d4c94:	4620      	mov	r0, r4
   d4c96:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4c9a:	f002 fc1d 	bl	d74d8 <_ZN5Print7printlnEdi>
  display.println(longitude);
   d4c9e:	ed95 0b00 	vldr	d0, [r5]
   d4ca2:	2102      	movs	r1, #2
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f002 fc17 	bl	d74d8 <_ZN5Print7printlnEdi>
  display.display();
   d4caa:	4620      	mov	r0, r4
   d4cac:	f001 fd62 	bl	d6774 <_ZN16Adafruit_SSD13067displayEv>
   d4cb0:	b004      	add	sp, #16
   d4cb2:	bd70      	pop	{r4, r5, r6, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4cb4:	4668      	mov	r0, sp
   d4cb6:	f002 f8af 	bl	d6e18 <spark_deviceID>
    client.connect(System.deviceID());
   d4cba:	9900      	ldr	r1, [sp, #0]
   d4cbc:	4803      	ldr	r0, [pc, #12]	; (d4ccc <loop+0x9c>)
   d4cbe:	f000 ffa9 	bl	d5c14 <_ZN4MQTT7connectEPKc>
   d4cc2:	4668      	mov	r0, sp
   d4cc4:	f002 fa21 	bl	d710a <_ZN6StringD1Ev>
   d4cc8:	e7ce      	b.n	d4c68 <loop+0x38>
   d4cca:	bf00      	nop
   d4ccc:	2003e564 	.word	0x2003e564
   d4cd0:	2003e640 	.word	0x2003e640
   d4cd4:	2003e638 	.word	0x2003e638
   d4cd8:	2003e5c4 	.word	0x2003e5c4
   d4cdc:	2003e504 	.word	0x2003e504
   d4ce0:	2003e560 	.word	0x2003e560
   d4ce4:	000dafd4 	.word	0x000dafd4
   d4ce8:	000daf80 	.word	0x000daf80
   d4cec:	000daf89 	.word	0x000daf89

000d4cf0 <_GLOBAL__sub_I_Blynk>:
   d4cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d4cf2:	4d1f      	ldr	r5, [pc, #124]	; (d4d70 <_GLOBAL__sub_I_Blynk+0x80>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4cf4:	4e1f      	ldr	r6, [pc, #124]	; (d4d74 <_GLOBAL__sub_I_Blynk+0x84>)
   d4cf6:	4628      	mov	r0, r5
   d4cf8:	2400      	movs	r4, #0
   d4cfa:	f003 f953 	bl	d7fa4 <_ZN9TCPClientC1Ev>
   d4cfe:	f105 001c 	add.w	r0, r5, #28
   d4d02:	f002 fd47 	bl	d7794 <_ZN9IPAddressC1Ev>
   d4d06:	4632      	mov	r2, r6
   d4d08:	636c      	str	r4, [r5, #52]	; 0x34
   d4d0a:	872c      	strh	r4, [r5, #56]	; 0x38
   d4d0c:	491a      	ldr	r1, [pc, #104]	; (d4d78 <_GLOBAL__sub_I_Blynk+0x88>)
   d4d0e:	4628      	mov	r0, r5
   d4d10:	f003 fbc0 	bl	d8494 <__aeabi_atexit>
        , state(CONNECTING)
   d4d14:	4b19      	ldr	r3, [pc, #100]	; (d4d7c <_GLOBAL__sub_I_Blynk+0x8c>)
   d4d16:	e9c3 5400 	strd	r5, r4, [r3]
OledWingAdafruit display;
   d4d1a:	4d19      	ldr	r5, [pc, #100]	; (d4d80 <_GLOBAL__sub_I_Blynk+0x90>)
   d4d1c:	619c      	str	r4, [r3, #24]
   d4d1e:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4d22:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4d26:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   d4d28:	4621      	mov	r1, r4
   d4d2a:	2001      	movs	r0, #1
   d4d2c:	f001 fff0 	bl	d6d10 <system_thread_set_state>
OledWingAdafruit display;
   d4d30:	2107      	movs	r1, #7
   d4d32:	4628      	mov	r0, r5
   d4d34:	f000 fc6e 	bl	d5614 <_ZN16OledWingAdafruitC1Ei>
   d4d38:	4632      	mov	r2, r6
   d4d3a:	4912      	ldr	r1, [pc, #72]	; (d4d84 <_GLOBAL__sub_I_Blynk+0x94>)
   d4d3c:	4628      	mov	r0, r5
   d4d3e:	f003 fba9 	bl	d8494 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4d42:	4621      	mov	r1, r4
   d4d44:	2001      	movs	r0, #1
   d4d46:	f001 ffe3 	bl	d6d10 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   d4d4a:	4d0f      	ldr	r5, [pc, #60]	; (d4d88 <_GLOBAL__sub_I_Blynk+0x98>)
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
   d4d4c:	4b0f      	ldr	r3, [pc, #60]	; (d4d8c <_GLOBAL__sub_I_Blynk+0x9c>)
   d4d4e:	4910      	ldr	r1, [pc, #64]	; (d4d90 <_GLOBAL__sub_I_Blynk+0xa0>)
   d4d50:	701c      	strb	r4, [r3, #0]
   d4d52:	f240 725b 	movw	r2, #1883	; 0x75b
   d4d56:	4b0f      	ldr	r3, [pc, #60]	; (d4d94 <_GLOBAL__sub_I_Blynk+0xa4>)
   d4d58:	9400      	str	r4, [sp, #0]
   d4d5a:	4628      	mov	r0, r5
   d4d5c:	f000 fd60 	bl	d5820 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4d60:	490d      	ldr	r1, [pc, #52]	; (d4d98 <_GLOBAL__sub_I_Blynk+0xa8>)
   d4d62:	4632      	mov	r2, r6
   d4d64:	4628      	mov	r0, r5
   d4d66:	b002      	add	sp, #8
   d4d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
MQTT client("lab.thewcl.com", 1883, callback);
   d4d6c:	f003 bb92 	b.w	d8494 <__aeabi_atexit>
   d4d70:	2003e524 	.word	0x2003e524
   d4d74:	2003e500 	.word	0x2003e500
   d4d78:	000d41e1 	.word	0x000d41e1
   d4d7c:	2003e504 	.word	0x2003e504
   d4d80:	2003e5c4 	.word	0x2003e5c4
   d4d84:	000d55e1 	.word	0x000d55e1
   d4d88:	2003e564 	.word	0x2003e564
   d4d8c:	2003e560 	.word	0x2003e560
   d4d90:	000dafda 	.word	0x000dafda
   d4d94:	000d40cd 	.word	0x000d40cd
   d4d98:	000d5f5d 	.word	0x000d5f5d

000d4d9c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4d9c:	4770      	bx	lr

000d4d9e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4d9e:	b510      	push	{r4, lr}
  }
   d4da0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4da2:	4604      	mov	r4, r0
  }
   d4da4:	f003 fb7b 	bl	d849e <_ZdlPvj>
   d4da8:	4620      	mov	r0, r4
   d4daa:	bd10      	pop	{r4, pc}

000d4dac <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4dac:	b40e      	push	{r1, r2, r3}
   d4dae:	b503      	push	{r0, r1, lr}
   d4db0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4db2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4db4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4db8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4dba:	f002 fb98 	bl	d74ee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4dbe:	b002      	add	sp, #8
   d4dc0:	f85d eb04 	ldr.w	lr, [sp], #4
   d4dc4:	b003      	add	sp, #12
   d4dc6:	4770      	bx	lr

000d4dc8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4dca:	4604      	mov	r4, r0
   d4dcc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4dce:	7922      	ldrb	r2, [r4, #4]
   d4dd0:	68a3      	ldr	r3, [r4, #8]
   d4dd2:	b132      	cbz	r2, d4de2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4dd4:	b9a3      	cbnz	r3, d4e00 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4dd6:	490b      	ldr	r1, [pc, #44]	; (d4e04 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4dd8:	b002      	add	sp, #8
   d4dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4dde:	f002 ba77 	b.w	d72d0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4de2:	4a09      	ldr	r2, [pc, #36]	; (d4e08 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4de4:	7b26      	ldrb	r6, [r4, #12]
   d4de6:	4d09      	ldr	r5, [pc, #36]	; (d4e0c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4de8:	4909      	ldr	r1, [pc, #36]	; (d4e10 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4dea:	7b64      	ldrb	r4, [r4, #13]
   d4dec:	2e01      	cmp	r6, #1
   d4dee:	bf18      	it	ne
   d4df0:	4629      	movne	r1, r5
   d4df2:	e9cd 1400 	strd	r1, r4, [sp]
   d4df6:	4907      	ldr	r1, [pc, #28]	; (d4e14 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4df8:	f7ff ffd8 	bl	d4dac <_ZN5Print6printfEPKcz>
  }
   d4dfc:	b002      	add	sp, #8
   d4dfe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4e00:	4a05      	ldr	r2, [pc, #20]	; (d4e18 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4e02:	e7ef      	b.n	d4de4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4e04:	000db04d 	.word	0x000db04d
   d4e08:	000db044 	.word	0x000db044
   d4e0c:	000db049 	.word	0x000db049
   d4e10:	000db045 	.word	0x000db045
   d4e14:	000db063 	.word	0x000db063
   d4e18:	000db03c 	.word	0x000db03c

000d4e1c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e20:	b085      	sub	sp, #20
   d4e22:	461f      	mov	r7, r3
   d4e24:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4e28:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4e2c:	eba8 0902 	sub.w	r9, r8, r2
   d4e30:	eba7 0a01 	sub.w	sl, r7, r1
   d4e34:	f1b9 0f00 	cmp.w	r9, #0
   d4e38:	bfb8      	it	lt
   d4e3a:	f1c9 0900 	rsblt	r9, r9, #0
   d4e3e:	f1ba 0f00 	cmp.w	sl, #0
   d4e42:	bfb8      	it	lt
   d4e44:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4e48:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4e4a:	4683      	mov	fp, r0
   d4e4c:	460c      	mov	r4, r1
   d4e4e:	4615      	mov	r5, r2
    if (steep) {
   d4e50:	dd04      	ble.n	d4e5c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4e52:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4e54:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4e56:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4e58:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4e5a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4e5c:	42bc      	cmp	r4, r7
   d4e5e:	dd05      	ble.n	d4e6c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4e60:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4e62:	4645      	mov	r5, r8
   d4e64:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4e66:	4622      	mov	r2, r4
   d4e68:	463c      	mov	r4, r7
   d4e6a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4e6c:	1b3e      	subs	r6, r7, r4
   d4e6e:	b2b2      	uxth	r2, r6
   d4e70:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4e72:	eba8 0205 	sub.w	r2, r8, r5
   d4e76:	2a00      	cmp	r2, #0
   d4e78:	bfb8      	it	lt
   d4e7a:	4252      	neglt	r2, r2
   d4e7c:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4e7e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4e82:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4e86:	4545      	cmp	r5, r8
   d4e88:	bfb4      	ite	lt
   d4e8a:	2201      	movlt	r2, #1
   d4e8c:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4e90:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4e92:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4e94:	42bc      	cmp	r4, r7
   d4e96:	dc1c      	bgt.n	d4ed2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4e98:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4e9c:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4e9e:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4ea0:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4ea4:	bfc7      	ittee	gt
   d4ea6:	4629      	movgt	r1, r5
   d4ea8:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4eaa:	462a      	movle	r2, r5
   d4eac:	4621      	movle	r1, r4
   d4eae:	4658      	mov	r0, fp
   d4eb0:	47c0      	blx	r8
        }
        err -= dy;
   d4eb2:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4eb4:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4eb6:	1ab6      	subs	r6, r6, r2
   d4eb8:	b2b1      	uxth	r1, r6
   d4eba:	b236      	sxth	r6, r6
        if (err < 0) {
   d4ebc:	2e00      	cmp	r6, #0
   d4ebe:	da05      	bge.n	d4ecc <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4ec0:	9a02      	ldr	r2, [sp, #8]
   d4ec2:	4415      	add	r5, r2
            err += dx;
   d4ec4:	9a00      	ldr	r2, [sp, #0]
   d4ec6:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4ec8:	b22d      	sxth	r5, r5
            err += dx;
   d4eca:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4ecc:	3401      	adds	r4, #1
   d4ece:	b224      	sxth	r4, r4
   d4ed0:	e7e0      	b.n	d4e94 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4ed2:	b005      	add	sp, #20
   d4ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4ed8 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4ed8:	4770      	bx	lr

000d4eda <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4eda:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4edc:	6804      	ldr	r4, [r0, #0]
   d4ede:	6924      	ldr	r4, [r4, #16]
   d4ee0:	46a4      	mov	ip, r4
}
   d4ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4ee6:	4760      	bx	ip

000d4ee8 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4ee8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4eea:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4eec:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4ef0:	9502      	str	r5, [sp, #8]
   d4ef2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4ef4:	46a4      	mov	ip, r4
}
   d4ef6:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4ef8:	4760      	bx	ip

000d4efa <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4efa:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4efc:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4efe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4f02:	9502      	str	r5, [sp, #8]
   d4f04:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4f06:	46a4      	mov	ip, r4
}
   d4f08:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4f0a:	4760      	bx	ip

000d4f0c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f0c:	b470      	push	{r4, r5, r6}
   d4f0e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4f12:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4f16:	6804      	ldr	r4, [r0, #0]
   d4f18:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4f1c:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4f1e:	46a4      	mov	ip, r4
}
   d4f20:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4f22:	4760      	bx	ip

000d4f24 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f28:	461c      	mov	r4, r3
    startWrite();
   d4f2a:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4f2c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4f30:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4f32:	4605      	mov	r5, r0
   d4f34:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4f36:	3c01      	subs	r4, #1
   d4f38:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4f3a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4f3c:	b224      	sxth	r4, r4
    startWrite();
   d4f3e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4f40:	682b      	ldr	r3, [r5, #0]
   d4f42:	f8cd 8004 	str.w	r8, [sp, #4]
   d4f46:	9400      	str	r4, [sp, #0]
   d4f48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4f4a:	4628      	mov	r0, r5
   d4f4c:	463b      	mov	r3, r7
   d4f4e:	4632      	mov	r2, r6
   d4f50:	4639      	mov	r1, r7
   d4f52:	47a0      	blx	r4
    endWrite();
   d4f54:	682b      	ldr	r3, [r5, #0]
   d4f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f58:	4628      	mov	r0, r5
}
   d4f5a:	b002      	add	sp, #8
   d4f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f60:	4718      	bx	r3

000d4f62 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f66:	461d      	mov	r5, r3
    startWrite();
   d4f68:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4f6a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4f6e:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4f70:	4604      	mov	r4, r0
   d4f72:	4617      	mov	r7, r2
   d4f74:	460e      	mov	r6, r1
    startWrite();
   d4f76:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4f78:	e9cd 7800 	strd	r7, r8, [sp]
   d4f7c:	6822      	ldr	r2, [r4, #0]
   d4f7e:	1e6b      	subs	r3, r5, #1
   d4f80:	4433      	add	r3, r6
   d4f82:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4f84:	4620      	mov	r0, r4
   d4f86:	b21b      	sxth	r3, r3
   d4f88:	463a      	mov	r2, r7
   d4f8a:	4631      	mov	r1, r6
   d4f8c:	47a8      	blx	r5
    endWrite();
   d4f8e:	6823      	ldr	r3, [r4, #0]
   d4f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f92:	4620      	mov	r0, r4
}
   d4f94:	b002      	add	sp, #8
   d4f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f9a:	4718      	bx	r3

000d4f9c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fa0:	461e      	mov	r6, r3
    startWrite();
   d4fa2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4fa4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4fa8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4faa:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4fae:	460c      	mov	r4, r1
   d4fb0:	4605      	mov	r5, r0
   d4fb2:	4617      	mov	r7, r2
    startWrite();
   d4fb4:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4fb6:	4426      	add	r6, r4
   d4fb8:	42b4      	cmp	r4, r6
   d4fba:	682b      	ldr	r3, [r5, #0]
   d4fbc:	da0b      	bge.n	d4fd6 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4fbe:	f8cd 8000 	str.w	r8, [sp]
   d4fc2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4fc6:	4621      	mov	r1, r4
   d4fc8:	464b      	mov	r3, r9
   d4fca:	463a      	mov	r2, r7
   d4fcc:	4628      	mov	r0, r5
   d4fce:	3401      	adds	r4, #1
   d4fd0:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4fd2:	b224      	sxth	r4, r4
   d4fd4:	e7f0      	b.n	d4fb8 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fd8:	4628      	mov	r0, r5
}
   d4fda:	b002      	add	sp, #8
   d4fdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4fe0:	4718      	bx	r3

000d4fe2 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4fe2:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4fe4:	6802      	ldr	r2, [r0, #0]
   d4fe6:	9101      	str	r1, [sp, #4]
   d4fe8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4fec:	9100      	str	r1, [sp, #0]
   d4fee:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4ff0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4ff4:	2200      	movs	r2, #0
   d4ff6:	4611      	mov	r1, r2
   d4ff8:	47a0      	blx	r4
}
   d4ffa:	b002      	add	sp, #8
   d4ffc:	bd10      	pop	{r4, pc}

000d4ffe <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4ffe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5002:	461d      	mov	r5, r3
    startWrite();
   d5004:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5006:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d500a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d500c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5010:	4604      	mov	r4, r0
   d5012:	460f      	mov	r7, r1
   d5014:	4616      	mov	r6, r2
    startWrite();
   d5016:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d5018:	6823      	ldr	r3, [r4, #0]
   d501a:	f8cd 8000 	str.w	r8, [sp]
   d501e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5022:	4632      	mov	r2, r6
   d5024:	462b      	mov	r3, r5
   d5026:	4639      	mov	r1, r7
   d5028:	4620      	mov	r0, r4
   d502a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d502c:	6823      	ldr	r3, [r4, #0]
   d502e:	f8cd 8000 	str.w	r8, [sp]
   d5032:	f109 32ff 	add.w	r2, r9, #4294967295
   d5036:	4432      	add	r2, r6
   d5038:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d503c:	4639      	mov	r1, r7
   d503e:	462b      	mov	r3, r5
   d5040:	4620      	mov	r0, r4
   d5042:	b212      	sxth	r2, r2
   d5044:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d5046:	6823      	ldr	r3, [r4, #0]
   d5048:	f8cd 8000 	str.w	r8, [sp]
   d504c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5050:	4632      	mov	r2, r6
   d5052:	464b      	mov	r3, r9
   d5054:	4639      	mov	r1, r7
   d5056:	4620      	mov	r0, r4
   d5058:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d505a:	1e6b      	subs	r3, r5, #1
   d505c:	19d9      	adds	r1, r3, r7
   d505e:	6823      	ldr	r3, [r4, #0]
   d5060:	f8cd 8000 	str.w	r8, [sp]
   d5064:	6a1d      	ldr	r5, [r3, #32]
   d5066:	4620      	mov	r0, r4
   d5068:	464b      	mov	r3, r9
   d506a:	4632      	mov	r2, r6
   d506c:	b209      	sxth	r1, r1
   d506e:	47a8      	blx	r5
    endWrite();
   d5070:	6823      	ldr	r3, [r4, #0]
   d5072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5074:	4620      	mov	r0, r4
}
   d5076:	b002      	add	sp, #8
   d5078:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d507c:	4718      	bx	r3

000d507e <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d507e:	4770      	bx	lr

000d5080 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5084:	4299      	cmp	r1, r3
        uint16_t color) {
   d5086:	4616      	mov	r6, r2
   d5088:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d508c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5090:	6802      	ldr	r2, [r0, #0]
   d5092:	4680      	mov	r8, r0
   d5094:	460d      	mov	r5, r1
   d5096:	461c      	mov	r4, r3
    if(x0 == x1){
   d5098:	d113      	bne.n	d50c2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d509a:	42be      	cmp	r6, r7
   d509c:	bfc8      	it	gt
   d509e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d50a0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d50a4:	bfc4      	itt	gt
   d50a6:	463e      	movgt	r6, r7
   d50a8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d50aa:	1c7b      	adds	r3, r7, #1
   d50ac:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d50ae:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d50b0:	b21b      	sxth	r3, r3
   d50b2:	4632      	mov	r2, r6
   d50b4:	4629      	mov	r1, r5
   d50b6:	4640      	mov	r0, r8
   d50b8:	46a4      	mov	ip, r4
}
   d50ba:	b003      	add	sp, #12
   d50bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d50c0:	4760      	bx	ip
    } else if(y0 == y1){
   d50c2:	42be      	cmp	r6, r7
   d50c4:	d10a      	bne.n	d50dc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d50c6:	4299      	cmp	r1, r3
   d50c8:	bfc2      	ittt	gt
   d50ca:	460b      	movgt	r3, r1
   d50cc:	4625      	movgt	r5, r4
   d50ce:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d50d0:	1c63      	adds	r3, r4, #1
   d50d2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d50d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d50d8:	1b5b      	subs	r3, r3, r5
   d50da:	e7e9      	b.n	d50b0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d50dc:	6953      	ldr	r3, [r2, #20]
   d50de:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d50e0:	e9cd 7900 	strd	r7, r9, [sp]
   d50e4:	f8d8 3000 	ldr.w	r3, [r8]
   d50e8:	4640      	mov	r0, r8
   d50ea:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d50ec:	4632      	mov	r2, r6
   d50ee:	4623      	mov	r3, r4
   d50f0:	4629      	mov	r1, r5
   d50f2:	47b8      	blx	r7
        endWrite();
   d50f4:	f8d8 3000 	ldr.w	r3, [r8]
   d50f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50fa:	4640      	mov	r0, r8
}
   d50fc:	b003      	add	sp, #12
   d50fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5102:	4718      	bx	r3

000d5104 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5104:	f001 0303 	and.w	r3, r1, #3
   d5108:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d510c:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d510e:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5110:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5114:	bf59      	ittee	pl
   d5116:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d5118:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d511a:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d511c:	81c3      	strhmi	r3, [r0, #14]
}
   d511e:	4770      	bx	lr

000d5120 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5120:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5122:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d5124:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d5126:	4a07      	ldr	r2, [pc, #28]	; (d5144 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d5128:	4d07      	ldr	r5, [pc, #28]	; (d5148 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d512a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d512c:	2400      	movs	r4, #0
    _width    = WIDTH;
   d512e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d5130:	f04f 31ff 	mov.w	r1, #4294967295
   d5134:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d5138:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d513a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d513c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d513e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d5140:	6204      	str	r4, [r0, #32]
}
   d5142:	bd30      	pop	{r4, r5, pc}
   d5144:	01000101 	.word	0x01000101
   d5148:	000db588 	.word	0x000db588

000d514c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5150:	b089      	sub	sp, #36	; 0x24
   d5152:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d5156:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5158:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d515c:	9304      	str	r3, [sp, #16]
   d515e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5162:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5164:	9305      	str	r3, [sp, #20]
   d5166:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d516a:	4604      	mov	r4, r0
    startWrite();
   d516c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d516e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d5172:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5176:	bf48      	it	mi
   d5178:	f108 020e 	addmi.w	r2, r8, #14
   d517c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5180:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5182:	4635      	mov	r5, r6
   d5184:	9b03      	ldr	r3, [sp, #12]
   d5186:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5188:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d518c:	189a      	adds	r2, r3, r2
   d518e:	9b05      	ldr	r3, [sp, #20]
   d5190:	428b      	cmp	r3, r1
   d5192:	b212      	sxth	r2, r2
   d5194:	dd27      	ble.n	d51e6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5196:	9b04      	ldr	r3, [sp, #16]
   d5198:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d519a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d519e:	9306      	str	r3, [sp, #24]
   d51a0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d51a4:	4580      	cmp	r8, r0
   d51a6:	fa1f f189 	uxth.w	r1, r9
   d51aa:	dd17      	ble.n	d51dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d51ac:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d51ae:	bf05      	ittet	eq
   d51b0:	9b06      	ldreq	r3, [sp, #24]
   d51b2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d51b4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d51b6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d51b8:	bf18      	it	ne
   d51ba:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d51bc:	062b      	lsls	r3, r5, #24
   d51be:	d50a      	bpl.n	d51d6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d51c0:	9b02      	ldr	r3, [sp, #8]
   d51c2:	6820      	ldr	r0, [r4, #0]
   d51c4:	9207      	str	r2, [sp, #28]
   d51c6:	4419      	add	r1, r3
   d51c8:	6983      	ldr	r3, [r0, #24]
   d51ca:	b209      	sxth	r1, r1
   d51cc:	461f      	mov	r7, r3
   d51ce:	4620      	mov	r0, r4
   d51d0:	4653      	mov	r3, sl
   d51d2:	47b8      	blx	r7
   d51d4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d51d6:	f109 0901 	add.w	r9, r9, #1
   d51da:	e7e1      	b.n	d51a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d51dc:	9b01      	ldr	r3, [sp, #4]
   d51de:	3301      	adds	r3, #1
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	445e      	add	r6, fp
   d51e4:	e7ce      	b.n	d5184 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d51e6:	6823      	ldr	r3, [r4, #0]
   d51e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51ea:	4620      	mov	r0, r4
}
   d51ec:	b009      	add	sp, #36	; 0x24
   d51ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d51f2:	4718      	bx	r3

000d51f4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d51f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51f8:	ed2d 8b02 	vpush	{d8}
   d51fc:	b091      	sub	sp, #68	; 0x44
   d51fe:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5200:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5202:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d5206:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d520a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d520e:	9103      	str	r1, [sp, #12]
   d5210:	461f      	mov	r7, r3
   d5212:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d5216:	9304      	str	r3, [sp, #16]
   d5218:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d521a:	2a00      	cmp	r2, #0
   d521c:	f040 80c5 	bne.w	d53aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5220:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5224:	428b      	cmp	r3, r1
   d5226:	f340 814c 	ble.w	d54c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d522a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d522e:	42b3      	cmp	r3, r6
   d5230:	f340 8147 	ble.w	d54c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5234:	2306      	movs	r3, #6
   d5236:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d523a:	2b00      	cmp	r3, #0
   d523c:	f340 8141 	ble.w	d54c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5240:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5244:	2b00      	cmp	r3, #0
   d5246:	f340 813c 	ble.w	d54c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d524a:	7f03      	ldrb	r3, [r0, #28]
   d524c:	b91b      	cbnz	r3, d5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d524e:	2faf      	cmp	r7, #175	; 0xaf
   d5250:	bf84      	itt	hi
   d5252:	3701      	addhi	r7, #1
   d5254:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d5256:	f8db 3000 	ldr.w	r3, [fp]
   d525a:	4658      	mov	r0, fp
   d525c:	695b      	ldr	r3, [r3, #20]
   d525e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5260:	2205      	movs	r2, #5
   d5262:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5264:	2200      	movs	r2, #0
   d5266:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5268:	4a98      	ldr	r2, [pc, #608]	; (d54cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d526a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d526e:	18d3      	adds	r3, r2, r3
   d5270:	930c      	str	r3, [sp, #48]	; 0x30
   d5272:	b2b3      	uxth	r3, r6
   d5274:	9306      	str	r3, [sp, #24]
   d5276:	9a05      	ldr	r2, [sp, #20]
   d5278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d527a:	5c9b      	ldrb	r3, [r3, r2]
   d527c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d527e:	b2ab      	uxth	r3, r5
   d5280:	930b      	str	r3, [sp, #44]	; 0x2c
   d5282:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5286:	9308      	str	r3, [sp, #32]
   d5288:	9b03      	ldr	r3, [sp, #12]
   d528a:	fb02 f905 	mul.w	r9, r2, r5
   d528e:	fa19 f983 	uxtah	r9, r9, r3
   d5292:	fa0f f389 	sxth.w	r3, r9
   d5296:	ee08 3a10 	vmov	s16, r3
   d529a:	2308      	movs	r3, #8
   d529c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d529e:	9b03      	ldr	r3, [sp, #12]
   d52a0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d52a4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d52a8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d52ac:	9a07      	ldr	r2, [sp, #28]
   d52ae:	f8db 3000 	ldr.w	r3, [fp]
   d52b2:	07d2      	lsls	r2, r2, #31
   d52b4:	d552      	bpl.n	d535c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d52b6:	2d01      	cmp	r5, #1
   d52b8:	fa1f f289 	uxth.w	r2, r9
   d52bc:	d13e      	bne.n	d533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d52be:	2c01      	cmp	r4, #1
   d52c0:	d13c      	bne.n	d533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d52c2:	699b      	ldr	r3, [r3, #24]
   d52c4:	9906      	ldr	r1, [sp, #24]
   d52c6:	461f      	mov	r7, r3
   d52c8:	9b04      	ldr	r3, [sp, #16]
   d52ca:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d52cc:	b212      	sxth	r2, r2
   d52ce:	4651      	mov	r1, sl
   d52d0:	4658      	mov	r0, fp
   d52d2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d52d4:	f109 0301 	add.w	r3, r9, #1
   d52d8:	fa4f f983 	sxtb.w	r9, r3
   d52dc:	9b07      	ldr	r3, [sp, #28]
   d52de:	085b      	lsrs	r3, r3, #1
   d52e0:	9307      	str	r3, [sp, #28]
   d52e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d52e4:	3b01      	subs	r3, #1
   d52e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52ea:	930a      	str	r3, [sp, #40]	; 0x28
   d52ec:	d1de      	bne.n	d52ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d52ee:	9f05      	ldr	r7, [sp, #20]
   d52f0:	3701      	adds	r7, #1
   d52f2:	b27b      	sxtb	r3, r7
   d52f4:	9305      	str	r3, [sp, #20]
   d52f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d52f8:	3b01      	subs	r3, #1
   d52fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52fe:	9309      	str	r3, [sp, #36]	; 0x24
   d5300:	d1b9      	bne.n	d5276 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5302:	9b04      	ldr	r3, [sp, #16]
   d5304:	4543      	cmp	r3, r8
   d5306:	d00f      	beq.n	d5328 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d5308:	2d01      	cmp	r5, #1
   d530a:	f8db 3000 	ldr.w	r3, [fp]
   d530e:	d13b      	bne.n	d5388 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5310:	2c01      	cmp	r4, #1
   d5312:	d139      	bne.n	d5388 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5314:	9908      	ldr	r1, [sp, #32]
   d5316:	f8cd 8000 	str.w	r8, [sp]
   d531a:	3105      	adds	r1, #5
   d531c:	6a1c      	ldr	r4, [r3, #32]
   d531e:	4632      	mov	r2, r6
   d5320:	2308      	movs	r3, #8
   d5322:	b209      	sxth	r1, r1
   d5324:	4658      	mov	r0, fp
   d5326:	47a0      	blx	r4
        endWrite();
   d5328:	f8db 3000 	ldr.w	r3, [fp]
   d532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d532e:	4658      	mov	r0, fp
}
   d5330:	b011      	add	sp, #68	; 0x44
   d5332:	ecbd 8b02 	vpop	{d8}
   d5336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d533a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d533c:	9906      	ldr	r1, [sp, #24]
   d533e:	fb14 f202 	smulbb	r2, r4, r2
   d5342:	440a      	add	r2, r1
   d5344:	9904      	ldr	r1, [sp, #16]
   d5346:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5348:	9400      	str	r4, [sp, #0]
   d534a:	69db      	ldr	r3, [r3, #28]
   d534c:	ee18 1a10 	vmov	r1, s16
   d5350:	461f      	mov	r7, r3
   d5352:	b212      	sxth	r2, r2
   d5354:	462b      	mov	r3, r5
   d5356:	4658      	mov	r0, fp
   d5358:	47b8      	blx	r7
   d535a:	e7bb      	b.n	d52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d535c:	9a04      	ldr	r2, [sp, #16]
   d535e:	4542      	cmp	r2, r8
   d5360:	d0b8      	beq.n	d52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5362:	2d01      	cmp	r5, #1
   d5364:	fa1f f289 	uxth.w	r2, r9
   d5368:	d107      	bne.n	d537a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d536a:	2c01      	cmp	r4, #1
   d536c:	d105      	bne.n	d537a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d536e:	699b      	ldr	r3, [r3, #24]
   d5370:	9906      	ldr	r1, [sp, #24]
   d5372:	461f      	mov	r7, r3
   d5374:	440a      	add	r2, r1
   d5376:	4643      	mov	r3, r8
   d5378:	e7a8      	b.n	d52cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d537a:	9906      	ldr	r1, [sp, #24]
   d537c:	f8cd 8004 	str.w	r8, [sp, #4]
   d5380:	fb14 f202 	smulbb	r2, r4, r2
   d5384:	440a      	add	r2, r1
   d5386:	e7df      	b.n	d5348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d5388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d538a:	f8cd 8004 	str.w	r8, [sp, #4]
   d538e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d5392:	9a08      	ldr	r2, [sp, #32]
   d5394:	00e4      	lsls	r4, r4, #3
   d5396:	440a      	add	r2, r1
   d5398:	4611      	mov	r1, r2
   d539a:	9400      	str	r4, [sp, #0]
   d539c:	69dc      	ldr	r4, [r3, #28]
   d539e:	4632      	mov	r2, r6
   d53a0:	462b      	mov	r3, r5
   d53a2:	b209      	sxth	r1, r1
   d53a4:	4658      	mov	r0, fp
   d53a6:	47a0      	blx	r4
        endWrite();
   d53a8:	e7be      	b.n	d5328 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d53aa:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d53ac:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d53ae:	6812      	ldr	r2, [r2, #0]
   d53b0:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d53b2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d53b4:	b2ff      	uxtb	r7, r7
   d53b6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d53ba:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d53be:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d53c0:	789a      	ldrb	r2, [r3, #2]
   d53c2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d53c4:	78da      	ldrb	r2, [r3, #3]
   d53c6:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d53c8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d53ca:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d53ce:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d53d2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d53d4:	d801      	bhi.n	d53da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d53d6:	2c01      	cmp	r4, #1
   d53d8:	d957      	bls.n	d548a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d53da:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d53de:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d53e0:	fa0f f38a 	sxth.w	r3, sl
   d53e4:	9307      	str	r3, [sp, #28]
        startWrite();
   d53e6:	f8db 3000 	ldr.w	r3, [fp]
   d53ea:	4658      	mov	r0, fp
   d53ec:	695b      	ldr	r3, [r3, #20]
   d53ee:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53f0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d53f2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53f6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53f8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d53fc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d53fe:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5400:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5404:	429f      	cmp	r7, r3
   d5406:	d28f      	bcs.n	d5328 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5408:	9b07      	ldr	r3, [sp, #28]
   d540a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d540c:	443b      	add	r3, r7
   d540e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5412:	2200      	movs	r2, #0
   d5414:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5418:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d541a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d541e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5422:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5426:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d5428:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d542a:	9905      	ldr	r1, [sp, #20]
   d542c:	4291      	cmp	r1, r2
   d542e:	d241      	bcs.n	d54b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5430:	1c5a      	adds	r2, r3, #1
   d5432:	b2d2      	uxtb	r2, r2
   d5434:	075b      	lsls	r3, r3, #29
   d5436:	920c      	str	r2, [sp, #48]	; 0x30
   d5438:	d107      	bne.n	d544a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d543a:	9b06      	ldr	r3, [sp, #24]
   d543c:	9906      	ldr	r1, [sp, #24]
   d543e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5440:	3301      	adds	r3, #1
   d5442:	b29b      	uxth	r3, r3
   d5444:	f812 9001 	ldrb.w	r9, [r2, r1]
   d5448:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d544a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d544e:	d012      	beq.n	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5450:	2d01      	cmp	r5, #1
   d5452:	f8db 3000 	ldr.w	r3, [fp]
   d5456:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d545a:	d11a      	bne.n	d5492 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d545c:	2c01      	cmp	r4, #1
   d545e:	d118      	bne.n	d5492 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5462:	699b      	ldr	r3, [r3, #24]
   d5464:	4411      	add	r1, r2
   d5466:	9a05      	ldr	r2, [sp, #20]
   d5468:	4411      	add	r1, r2
   d546a:	461e      	mov	r6, r3
   d546c:	4652      	mov	r2, sl
   d546e:	9b04      	ldr	r3, [sp, #16]
   d5470:	b209      	sxth	r1, r1
   d5472:	4658      	mov	r0, fp
   d5474:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d5476:	9e05      	ldr	r6, [sp, #20]
   d5478:	3601      	adds	r6, #1
   d547a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d547c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5480:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5482:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d5486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d5488:	e7ce      	b.n	d5428 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d548a:	2300      	movs	r3, #0
   d548c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d5490:	e7a9      	b.n	d53e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5492:	9805      	ldr	r0, [sp, #20]
   d5494:	9a08      	ldr	r2, [sp, #32]
   d5496:	4402      	add	r2, r0
   d5498:	fb02 1105 	mla	r1, r2, r5, r1
   d549c:	9a04      	ldr	r2, [sp, #16]
   d549e:	e9cd 4200 	strd	r4, r2, [sp]
   d54a2:	69db      	ldr	r3, [r3, #28]
   d54a4:	ee18 2a10 	vmov	r2, s16
   d54a8:	461e      	mov	r6, r3
   d54aa:	b209      	sxth	r1, r1
   d54ac:	462b      	mov	r3, r5
   d54ae:	4658      	mov	r0, fp
   d54b0:	47b0      	blx	r6
   d54b2:	e7e0      	b.n	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d54b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d54b6:	3701      	adds	r7, #1
   d54b8:	4498      	add	r8, r3
   d54ba:	fa5f f888 	uxtb.w	r8, r8
   d54be:	b2ff      	uxtb	r7, r7
   d54c0:	e79f      	b.n	d5402 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d54c2:	b011      	add	sp, #68	; 0x44
   d54c4:	ecbd 8b02 	vpop	{d8}
   d54c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d54cc:	000db080 	.word	0x000db080

000d54d0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d54d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d54d2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d54d4:	b085      	sub	sp, #20
   d54d6:	4604      	mov	r4, r0
   d54d8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d54da:	2a00      	cmp	r2, #0
   d54dc:	d134      	bne.n	d5548 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d54de:	290a      	cmp	r1, #10
   d54e0:	d108      	bne.n	d54f4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d54e2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d54e4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d54e6:	7e42      	ldrb	r2, [r0, #25]
   d54e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d54ec:	8263      	strh	r3, [r4, #18]
}
   d54ee:	2001      	movs	r0, #1
   d54f0:	b005      	add	sp, #20
   d54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d54f4:	290d      	cmp	r1, #13
   d54f6:	d0fa      	beq.n	d54ee <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d54f8:	7ee1      	ldrb	r1, [r4, #27]
   d54fa:	7e00      	ldrb	r0, [r0, #24]
   d54fc:	7e65      	ldrb	r5, [r4, #25]
   d54fe:	b171      	cbz	r1, d551e <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5500:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5504:	2106      	movs	r1, #6
   d5506:	fb11 6100 	smlabb	r1, r1, r0, r6
   d550a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d550e:	42b1      	cmp	r1, r6
   d5510:	bfc1      	itttt	gt
   d5512:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5516:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d5518:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d551c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d551e:	8ae2      	ldrh	r2, [r4, #22]
   d5520:	9201      	str	r2, [sp, #4]
   d5522:	8aa2      	ldrh	r2, [r4, #20]
   d5524:	9200      	str	r2, [sp, #0]
   d5526:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d552a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d552e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5532:	4620      	mov	r0, r4
   d5534:	f7ff fe5e 	bl	d51f4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d5538:	7e23      	ldrb	r3, [r4, #24]
   d553a:	8a22      	ldrh	r2, [r4, #16]
   d553c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5540:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5544:	8223      	strh	r3, [r4, #16]
   d5546:	e7d2      	b.n	d54ee <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d5548:	290a      	cmp	r1, #10
   d554a:	d107      	bne.n	d555c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d554c:	2300      	movs	r3, #0
   d554e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5550:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5552:	7e41      	ldrb	r1, [r0, #25]
   d5554:	8a42      	ldrh	r2, [r0, #18]
   d5556:	fb01 2303 	mla	r3, r1, r3, r2
   d555a:	e7c7      	b.n	d54ec <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d555c:	290d      	cmp	r1, #13
   d555e:	d0c6      	beq.n	d54ee <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5560:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5562:	42a9      	cmp	r1, r5
   d5564:	d3c3      	bcc.n	d54ee <_ZN12Adafruit_GFX5writeEh+0x1e>
   d5566:	7a51      	ldrb	r1, [r2, #9]
   d5568:	4299      	cmp	r1, r3
   d556a:	d3c0      	bcc.n	d54ee <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d556c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d556e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d5570:	b2ed      	uxtb	r5, r5
   d5572:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d5576:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d5578:	b32f      	cbz	r7, d55c6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d557a:	78e9      	ldrb	r1, [r5, #3]
   d557c:	b319      	cbz	r1, d55c6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d557e:	7ee1      	ldrb	r1, [r4, #27]
   d5580:	7e00      	ldrb	r0, [r0, #24]
   d5582:	7e66      	ldrb	r6, [r4, #25]
   d5584:	b191      	cbz	r1, d55ac <_ZN12Adafruit_GFX5writeEh+0xdc>
   d5586:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d558a:	4439      	add	r1, r7
   d558c:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d5590:	fb00 7101 	mla	r1, r0, r1, r7
   d5594:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d5598:	42b9      	cmp	r1, r7
   d559a:	dd07      	ble.n	d55ac <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d559c:	2700      	movs	r7, #0
   d559e:	8227      	strh	r7, [r4, #16]
   d55a0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d55a4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d55a6:	fb02 1206 	mla	r2, r2, r6, r1
   d55aa:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d55ac:	8ae2      	ldrh	r2, [r4, #22]
   d55ae:	9201      	str	r2, [sp, #4]
   d55b0:	8aa2      	ldrh	r2, [r4, #20]
   d55b2:	9200      	str	r2, [sp, #0]
   d55b4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d55b8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d55bc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff fe17 	bl	d51f4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d55c6:	7929      	ldrb	r1, [r5, #4]
   d55c8:	7e23      	ldrb	r3, [r4, #24]
   d55ca:	8a22      	ldrh	r2, [r4, #16]
   d55cc:	fb01 2303 	mla	r3, r1, r3, r2
   d55d0:	e7b8      	b.n	d5544 <_ZN12Adafruit_GFX5writeEh+0x74>

000d55d2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d55d2:	2901      	cmp	r1, #1
   d55d4:	bf38      	it	cc
   d55d6:	2101      	movcc	r1, #1
   d55d8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d55da:	7641      	strb	r1, [r0, #25]
}
   d55dc:	4770      	bx	lr
	...

000d55e0 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d55e0:	b510      	push	{r4, lr}
   d55e2:	4b06      	ldr	r3, [pc, #24]	; (d55fc <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d55e4:	6003      	str	r3, [r0, #0]
   d55e6:	4604      	mov	r4, r0
	if (mutex) {
   d55e8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d55ea:	b108      	cbz	r0, d55f0 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d55ec:	f001 f9f0 	bl	d69d0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d55f0:	4620      	mov	r0, r4
   d55f2:	f000 fcdb 	bl	d5fac <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d55f6:	4620      	mov	r0, r4
   d55f8:	bd10      	pop	{r4, pc}
   d55fa:	bf00      	nop
   d55fc:	000db5e0 	.word	0x000db5e0

000d5600 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d5600:	b510      	push	{r4, lr}
   d5602:	4604      	mov	r4, r0
}
   d5604:	f7ff ffec 	bl	d55e0 <_ZN16OledWingAdafruitD1Ev>
   d5608:	4620      	mov	r0, r4
   d560a:	2170      	movs	r1, #112	; 0x70
   d560c:	f002 ff47 	bl	d849e <_ZdlPvj>
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5614:	b530      	push	{r4, r5, lr}
   d5616:	b085      	sub	sp, #20
   d5618:	4604      	mov	r4, r0
   d561a:	460d      	mov	r5, r1
   d561c:	f002 ff12 	bl	d8444 <_Z19__fetch_global_Wirev>
   d5620:	4a10      	ldr	r2, [pc, #64]	; (d5664 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d5622:	4911      	ldr	r1, [pc, #68]	; (d5668 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d5624:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d5628:	f04f 32ff 	mov.w	r2, #4294967295
   d562c:	2180      	movs	r1, #128	; 0x80
   d562e:	4603      	mov	r3, r0
   d5630:	9200      	str	r2, [sp, #0]
   d5632:	4620      	mov	r0, r4
   d5634:	2220      	movs	r2, #32
   d5636:	f000 fd3f 	bl	d60b8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d563a:	4b0c      	ldr	r3, [pc, #48]	; (d566c <_ZN16OledWingAdafruitC1Ei+0x58>)
   d563c:	6023      	str	r3, [r4, #0]
   d563e:	2300      	movs	r3, #0
   d5640:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d5644:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5648:	f000 f854 	bl	d56f4 <_ZN8DebounceC1Ev>
   d564c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5650:	f000 f850 	bl	d56f4 <_ZN8DebounceC1Ev>
   d5654:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5658:	f000 f84c 	bl	d56f4 <_ZN8DebounceC1Ev>
}
   d565c:	4620      	mov	r0, r4
   d565e:	b005      	add	sp, #20
   d5660:	bd30      	pop	{r4, r5, pc}
   d5662:	bf00      	nop
   d5664:	00061a80 	.word	0x00061a80
   d5668:	000186a0 	.word	0x000186a0
   d566c:	000db5e0 	.word	0x000db5e0

000d5670 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d5670:	b513      	push	{r0, r1, r4, lr}
   d5672:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d5674:	3050      	adds	r0, #80	; 0x50
   d5676:	f001 f9a3 	bl	d69c0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d567a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d567c:	07d9      	lsls	r1, r3, #31
   d567e:	d505      	bpl.n	d568c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d5680:	2202      	movs	r2, #2
   d5682:	2104      	movs	r1, #4
   d5684:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5688:	f000 f848 	bl	d571c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d568c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d568e:	079a      	lsls	r2, r3, #30
   d5690:	d505      	bpl.n	d569e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d5692:	2200      	movs	r2, #0
   d5694:	2103      	movs	r1, #3
   d5696:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d569a:	f000 f83f 	bl	d571c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d569e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d56a0:	075b      	lsls	r3, r3, #29
   d56a2:	d505      	bpl.n	d56b0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d56a4:	2202      	movs	r2, #2
   d56a6:	4611      	mov	r1, r2
   d56a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d56ac:	f000 f836 	bl	d571c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d56b0:	2301      	movs	r3, #1
   d56b2:	9300      	str	r3, [sp, #0]
   d56b4:	223c      	movs	r2, #60	; 0x3c
   d56b6:	2102      	movs	r1, #2
   d56b8:	4620      	mov	r0, r4
   d56ba:	f000 fdfd 	bl	d62b8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d56be:	b002      	add	sp, #8
   d56c0:	bd10      	pop	{r4, pc}

000d56c2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d56c2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d56c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d56c6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d56c8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d56ca:	d502      	bpl.n	d56d2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d56cc:	3058      	adds	r0, #88	; 0x58
   d56ce:	f000 f832 	bl	d5736 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d56d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d56d4:	079a      	lsls	r2, r3, #30
   d56d6:	d503      	bpl.n	d56e0 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d56d8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d56dc:	f000 f82b 	bl	d5736 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d56e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d56e2:	075b      	lsls	r3, r3, #29
   d56e4:	d505      	bpl.n	d56f2 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d56e6:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d56ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d56ee:	f000 b822 	b.w	d5736 <_ZN8Debounce6updateEv>
}
   d56f2:	bd10      	pop	{r4, pc}

000d56f4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d56f4:	2100      	movs	r1, #0
   d56f6:	220a      	movs	r2, #10
   d56f8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d56fc:	4770      	bx	lr

000d56fe <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d56fe:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5700:	b510      	push	{r4, lr}
   d5702:	4604      	mov	r4, r0
    this->pin = pin;
   d5704:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5706:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5708:	b288      	uxth	r0, r1
   d570a:	f002 fe33 	bl	d8374 <digitalRead>
   d570e:	b108      	cbz	r0, d5714 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5710:	2303      	movs	r3, #3
   d5712:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5714:	f001 f94c 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5718:	6020      	str	r0, [r4, #0]
#endif
}
   d571a:	bd10      	pop	{r4, pc}

000d571c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d571c:	b538      	push	{r3, r4, r5, lr}
   d571e:	460c      	mov	r4, r1
   d5720:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5722:	4611      	mov	r1, r2
   d5724:	b2a0      	uxth	r0, r4
   d5726:	f002 fdfb 	bl	d8320 <pinMode>
  
  this->attach(pin);
   d572a:	4621      	mov	r1, r4
   d572c:	4628      	mov	r0, r5
}
   d572e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5732:	f7ff bfe4 	b.w	d56fe <_ZN8Debounce6attachEi>

000d5736 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d5736:	b538      	push	{r3, r4, r5, lr}
   d5738:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d573a:	79c0      	ldrb	r0, [r0, #7]
   d573c:	f002 fe1a 	bl	d8374 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d5740:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d5742:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d5744:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d5748:	bf18      	it	ne
   d574a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d574c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d5750:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d5752:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5754:	d00a      	beq.n	d576c <_ZN8Debounce6updateEv+0x36>
   d5756:	f001 f92b 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d575a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d575c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d575e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5762:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d5764:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d5766:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d576a:	bd38      	pop	{r3, r4, r5, pc}
   d576c:	f001 f920 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d5770:	6823      	ldr	r3, [r4, #0]
   d5772:	1ac0      	subs	r0, r0, r3
   d5774:	88a3      	ldrh	r3, [r4, #4]
   d5776:	4298      	cmp	r0, r3
   d5778:	d3f4      	bcc.n	d5764 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d577a:	79a3      	ldrb	r3, [r4, #6]
   d577c:	f003 0301 	and.w	r3, r3, #1
   d5780:	42ab      	cmp	r3, r5
   d5782:	d0ef      	beq.n	d5764 <_ZN8Debounce6updateEv+0x2e>
   d5784:	f001 f914 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d5788:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d578a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d578c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d5790:	f043 0308 	orr.w	r3, r3, #8
   d5794:	e7e5      	b.n	d5762 <_ZN8Debounce6updateEv+0x2c>

000d5796 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d5796:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d579a:	b510      	push	{r4, lr}
   d579c:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d579e:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d57a0:	b113      	cbz	r3, d57a8 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d57a2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d57a4:	f001 f91c 	bl	d69e0 <os_mutex_lock>
#endif
#endif
#endif
        }
   d57a8:	4620      	mov	r0, r4
   d57aa:	bd10      	pop	{r4, pc}

000d57ac <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d57ac:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d57ae:	6803      	ldr	r3, [r0, #0]
   d57b0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d57b4:	4604      	mov	r4, r0
            if (mqtt->thread)
   d57b6:	b112      	cbz	r2, d57be <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d57b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d57ba:	f001 f919 	bl	d69f0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d57be:	4620      	mov	r0, r4
   d57c0:	bd10      	pop	{r4, pc}

000d57c2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d57c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57c4:	461f      	mov	r7, r3
   d57c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d57ca:	4604      	mov	r4, r0
   d57cc:	460d      	mov	r5, r1
   d57ce:	4616      	mov	r6, r2
    if (thread) {
   d57d0:	b12b      	cbz	r3, d57de <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d57d2:	2301      	movs	r3, #1
   d57d4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d57d8:	3058      	adds	r0, #88	; 0x58
   d57da:	f001 f8f1 	bl	d69c0 <os_mutex_create>
    }
    this->callback = callback;
   d57de:	9b08      	ldr	r3, [sp, #32]
   d57e0:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d57e2:	2300      	movs	r3, #0
   d57e4:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d57e6:	b106      	cbz	r6, d57ea <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d57e8:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d57ea:	b125      	cbz	r5, d57f6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d57ec:	4629      	mov	r1, r5
   d57ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d57f2:	f001 fce9 	bl	d71c8 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d57f6:	9b06      	ldr	r3, [sp, #24]
   d57f8:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d57fa:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d57fc:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d57fe:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5802:	2bff      	cmp	r3, #255	; 0xff
   d5804:	bfb8      	it	lt
   d5806:	23ff      	movlt	r3, #255	; 0xff
   d5808:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d580c:	b108      	cbz	r0, d5812 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d580e:	f7fe fc48 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5812:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5816:	f7fe fc40 	bl	d409a <_Znaj>
   d581a:	61e0      	str	r0, [r4, #28]
}
   d581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5820 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d5820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5824:	4604      	mov	r4, r0
            bool thread) {
   d5826:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d5828:	4617      	mov	r7, r2
   d582a:	4698      	mov	r8, r3
   d582c:	460e      	mov	r6, r1
            bool thread) {
   d582e:	f002 fbb9 	bl	d7fa4 <_ZN9TCPClientC1Ev>
   d5832:	490d      	ldr	r1, [pc, #52]	; (d5868 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d5834:	61e5      	str	r5, [r4, #28]
   d5836:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d583a:	f001 fcb1 	bl	d71a0 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d583e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d5842:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5844:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d5848:	22ff      	movs	r2, #255	; 0xff
   d584a:	230f      	movs	r3, #15
   d584c:	e9cd 3200 	strd	r3, r2, [sp]
   d5850:	4620      	mov	r0, r4
            bool thread) {
   d5852:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5856:	463b      	mov	r3, r7
   d5858:	462a      	mov	r2, r5
   d585a:	4631      	mov	r1, r6
   d585c:	f7ff ffb1 	bl	d57c2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d5860:	4620      	mov	r0, r4
   d5862:	b004      	add	sp, #16
   d5864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5868:	000db044 	.word	0x000db044

000d586c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d586c:	b510      	push	{r4, lr}
   d586e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5870:	4620      	mov	r0, r4
   d5872:	f002 faf3 	bl	d7e5c <_ZN9TCPClient9availableEv>
   d5876:	2800      	cmp	r0, #0
   d5878:	d0fa      	beq.n	d5870 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d587a:	4620      	mov	r0, r4
   d587c:	f002 fa27 	bl	d7cce <_ZN9TCPClient4readEv>
}
   d5880:	b2c0      	uxtb	r0, r0
   d5882:	bd10      	pop	{r4, pc}

000d5884 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5888:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d588a:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d588c:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d588e:	f7ff ffed 	bl	d586c <_ZN4MQTT8readByteEv>
   d5892:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5894:	69eb      	ldr	r3, [r5, #28]
   d5896:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d589a:	f04f 0901 	mov.w	r9, #1
   d589e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d58a2:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d58a6:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d58a8:	4628      	mov	r0, r5
   d58aa:	f7ff ffdf 	bl	d586c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d58ae:	4626      	mov	r6, r4
   d58b0:	69eb      	ldr	r3, [r5, #28]
   d58b2:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d58b4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d58b8:	fb13 f309 	smulbb	r3, r3, r9
   d58bc:	4498      	add	r8, r3
        buffer[len++] = digit;
   d58be:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d58c0:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d58c2:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d58c4:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d58c8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d58cc:	d4ec      	bmi.n	d58a8 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d58ce:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d58d0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d58d4:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d58d6:	d124      	bne.n	d5922 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d58d8:	4628      	mov	r0, r5
   d58da:	69ef      	ldr	r7, [r5, #28]
   d58dc:	f7ff ffc6 	bl	d586c <_ZN4MQTT8readByteEv>
   d58e0:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d58e2:	4628      	mov	r0, r5
   d58e4:	69ef      	ldr	r7, [r5, #28]
   d58e6:	1cf4      	adds	r4, r6, #3
   d58e8:	f7ff ffc0 	bl	d586c <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d58ec:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d58ee:	b2b6      	uxth	r6, r6
   d58f0:	b2a4      	uxth	r4, r4
   d58f2:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d58f4:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d58f6:	b2b6      	uxth	r6, r6
   d58f8:	46b1      	mov	r9, r6
   d58fa:	4627      	mov	r7, r4
   d58fc:	45c1      	cmp	r9, r8
   d58fe:	d212      	bcs.n	d5926 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5900:	4628      	mov	r0, r5
   d5902:	f7ff ffb3 	bl	d586c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5906:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d590a:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d590c:	bf88      	it	hi
   d590e:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d5910:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d5914:	bf88      	it	hi
   d5916:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d5918:	3701      	adds	r7, #1
   d591a:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d591c:	fa1f f989 	uxth.w	r9, r9
   d5920:	e7ec      	b.n	d58fc <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d5922:	2600      	movs	r6, #0
   d5924:	e7e7      	b.n	d58f6 <_ZN4MQTT10readPacketEPh+0x72>
   d5926:	eba8 0006 	sub.w	r0, r8, r6
   d592a:	45b0      	cmp	r8, r6
   d592c:	bf2c      	ite	cs
   d592e:	4606      	movcs	r6, r0
   d5930:	2600      	movcc	r6, #0
   d5932:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d5934:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d5938:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d593a:	42a0      	cmp	r0, r4
   d593c:	bf2c      	ite	cs
   d593e:	4620      	movcs	r0, r4
   d5940:	2000      	movcc	r0, #0
   d5942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5946 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5948:	468c      	mov	ip, r1
   d594a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d594c:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d594e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d5950:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d5952:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5954:	a802      	add	r0, sp, #8
        digit = len % 128;
   d5956:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d595a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d595e:	f103 0401 	add.w	r4, r3, #1
   d5962:	4403      	add	r3, r0
            digit |= 0x80;
   d5964:	bf88      	it	hi
   d5966:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d596a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d596e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d5972:	b2e4      	uxtb	r4, r4
   d5974:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d5978:	d810      	bhi.n	d599c <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d597a:	f1c4 0304 	rsb	r3, r4, #4
   d597e:	18d1      	adds	r1, r2, r3
   d5980:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5984:	f1c4 0305 	rsb	r3, r4, #5
   d5988:	4413      	add	r3, r2
   d598a:	a801      	add	r0, sp, #4
   d598c:	3205      	adds	r2, #5
   d598e:	4293      	cmp	r3, r2
   d5990:	d006      	beq.n	d59a0 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d5992:	f810 5b01 	ldrb.w	r5, [r0], #1
   d5996:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d599a:	e7f8      	b.n	d598e <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d599c:	4623      	mov	r3, r4
   d599e:	e7d8      	b.n	d5952 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d59a0:	1c72      	adds	r2, r6, #1
   d59a2:	4422      	add	r2, r4
   d59a4:	4638      	mov	r0, r7
   d59a6:	f002 f8bc 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
   d59aa:	4605      	mov	r5, r0
   d59ac:	f001 f800 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d59b0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d59b2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d59b4:	4432      	add	r2, r6
   d59b6:	b2a8      	uxth	r0, r5
}
   d59b8:	1a13      	subs	r3, r2, r0
   d59ba:	4258      	negs	r0, r3
   d59bc:	4158      	adcs	r0, r3
   d59be:	b003      	add	sp, #12
   d59c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59c2 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d59c2:	b513      	push	{r0, r1, r4, lr}
   d59c4:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d59c6:	4601      	mov	r1, r0
   d59c8:	a801      	add	r0, sp, #4
   d59ca:	f7ff fee4 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d59ce:	69e3      	ldr	r3, [r4, #28]
   d59d0:	22e0      	movs	r2, #224	; 0xe0
   d59d2:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d59d4:	69e3      	ldr	r3, [r4, #28]
   d59d6:	2200      	movs	r2, #0
   d59d8:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d59da:	69e1      	ldr	r1, [r4, #28]
   d59dc:	2202      	movs	r2, #2
   d59de:	4620      	mov	r0, r4
   d59e0:	f002 f89f 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d59e4:	4620      	mov	r0, r4
   d59e6:	f002 fa93 	bl	d7f10 <_ZN9TCPClient4stopEv>
   d59ea:	f000 ffe1 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d59ee:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d59f2:	a801      	add	r0, sp, #4
   d59f4:	f7ff feda 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d59f8:	b002      	add	sp, #8
   d59fa:	bd10      	pop	{r4, pc}

000d59fc <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d59fc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d59fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a00:	4604      	mov	r4, r0
    pos += 2;
   d5a02:	b298      	uxth	r0, r3
   d5a04:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d5a06:	5ccd      	ldrb	r5, [r1, r3]
   d5a08:	b155      	cbz	r5, d5a20 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d5a0a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5a0e:	4286      	cmp	r6, r0
   d5a10:	f103 0701 	add.w	r7, r3, #1
   d5a14:	d904      	bls.n	d5a20 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d5a16:	1c46      	adds	r6, r0, #1
   d5a18:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d5a1a:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d5a1c:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d5a1e:	e7f2      	b.n	d5a06 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5a20:	b299      	uxth	r1, r3
   d5a22:	1a44      	subs	r4, r0, r1
   d5a24:	4422      	add	r2, r4
   d5a26:	1209      	asrs	r1, r1, #8
   d5a28:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5a2c:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d5a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a32 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5a32:	b538      	push	{r3, r4, r5, lr}
   d5a34:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d5a36:	f002 f88a 	bl	d7b4e <_ZN9TCPClient9connectedEv>
   d5a3a:	2800      	cmp	r0, #0
   d5a3c:	bf14      	ite	ne
   d5a3e:	2501      	movne	r5, #1
   d5a40:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d5a42:	d102      	bne.n	d5a4a <_ZN4MQTT11isConnectedEv+0x18>
   d5a44:	4620      	mov	r0, r4
   d5a46:	f002 fa63 	bl	d7f10 <_ZN9TCPClient4stopEv>
    return rc;
}
   d5a4a:	4628      	mov	r0, r5
   d5a4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a54:	b088      	sub	sp, #32
   d5a56:	4604      	mov	r4, r0
   d5a58:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5a5c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d5a60:	4689      	mov	r9, r1
   d5a62:	4617      	mov	r7, r2
   d5a64:	461e      	mov	r6, r3
    if (!isConnected()) {
   d5a66:	f7ff ffe4 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5a6a:	4605      	mov	r5, r0
   d5a6c:	2800      	cmp	r0, #0
   d5a6e:	f040 80cb 	bne.w	d5c08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d5a72:	4621      	mov	r1, r4
   d5a74:	a801      	add	r0, sp, #4
   d5a76:	f7ff fe8e 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d5a7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5a7c:	2900      	cmp	r1, #0
   d5a7e:	f040 8087 	bne.w	d5b90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d5a82:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5a88:	462b      	mov	r3, r5
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f002 fa9e 	bl	d7fcc <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d079      	beq.n	d5b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d5a94:	2301      	movs	r3, #1
   d5a96:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d5a98:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d5a9c:	69e2      	ldr	r2, [r4, #28]
   d5a9e:	2b04      	cmp	r3, #4
   d5aa0:	f040 8081 	bne.w	d5ba6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5aa4:	4b59      	ldr	r3, [pc, #356]	; (d5c0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d5aa6:	6818      	ldr	r0, [r3, #0]
   d5aa8:	8899      	ldrh	r1, [r3, #4]
   d5aaa:	799b      	ldrb	r3, [r3, #6]
   d5aac:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5ab0:	f88d 300e 	strb.w	r3, [sp, #14]
   d5ab4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5ab6:	f8c2 0005 	str.w	r0, [r2, #5]
   d5aba:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5abe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d5ac2:	f8a2 1009 	strh.w	r1, [r2, #9]
   d5ac6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d5ac8:	230c      	movs	r3, #12
            if (willTopic) {
   d5aca:	f1b8 0f00 	cmp.w	r8, #0
   d5ace:	d07f      	beq.n	d5bd0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5ad0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d5ad4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d5ad8:	0140      	lsls	r0, r0, #5
   d5ada:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d5ade:	f040 0006 	orr.w	r0, r0, #6
   d5ae2:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d5ae4:	f1ba 0f00 	cmp.w	sl, #0
   d5ae8:	d101      	bne.n	d5aee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d5aea:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d5aee:	b11f      	cbz	r7, d5af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d5af0:	2e00      	cmp	r6, #0
   d5af2:	d16f      	bne.n	d5bd4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d5af4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d5af8:	69e2      	ldr	r2, [r4, #28]
   d5afa:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5afc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5afe:	69e1      	ldr	r1, [r4, #28]
   d5b00:	1c58      	adds	r0, r3, #1
   d5b02:	1212      	asrs	r2, r2, #8
   d5b04:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5b06:	1c9a      	adds	r2, r3, #2
   d5b08:	69e1      	ldr	r1, [r4, #28]
   d5b0a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5b0c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5b0e:	3303      	adds	r3, #3
   d5b10:	69e2      	ldr	r2, [r4, #28]
   d5b12:	4649      	mov	r1, r9
   d5b14:	4620      	mov	r0, r4
   d5b16:	f7ff ff71 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
   d5b1a:	4603      	mov	r3, r0
            if (willTopic) {
   d5b1c:	f1b8 0f00 	cmp.w	r8, #0
   d5b20:	d00b      	beq.n	d5b3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d5b22:	69e2      	ldr	r2, [r4, #28]
   d5b24:	4641      	mov	r1, r8
   d5b26:	4620      	mov	r0, r4
   d5b28:	f7ff ff68 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5b2c:	69e2      	ldr	r2, [r4, #28]
   d5b2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5b30:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7ff ff62 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
   d5b38:	4603      	mov	r3, r0
            if(user != NULL) {
   d5b3a:	b167      	cbz	r7, d5b56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5b3c:	69e2      	ldr	r2, [r4, #28]
   d5b3e:	4639      	mov	r1, r7
   d5b40:	4620      	mov	r0, r4
   d5b42:	f7ff ff5b 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
   d5b46:	4603      	mov	r3, r0
                if(pass != NULL) {
   d5b48:	b12e      	cbz	r6, d5b56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d5b4a:	69e2      	ldr	r2, [r4, #28]
   d5b4c:	4631      	mov	r1, r6
   d5b4e:	4620      	mov	r0, r4
   d5b50:	f7ff ff54 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
   d5b54:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d5b56:	3b05      	subs	r3, #5
   d5b58:	69e2      	ldr	r2, [r4, #28]
   d5b5a:	b29b      	uxth	r3, r3
   d5b5c:	2110      	movs	r1, #16
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7ff fef1 	bl	d5946 <_ZN4MQTT5writeEhPht>
   d5b64:	f000 ff24 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d5b68:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5b6c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5b70:	4620      	mov	r0, r4
   d5b72:	f002 f973 	bl	d7e5c <_ZN9TCPClient9availableEv>
   d5b76:	bb80      	cbnz	r0, d5bda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d5b78:	f000 ff1a 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5b7e:	1ac0      	subs	r0, r0, r3
   d5b80:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5b82:	4373      	muls	r3, r6
   d5b84:	4298      	cmp	r0, r3
   d5b86:	d9f3      	bls.n	d5b70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d5b88:	4620      	mov	r0, r4
   d5b8a:	f002 f9c1 	bl	d7f10 <_ZN9TCPClient4stopEv>
   d5b8e:	e034      	b.n	d5bfa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d5b90:	a802      	add	r0, sp, #8
   d5b92:	f001 fe4f 	bl	d7834 <_ZN9IPAddressC1EPKh>
   d5b96:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5b9a:	462b      	mov	r3, r5
   d5b9c:	a902      	add	r1, sp, #8
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f002 f8e1 	bl	d7d66 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ba4:	e774      	b.n	d5a90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5ba6:	4b1a      	ldr	r3, [pc, #104]	; (d5c10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d5ba8:	6818      	ldr	r0, [r3, #0]
   d5baa:	6859      	ldr	r1, [r3, #4]
   d5bac:	7a1b      	ldrb	r3, [r3, #8]
   d5bae:	f10d 0c08 	add.w	ip, sp, #8
   d5bb2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d5bb6:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5bba:	ab02      	add	r3, sp, #8
   d5bbc:	cb03      	ldmia	r3!, {r0, r1}
   d5bbe:	f8c2 0005 	str.w	r0, [r2, #5]
   d5bc2:	f8c2 1009 	str.w	r1, [r2, #9]
   d5bc6:	f89c 3000 	ldrb.w	r3, [ip]
   d5bca:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5bcc:	230e      	movs	r3, #14
   d5bce:	e77c      	b.n	d5aca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d5bd0:	2002      	movs	r0, #2
   d5bd2:	e787      	b.n	d5ae4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d5bd4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d5bd8:	e78e      	b.n	d5af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d5bda:	a902      	add	r1, sp, #8
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff fe51 	bl	d5884 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d5be2:	2804      	cmp	r0, #4
   d5be4:	d1d0      	bne.n	d5b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d5be6:	69e3      	ldr	r3, [r4, #28]
   d5be8:	78de      	ldrb	r6, [r3, #3]
   d5bea:	2e00      	cmp	r6, #0
   d5bec:	d1cc      	bne.n	d5b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d5bee:	f000 fedf 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d5bf2:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d5bf4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5bf6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d5bfa:	a801      	add	r0, sp, #4
   d5bfc:	f7ff fdd6 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d5c00:	4628      	mov	r0, r5
   d5c02:	b008      	add	sp, #32
   d5c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d5c08:	2500      	movs	r5, #0
   d5c0a:	e7f9      	b.n	d5c00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5c0c:	000db630 	.word	0x000db630
   d5c10:	000db637 	.word	0x000db637

000d5c14 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d5c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5c16:	2301      	movs	r3, #1
   d5c18:	2204      	movs	r2, #4
   d5c1a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5c1e:	2300      	movs	r3, #0
   d5c20:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d5c24:	e9cd 3300 	strd	r3, r3, [sp]
   d5c28:	461a      	mov	r2, r3
   d5c2a:	f7ff ff11 	bl	d5a50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5c2e:	b007      	add	sp, #28
   d5c30:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c34 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d5c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c36:	4604      	mov	r4, r0
   d5c38:	460e      	mov	r6, r1
    if (isConnected()) {
   d5c3a:	f7ff fefa 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5c3e:	4605      	mov	r5, r0
   d5c40:	b1c8      	cbz	r0, d5c76 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5c42:	4621      	mov	r1, r4
   d5c44:	a801      	add	r0, sp, #4
   d5c46:	f7ff fda6 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5c4a:	69e3      	ldr	r3, [r4, #28]
   d5c4c:	2262      	movs	r2, #98	; 0x62
   d5c4e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5c50:	69e3      	ldr	r3, [r4, #28]
   d5c52:	2202      	movs	r2, #2
   d5c54:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5c56:	69e3      	ldr	r3, [r4, #28]
   d5c58:	1232      	asrs	r2, r6, #8
   d5c5a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5c5c:	69e3      	ldr	r3, [r4, #28]
   d5c5e:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5c60:	69e1      	ldr	r1, [r4, #28]
   d5c62:	2204      	movs	r2, #4
   d5c64:	4620      	mov	r0, r4
   d5c66:	f001 ff5c 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
   d5c6a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d5c6c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d5c6e:	bf18      	it	ne
   d5c70:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5c72:	f7ff fd9b 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d5c76:	4628      	mov	r0, r5
   d5c78:	b002      	add	sp, #8
   d5c7a:	bd70      	pop	{r4, r5, r6, pc}

000d5c7c <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d5c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c7e:	4604      	mov	r4, r0
   d5c80:	460e      	mov	r6, r1
    if (isConnected()) {
   d5c82:	f7ff fed6 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5c86:	4605      	mov	r5, r0
   d5c88:	b1c8      	cbz	r0, d5cbe <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d5c8a:	4621      	mov	r1, r4
   d5c8c:	a801      	add	r0, sp, #4
   d5c8e:	f7ff fd82 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5c92:	69e3      	ldr	r3, [r4, #28]
   d5c94:	2272      	movs	r2, #114	; 0x72
   d5c96:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5c98:	69e3      	ldr	r3, [r4, #28]
   d5c9a:	2202      	movs	r2, #2
   d5c9c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5c9e:	69e3      	ldr	r3, [r4, #28]
   d5ca0:	1232      	asrs	r2, r6, #8
   d5ca2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5ca4:	69e3      	ldr	r3, [r4, #28]
   d5ca6:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5ca8:	69e1      	ldr	r1, [r4, #28]
   d5caa:	2204      	movs	r2, #4
   d5cac:	4620      	mov	r0, r4
   d5cae:	f001 ff38 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
   d5cb2:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d5cb4:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d5cb6:	bf18      	it	ne
   d5cb8:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5cba:	f7ff fd77 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d5cbe:	4628      	mov	r0, r5
   d5cc0:	b002      	add	sp, #8
   d5cc2:	bd70      	pop	{r4, r5, r6, pc}

000d5cc4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d5cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cc8:	ed2d 8b02 	vpush	{d8}
   d5ccc:	b087      	sub	sp, #28
   d5cce:	af00      	add	r7, sp, #0
   d5cd0:	4604      	mov	r4, r0
    if (isConnected()) {
   d5cd2:	f7ff feae 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5cd6:	4681      	mov	r9, r0
   d5cd8:	b1f8      	cbz	r0, d5d1a <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d5cda:	4621      	mov	r1, r4
   d5cdc:	f107 0014 	add.w	r0, r7, #20
   d5ce0:	f7ff fd59 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
   d5ce4:	f000 fe64 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5ce8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cee:	4353      	muls	r3, r2
   d5cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5cf2:	1a82      	subs	r2, r0, r2
   d5cf4:	429a      	cmp	r2, r3
   d5cf6:	4606      	mov	r6, r0
   d5cf8:	d803      	bhi.n	d5d02 <_ZN4MQTT4loopEv+0x3e>
   d5cfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5cfc:	1a82      	subs	r2, r0, r2
   d5cfe:	4293      	cmp	r3, r2
   d5d00:	d221      	bcs.n	d5d46 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d5d02:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5d06:	b17b      	cbz	r3, d5d28 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f002 f901 	bl	d7f10 <_ZN9TCPClient4stopEv>
                return false;
   d5d0e:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d5d12:	f107 0014 	add.w	r0, r7, #20
   d5d16:	f7ff fd49 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d5d1a:	4648      	mov	r0, r9
   d5d1c:	371c      	adds	r7, #28
   d5d1e:	46bd      	mov	sp, r7
   d5d20:	ecbd 8b02 	vpop	{d8}
   d5d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d5d28:	69e2      	ldr	r2, [r4, #28]
   d5d2a:	21c0      	movs	r1, #192	; 0xc0
   d5d2c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5d2e:	69e2      	ldr	r2, [r4, #28]
   d5d30:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5d32:	69e1      	ldr	r1, [r4, #28]
   d5d34:	2202      	movs	r2, #2
   d5d36:	4620      	mov	r0, r4
   d5d38:	f001 fef3 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d5d3c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d5d40:	2301      	movs	r3, #1
   d5d42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d5d46:	4620      	mov	r0, r4
   d5d48:	f002 f888 	bl	d7e5c <_ZN9TCPClient9availableEv>
   d5d4c:	2800      	cmp	r0, #0
   d5d4e:	d0e0      	beq.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d5d50:	f107 0113 	add.w	r1, r7, #19
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff fd95 	bl	d5884 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d5d5a:	4683      	mov	fp, r0
   d5d5c:	2800      	cmp	r0, #0
   d5d5e:	d0d8      	beq.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d5d60:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d5d62:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5d64:	7819      	ldrb	r1, [r3, #0]
   d5d66:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5d6a:	2a30      	cmp	r2, #48	; 0x30
   d5d6c:	d17f      	bne.n	d5e6e <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d5d6e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d5d72:	f1ba 0f00 	cmp.w	sl, #0
   d5d76:	d0cc      	beq.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5d78:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d5d7c:	466a      	mov	r2, sp
   d5d7e:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5d82:	eb03 020c 	add.w	r2, r3, ip
   d5d86:	7855      	ldrb	r5, [r2, #1]
   d5d88:	7891      	ldrb	r1, [r2, #2]
   d5d8a:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d5d8e:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d5d90:	f105 0208 	add.w	r2, r5, #8
   d5d94:	4669      	mov	r1, sp
   d5d96:	08d2      	lsrs	r2, r2, #3
   d5d98:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d5d9c:	4695      	mov	sp, r2
   d5d9e:	f10c 0203 	add.w	r2, ip, #3
   d5da2:	60fa      	str	r2, [r7, #12]
   d5da4:	eb03 0e02 	add.w	lr, r3, r2
   d5da8:	eb0d 0205 	add.w	r2, sp, r5
   d5dac:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d5dae:	f8c7 d008 	str.w	sp, [r7, #8]
   d5db2:	607a      	str	r2, [r7, #4]
   d5db4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d5db8:	428a      	cmp	r2, r1
   d5dba:	d006      	beq.n	d5dca <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d5dbc:	460a      	mov	r2, r1
   d5dbe:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d5dc2:	f802 8b01 	strb.w	r8, [r2], #1
   d5dc6:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d5dc8:	e7f4      	b.n	d5db4 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d5dca:	2200      	movs	r2, #0
   d5dcc:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5dce:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5dd2:	68f9      	ldr	r1, [r7, #12]
   d5dd4:	f008 0806 	and.w	r8, r8, #6
   d5dd8:	ebab 020c 	sub.w	r2, fp, ip
   d5ddc:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5dde:	f1b8 0f02 	cmp.w	r8, #2
   d5de2:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5de6:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5de8:	d125      	bne.n	d5e36 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5dea:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5dee:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d5df0:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5df2:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d5df6:	f10c 0105 	add.w	r1, ip, #5
   d5dfa:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d5dfc:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5dfe:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d5e02:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5e04:	69e3      	ldr	r3, [r4, #28]
   d5e06:	2240      	movs	r2, #64	; 0x40
   d5e08:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5e0a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5e0c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d5e10:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5e14:	69e3      	ldr	r3, [r4, #28]
   d5e16:	ea4f 222b 	mov.w	r2, fp, asr #8
   d5e1a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5e1c:	69e3      	ldr	r3, [r4, #28]
   d5e1e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d5e22:	69e1      	ldr	r1, [r4, #28]
   d5e24:	2204      	movs	r2, #4
   d5e26:	4620      	mov	r0, r4
   d5e28:	f001 fe7b 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d5e2c:	6266      	str	r6, [r4, #36]	; 0x24
   d5e2e:	ee18 3a10 	vmov	r3, s16
   d5e32:	469d      	mov	sp, r3
   d5e34:	e76d      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5e36:	f1b8 0f04 	cmp.w	r8, #4
   d5e3a:	d115      	bne.n	d5e68 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e3c:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5e40:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5e42:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e44:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d5e48:	f10c 0105 	add.w	r1, ip, #5
   d5e4c:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5e4e:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e50:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5e54:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5e56:	69e3      	ldr	r3, [r4, #28]
   d5e58:	2250      	movs	r2, #80	; 0x50
   d5e5a:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d5e5c:	69e3      	ldr	r3, [r4, #28]
   d5e5e:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e60:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d5e64:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d5e66:	e7d5      	b.n	d5e14 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d5e68:	4419      	add	r1, r3
   d5e6a:	47d0      	blx	sl
   d5e6c:	e7df      	b.n	d5e2e <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d5e6e:	2a50      	cmp	r2, #80	; 0x50
   d5e70:	d108      	bne.n	d5e84 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d5e72:	789a      	ldrb	r2, [r3, #2]
   d5e74:	78d9      	ldrb	r1, [r3, #3]
   d5e76:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d5e7a:	b289      	uxth	r1, r1
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	f7ff fed9 	bl	d5c34 <_ZN4MQTT14publishReleaseEt>
   d5e82:	e746      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d5e84:	2a40      	cmp	r2, #64	; 0x40
   d5e86:	d112      	bne.n	d5eae <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d5e88:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d5e8a:	2a00      	cmp	r2, #0
   d5e8c:	f43f af41 	beq.w	d5d12 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d5e90:	f1bb 0f04 	cmp.w	fp, #4
   d5e94:	f47f af3d 	bne.w	d5d12 <_ZN4MQTT4loopEv+0x4e>
   d5e98:	f011 0f06 	tst.w	r1, #6
   d5e9c:	f47f af39 	bne.w	d5d12 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d5ea0:	7899      	ldrb	r1, [r3, #2]
   d5ea2:	78d8      	ldrb	r0, [r3, #3]
   d5ea4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d5ea8:	b280      	uxth	r0, r0
   d5eaa:	4790      	blx	r2
   d5eac:	e731      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d5eae:	2a60      	cmp	r2, #96	; 0x60
   d5eb0:	d108      	bne.n	d5ec4 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d5eb2:	789a      	ldrb	r2, [r3, #2]
   d5eb4:	78d9      	ldrb	r1, [r3, #3]
   d5eb6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d5eba:	b289      	uxth	r1, r1
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	f7ff fedd 	bl	d5c7c <_ZN4MQTT15publishCompleteEt>
   d5ec2:	e726      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d5ec4:	2a70      	cmp	r2, #112	; 0x70
   d5ec6:	d0df      	beq.n	d5e88 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d5ec8:	2a90      	cmp	r2, #144	; 0x90
   d5eca:	f43f af22 	beq.w	d5d12 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d5ece:	2ac0      	cmp	r2, #192	; 0xc0
   d5ed0:	d10a      	bne.n	d5ee8 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d5ed2:	22d0      	movs	r2, #208	; 0xd0
   d5ed4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d5ed6:	69e3      	ldr	r3, [r4, #28]
   d5ed8:	2200      	movs	r2, #0
   d5eda:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5edc:	69e1      	ldr	r1, [r4, #28]
   d5ede:	2202      	movs	r2, #2
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	f001 fe1e 	bl	d7b22 <_ZN9TCPClient5writeEPKhj>
   d5ee6:	e714      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d5ee8:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d5eea:	bf04      	itt	eq
   d5eec:	2300      	moveq	r3, #0
   d5eee:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d5ef2:	e70e      	b.n	d5d12 <_ZN4MQTT4loopEv+0x4e>

000d5ef4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	460f      	mov	r7, r1
   d5efa:	4616      	mov	r6, r2
    if (isConnected()) {
   d5efc:	f7ff fd99 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5f00:	4605      	mov	r5, r0
   d5f02:	b310      	cbz	r0, d5f4a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d5f04:	4621      	mov	r1, r4
   d5f06:	a801      	add	r0, sp, #4
   d5f08:	f7ff fc45 	bl	d5796 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d5f0c:	8c23      	ldrh	r3, [r4, #32]
   d5f0e:	3301      	adds	r3, #1
   d5f10:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5f12:	b1eb      	cbz	r3, d5f50 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d5f14:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d5f16:	8c23      	ldrh	r3, [r4, #32]
   d5f18:	69e2      	ldr	r2, [r4, #28]
   d5f1a:	121b      	asrs	r3, r3, #8
   d5f1c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5f1e:	69e3      	ldr	r3, [r4, #28]
   d5f20:	8c22      	ldrh	r2, [r4, #32]
   d5f22:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5f24:	69e2      	ldr	r2, [r4, #28]
   d5f26:	2307      	movs	r3, #7
   d5f28:	4639      	mov	r1, r7
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	f7ff fd66 	bl	d59fc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5f30:	69e3      	ldr	r3, [r4, #28]
   d5f32:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5f34:	3804      	subs	r0, #4
   d5f36:	b283      	uxth	r3, r0
   d5f38:	69e2      	ldr	r2, [r4, #28]
   d5f3a:	2182      	movs	r1, #130	; 0x82
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	f7ff fd02 	bl	d5946 <_ZN4MQTT5writeEhPht>
   d5f42:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d5f44:	a801      	add	r0, sp, #4
   d5f46:	f7ff fc31 	bl	d57ac <_ZN4MQTT11MutexLockerD1Ev>
}
   d5f4a:	4628      	mov	r0, r5
   d5f4c:	b003      	add	sp, #12
   d5f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5f50:	2301      	movs	r3, #1
   d5f52:	e7df      	b.n	d5f14 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d5f54 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d5f54:	2200      	movs	r2, #0
   d5f56:	f7ff bfcd 	b.w	d5ef4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000d5f5c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5f5c:	b538      	push	{r3, r4, r5, lr}
   d5f5e:	4605      	mov	r5, r0
    if (isConnected()) {
   d5f60:	f7ff fd67 	bl	d5a32 <_ZN4MQTT11isConnectedEv>
   d5f64:	b110      	cbz	r0, d5f6c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5f66:	4628      	mov	r0, r5
   d5f68:	f7ff fd2b 	bl	d59c2 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5f6c:	69e8      	ldr	r0, [r5, #28]
   d5f6e:	b108      	cbz	r0, d5f74 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5f70:	f7fe f897 	bl	d40a2 <_ZdaPv>
MQTT::~MQTT() {
   d5f74:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d5f78:	f001 f8c7 	bl	d710a <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d5f7c:	69ac      	ldr	r4, [r5, #24]
   d5f7e:	4b0a      	ldr	r3, [pc, #40]	; (d5fa8 <_ZN4MQTTD1Ev+0x4c>)
   d5f80:	602b      	str	r3, [r5, #0]
   d5f82:	b17c      	cbz	r4, d5fa4 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5f84:	6863      	ldr	r3, [r4, #4]
   d5f86:	3b01      	subs	r3, #1
   d5f88:	6063      	str	r3, [r4, #4]
   d5f8a:	b95b      	cbnz	r3, d5fa4 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d5f8c:	6823      	ldr	r3, [r4, #0]
   d5f8e:	4620      	mov	r0, r4
   d5f90:	689b      	ldr	r3, [r3, #8]
   d5f92:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f94:	68a3      	ldr	r3, [r4, #8]
   d5f96:	3b01      	subs	r3, #1
   d5f98:	60a3      	str	r3, [r4, #8]
   d5f9a:	b91b      	cbnz	r3, d5fa4 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d5f9c:	6823      	ldr	r3, [r4, #0]
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	68db      	ldr	r3, [r3, #12]
   d5fa2:	4798      	blx	r3
}
   d5fa4:	4628      	mov	r0, r5
   d5fa6:	bd38      	pop	{r3, r4, r5, pc}
   d5fa8:	000dc0d4 	.word	0x000dc0d4

000d5fac <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5fac:	b510      	push	{r4, lr}
   d5fae:	4b04      	ldr	r3, [pc, #16]	; (d5fc0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5fb0:	6003      	str	r3, [r0, #0]
   d5fb2:	4604      	mov	r4, r0
  if(buffer) {
   d5fb4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5fb6:	b108      	cbz	r0, d5fbc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5fb8:	f000 ff46 	bl	d6e48 <free>
    buffer = NULL;
  }
}
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	bd10      	pop	{r4, pc}
   d5fc0:	000dbafc 	.word	0x000dbafc

000d5fc4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5fc4:	b510      	push	{r4, lr}
   d5fc6:	4604      	mov	r4, r0
}
   d5fc8:	f7ff fff0 	bl	d5fac <_ZN16Adafruit_SSD1306D1Ev>
   d5fcc:	4620      	mov	r0, r4
   d5fce:	2150      	movs	r1, #80	; 0x50
   d5fd0:	f002 fa65 	bl	d849e <_ZdlPvj>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	bd10      	pop	{r4, pc}

000d5fd8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5fd8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5fda:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5fdc:	db4b      	blt.n	d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5fde:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5fe2:	428c      	cmp	r4, r1
   d5fe4:	dd47      	ble.n	d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5fe6:	2a00      	cmp	r2, #0
   d5fe8:	db45      	blt.n	d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5fea:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d5fee:	4294      	cmp	r4, r2
   d5ff0:	dd41      	ble.n	d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5ff2:	7e84      	ldrb	r4, [r0, #26]
   d5ff4:	2c02      	cmp	r4, #2
   d5ff6:	d01f      	beq.n	d6038 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5ff8:	2c03      	cmp	r4, #3
   d5ffa:	d026      	beq.n	d604a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d5ffc:	2c01      	cmp	r4, #1
   d5ffe:	d104      	bne.n	d600a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d6000:	8904      	ldrh	r4, [r0, #8]
   d6002:	43d2      	mvns	r2, r2
   d6004:	4414      	add	r4, r2
      break;
   d6006:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6008:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d600a:	2b01      	cmp	r3, #1
   d600c:	d023      	beq.n	d6056 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d600e:	2b02      	cmp	r3, #2
   d6010:	d032      	beq.n	d6078 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d6012:	bb83      	cbnz	r3, d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d6014:	2a00      	cmp	r2, #0
   d6016:	4613      	mov	r3, r2
   d6018:	8904      	ldrh	r4, [r0, #8]
   d601a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d601c:	bfb8      	it	lt
   d601e:	1dd3      	addlt	r3, r2, #7
   d6020:	10db      	asrs	r3, r3, #3
   d6022:	fb13 1104 	smlabb	r1, r3, r4, r1
   d6026:	f002 0207 	and.w	r2, r2, #7
   d602a:	2301      	movs	r3, #1
   d602c:	4093      	lsls	r3, r2
   d602e:	5c42      	ldrb	r2, [r0, r1]
   d6030:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d6034:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d6036:	e01e      	b.n	d6076 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d6038:	8904      	ldrh	r4, [r0, #8]
   d603a:	43c9      	mvns	r1, r1
   d603c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d603e:	8944      	ldrh	r4, [r0, #10]
   d6040:	43d2      	mvns	r2, r2
   d6042:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d6044:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6046:	b212      	sxth	r2, r2
      break;
   d6048:	e7df      	b.n	d600a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d604a:	8944      	ldrh	r4, [r0, #10]
   d604c:	43c9      	mvns	r1, r1
   d604e:	440c      	add	r4, r1
      break;
   d6050:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d6052:	b222      	sxth	r2, r4
      break;
   d6054:	e7d9      	b.n	d600a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d6056:	2a00      	cmp	r2, #0
   d6058:	8904      	ldrh	r4, [r0, #8]
   d605a:	4613      	mov	r3, r2
   d605c:	bfb8      	it	lt
   d605e:	1dd3      	addlt	r3, r2, #7
   d6060:	10db      	asrs	r3, r3, #3
   d6062:	fb13 1104 	smlabb	r1, r3, r4, r1
   d6066:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6068:	f002 0007 	and.w	r0, r2, #7
   d606c:	2201      	movs	r2, #1
   d606e:	4082      	lsls	r2, r0
   d6070:	5c58      	ldrb	r0, [r3, r1]
   d6072:	4302      	orrs	r2, r0
   d6074:	545a      	strb	r2, [r3, r1]
}
   d6076:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d6078:	2a00      	cmp	r2, #0
   d607a:	4613      	mov	r3, r2
   d607c:	8904      	ldrh	r4, [r0, #8]
   d607e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6080:	bfb8      	it	lt
   d6082:	1dd3      	addlt	r3, r2, #7
   d6084:	10db      	asrs	r3, r3, #3
   d6086:	fb13 1104 	smlabb	r1, r3, r4, r1
   d608a:	f002 0207 	and.w	r2, r2, #7
   d608e:	2301      	movs	r3, #1
   d6090:	fa03 f202 	lsl.w	r2, r3, r2
   d6094:	5c43      	ldrb	r3, [r0, r1]
   d6096:	405a      	eors	r2, r3
   d6098:	e7cc      	b.n	d6034 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d609a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d609a:	b510      	push	{r4, lr}
   d609c:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d609e:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d60a2:	2101      	movs	r1, #1
   d60a4:	b280      	uxth	r0, r0
   d60a6:	f002 f94c 	bl	d8342 <digitalWrite>
   d60aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d60ac:	b118      	cbz	r0, d60b6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d60ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d60b2:	f000 bf60 	b.w	d6f76 <_ZN8SPIClass14endTransactionEv>
}
   d60b6:	bd10      	pop	{r4, pc}

000d60b8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d60b8:	b570      	push	{r4, r5, r6, lr}
   d60ba:	4604      	mov	r4, r0
   d60bc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d60be:	2600      	movs	r6, #0
   d60c0:	f7ff f82e 	bl	d5120 <_ZN12Adafruit_GFXC1Ess>
   d60c4:	4b11      	ldr	r3, [pc, #68]	; (d610c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d60c6:	6023      	str	r3, [r4, #0]
   d60c8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d60ca:	b915      	cbnz	r5, d60d2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d60cc:	f002 f9ba 	bl	d8444 <_Z19__fetch_global_Wirev>
   d60d0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d60d2:	23ff      	movs	r3, #255	; 0xff
   d60d4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d60d8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d60dc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d60e0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d60e4:	4b0a      	ldr	r3, [pc, #40]	; (d6110 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d60e6:	63a3      	str	r3, [r4, #56]	; 0x38
   d60e8:	2301      	movs	r3, #1
   d60ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d60ee:	9b05      	ldr	r3, [sp, #20]
   d60f0:	64a3      	str	r3, [r4, #72]	; 0x48
   d60f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d60f6:	9b06      	ldr	r3, [sp, #24]
   d60f8:	86a2      	strh	r2, [r4, #52]	; 0x34
   d60fa:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d60fe:	6426      	str	r6, [r4, #64]	; 0x40
   d6100:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d6104:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d6106:	4620      	mov	r0, r4
   d6108:	bd70      	pop	{r4, r5, r6, pc}
   d610a:	bf00      	nop
   d610c:	000dbafc 	.word	0x000dbafc
   d6110:	000db648 	.word	0x000db648

000d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d6114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6116:	4604      	mov	r4, r0
  if(wire) { // I2C
   d6118:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d611a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d611c:	b190      	cbz	r0, d6144 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d611e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6122:	f001 fce7 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d6126:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6128:	6803      	ldr	r3, [r0, #0]
   d612a:	2100      	movs	r1, #0
   d612c:	689b      	ldr	r3, [r3, #8]
   d612e:	4798      	blx	r3
    WIRE_WRITE(c);
   d6130:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6132:	6803      	ldr	r3, [r0, #0]
   d6134:	4629      	mov	r1, r5
   d6136:	689b      	ldr	r3, [r3, #8]
   d6138:	4798      	blx	r3
    wire->endTransmission();
   d613a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d613c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d6140:	f001 bcdf 	b.w	d7b02 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d6144:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d6148:	4601      	mov	r1, r0
   d614a:	b298      	uxth	r0, r3
   d614c:	f002 f8f9 	bl	d8342 <digitalWrite>
  if(spi) {
   d6150:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6152:	b120      	cbz	r0, d615e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d6154:	4629      	mov	r1, r5
}
   d6156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d615a:	f000 bf93 	b.w	d7084 <_ZN8SPIClass8transferEh>
   d615e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6160:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6162:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6166:	ea05 0107 	and.w	r1, r5, r7
   d616a:	b280      	uxth	r0, r0
   d616c:	f002 f8e9 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6170:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6174:	2101      	movs	r1, #1
   d6176:	b280      	uxth	r0, r0
   d6178:	f002 f8e3 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d617c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6180:	2100      	movs	r1, #0
   d6182:	b280      	uxth	r0, r0
   d6184:	f002 f8dd 	bl	d8342 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6188:	3e01      	subs	r6, #1
   d618a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d618e:	d1e8      	bne.n	d6162 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d6190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6192 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6192:	b538      	push	{r3, r4, r5, lr}
   d6194:	4604      	mov	r4, r0
  TRANSACTION_START
   d6196:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6198:	460d      	mov	r5, r1
  TRANSACTION_START
   d619a:	b180      	cbz	r0, d61be <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d619c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d619e:	f001 fc9b 	bl	d7ad8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d61a2:	2d00      	cmp	r5, #0
   d61a4:	4620      	mov	r0, r4
   d61a6:	bf14      	ite	ne
   d61a8:	21a7      	movne	r1, #167	; 0xa7
   d61aa:	21a6      	moveq	r1, #166	; 0xa6
   d61ac:	f7ff ffb2 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d61b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d61b2:	b188      	cbz	r0, d61d8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d61b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d61b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d61ba:	f001 bc8d 	b.w	d7ad8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d61be:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d61c0:	b118      	cbz	r0, d61ca <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d61c2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d61c6:	f000 feef 	bl	d6fa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d61ca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d61ce:	2100      	movs	r1, #0
   d61d0:	b280      	uxth	r0, r0
   d61d2:	f002 f8b6 	bl	d8342 <digitalWrite>
   d61d6:	e7e4      	b.n	d61a2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d61d8:	4620      	mov	r0, r4
}
   d61da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d61de:	f7ff bf5c 	b.w	d609a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d61e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d61e6:	4604      	mov	r4, r0
  if(wire) { // I2C
   d61e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d61ea:	460d      	mov	r5, r1
  if(wire) { // I2C
   d61ec:	188f      	adds	r7, r1, r2
   d61ee:	b340      	cbz	r0, d6242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d61f0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d61f4:	f001 fc7e 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d61f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d61fa:	6803      	ldr	r3, [r0, #0]
   d61fc:	2100      	movs	r1, #0
   d61fe:	689b      	ldr	r3, [r3, #8]
   d6200:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d6202:	2601      	movs	r6, #1
    while(n--) {
   d6204:	42bd      	cmp	r5, r7
   d6206:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6208:	d017      	beq.n	d623a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d620a:	2e1f      	cmp	r6, #31
   d620c:	d90c      	bls.n	d6228 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d620e:	f001 fc78 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d6212:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6216:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6218:	f001 fc6c 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d621c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d621e:	6803      	ldr	r3, [r0, #0]
   d6220:	2100      	movs	r1, #0
   d6222:	689b      	ldr	r3, [r3, #8]
   d6224:	4798      	blx	r3
        bytesOut = 1;
   d6226:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d6228:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d622a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d622e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d6230:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d6232:	689b      	ldr	r3, [r3, #8]
   d6234:	4798      	blx	r3
      bytesOut++;
   d6236:	b2f6      	uxtb	r6, r6
    while(n--) {
   d6238:	e7e4      	b.n	d6204 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d623a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d623e:	f001 bc60 	b.w	d7b02 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d6242:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d6246:	4601      	mov	r1, r0
   d6248:	b298      	uxth	r0, r3
   d624a:	f002 f87a 	bl	d8342 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d624e:	42af      	cmp	r7, r5
   d6250:	d022      	beq.n	d6298 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d6252:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d6254:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d6258:	b118      	cbz	r0, d6262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d625a:	4649      	mov	r1, r9
   d625c:	f000 ff12 	bl	d7084 <_ZN8SPIClass8transferEh>
   d6260:	e7f5      	b.n	d624e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d6262:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6264:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6268:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d626c:	ea09 0108 	and.w	r1, r9, r8
   d6270:	b280      	uxth	r0, r0
   d6272:	f002 f866 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6276:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d627a:	2101      	movs	r1, #1
   d627c:	b280      	uxth	r0, r0
   d627e:	f002 f860 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6282:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6286:	2100      	movs	r1, #0
   d6288:	b280      	uxth	r0, r0
   d628a:	f002 f85a 	bl	d8342 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d628e:	3e01      	subs	r6, #1
   d6290:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6294:	d1e8      	bne.n	d6268 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d6296:	e7da      	b.n	d624e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d6298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d629c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d629c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d62a0:	1dda      	adds	r2, r3, #7
   d62a2:	bf48      	it	mi
   d62a4:	f103 020e 	addmi.w	r2, r3, #14
   d62a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d62ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d62ae:	10d2      	asrs	r2, r2, #3
   d62b0:	435a      	muls	r2, r3
   d62b2:	2100      	movs	r1, #0
   d62b4:	f002 bf54 	b.w	d9160 <memset>

000d62b8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d62b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d62bc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d62be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d62c0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d62c4:	4604      	mov	r4, r0
   d62c6:	460f      	mov	r7, r1
   d62c8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d62ca:	b1b3      	cbz	r3, d62fa <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d62cc:	4620      	mov	r0, r4
   d62ce:	f7ff ffe5 	bl	d629c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d62d2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d62d6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d62da:	2820      	cmp	r0, #32
   d62dc:	dc1f      	bgt.n	d631e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d62de:	2320      	movs	r3, #32
   d62e0:	2201      	movs	r2, #1
   d62e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d62e6:	3820      	subs	r0, #32
   d62e8:	2373      	movs	r3, #115	; 0x73
   d62ea:	3973      	subs	r1, #115	; 0x73
   d62ec:	9300      	str	r3, [sp, #0]
   d62ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d62f2:	4b89      	ldr	r3, [pc, #548]	; (d6518 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d62f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d62f8:	e01f      	b.n	d633a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d62fa:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d62fe:	1dd8      	adds	r0, r3, #7
   d6300:	bf48      	it	mi
   d6302:	f103 000e 	addmi.w	r0, r3, #14
   d6306:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d630a:	10c0      	asrs	r0, r0, #3
   d630c:	4358      	muls	r0, r3
   d630e:	f000 fd93 	bl	d6e38 <malloc>
   d6312:	62e0      	str	r0, [r4, #44]	; 0x2c
   d6314:	2800      	cmp	r0, #0
   d6316:	d1d9      	bne.n	d62cc <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d6318:	b004      	add	sp, #16
   d631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d631e:	2340      	movs	r3, #64	; 0x40
   d6320:	f04f 0c01 	mov.w	ip, #1
   d6324:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d6328:	2352      	movs	r3, #82	; 0x52
   d632a:	3840      	subs	r0, #64	; 0x40
   d632c:	3952      	subs	r1, #82	; 0x52
   d632e:	9300      	str	r3, [sp, #0]
   d6330:	4b7a      	ldr	r3, [pc, #488]	; (d651c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d6332:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d6336:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d633a:	f340 024f 	sbfx	r2, r0, #1, #16
   d633e:	f341 014f 	sbfx	r1, r1, #1, #16
   d6342:	4620      	mov	r0, r4
   d6344:	f7fe ff02 	bl	d514c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d6348:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d634a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d634e:	2800      	cmp	r0, #0
   d6350:	d078      	beq.n	d6444 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d6352:	2d00      	cmp	r5, #0
   d6354:	d174      	bne.n	d6440 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d6356:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d635a:	2b20      	cmp	r3, #32
   d635c:	bf0c      	ite	eq
   d635e:	253c      	moveq	r5, #60	; 0x3c
   d6360:	253d      	movne	r5, #61	; 0x3d
   d6362:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d6366:	f1b8 0f00 	cmp.w	r8, #0
   d636a:	d001      	beq.n	d6370 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d636c:	f001 fbb8 	bl	d7ae0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d6370:	b1fe      	cbz	r6, d63b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d6372:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6376:	2800      	cmp	r0, #0
   d6378:	db1b      	blt.n	d63b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d637a:	2101      	movs	r1, #1
   d637c:	b280      	uxth	r0, r0
   d637e:	f001 ffcf 	bl	d8320 <pinMode>
    digitalWrite(rstPin, HIGH);
   d6382:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6386:	2101      	movs	r1, #1
   d6388:	b280      	uxth	r0, r0
   d638a:	f001 ffda 	bl	d8342 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d638e:	2001      	movs	r0, #1
   d6390:	f001 f91c 	bl	d75cc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d6394:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6398:	2100      	movs	r1, #0
   d639a:	b280      	uxth	r0, r0
   d639c:	f001 ffd1 	bl	d8342 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d63a0:	200a      	movs	r0, #10
   d63a2:	f001 f913 	bl	d75cc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d63a6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d63aa:	2101      	movs	r1, #1
   d63ac:	b280      	uxth	r0, r0
   d63ae:	f001 ffc8 	bl	d8342 <digitalWrite>
  TRANSACTION_START
   d63b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d63b4:	2800      	cmp	r0, #0
   d63b6:	d074      	beq.n	d64a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d63b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d63ba:	f001 fb8d 	bl	d7ad8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d63be:	2204      	movs	r2, #4
   d63c0:	4957      	ldr	r1, [pc, #348]	; (d6520 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d63c2:	4620      	mov	r0, r4
   d63c4:	f7ff ff0d 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d63c8:	7aa1      	ldrb	r1, [r4, #10]
   d63ca:	3901      	subs	r1, #1
   d63cc:	b2c9      	uxtb	r1, r1
   d63ce:	4620      	mov	r0, r4
   d63d0:	f7ff fea0 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d63d4:	4953      	ldr	r1, [pc, #332]	; (d6524 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d63d6:	2204      	movs	r2, #4
   d63d8:	4620      	mov	r0, r4
   d63da:	f7ff ff02 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d63de:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d63e2:	2b01      	cmp	r3, #1
   d63e4:	bf0c      	ite	eq
   d63e6:	2110      	moveq	r1, #16
   d63e8:	2114      	movne	r1, #20
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7ff fe92 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d63f0:	2204      	movs	r2, #4
   d63f2:	494d      	ldr	r1, [pc, #308]	; (d6528 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d63f4:	4620      	mov	r0, r4
   d63f6:	f7ff fef4 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d63fa:	68a3      	ldr	r3, [r4, #8]
   d63fc:	4a4b      	ldr	r2, [pc, #300]	; (d652c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d63fe:	4293      	cmp	r3, r2
   d6400:	d15c      	bne.n	d64bc <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d6402:	494b      	ldr	r1, [pc, #300]	; (d6530 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d6404:	2204      	movs	r2, #4
   d6406:	4620      	mov	r0, r4
   d6408:	f7ff feeb 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d640c:	21d9      	movs	r1, #217	; 0xd9
   d640e:	4620      	mov	r0, r4
   d6410:	f7ff fe80 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d6414:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6418:	2b01      	cmp	r3, #1
   d641a:	bf0c      	ite	eq
   d641c:	2122      	moveq	r1, #34	; 0x22
   d641e:	21f1      	movne	r1, #241	; 0xf1
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff fe77 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d6426:	4620      	mov	r0, r4
   d6428:	4942      	ldr	r1, [pc, #264]	; (d6534 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d642a:	2206      	movs	r2, #6
   d642c:	f7ff fed9 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d6430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6432:	2800      	cmp	r0, #0
   d6434:	d063      	beq.n	d64fe <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d6436:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d6438:	f001 fb4e 	bl	d7ad8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d643c:	2001      	movs	r0, #1
   d643e:	e76b      	b.n	d6318 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d6440:	b26d      	sxtb	r5, r5
   d6442:	e78e      	b.n	d6362 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d6444:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d6448:	2101      	movs	r1, #1
   d644a:	b280      	uxth	r0, r0
   d644c:	f001 ff68 	bl	d8320 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d6450:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6454:	2101      	movs	r1, #1
   d6456:	b280      	uxth	r0, r0
   d6458:	f001 ff62 	bl	d8320 <pinMode>
    SSD1306_DESELECT
   d645c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6460:	2101      	movs	r1, #1
   d6462:	b280      	uxth	r0, r0
   d6464:	f001 ff6d 	bl	d8342 <digitalWrite>
    if(spi) { // Hardware SPI
   d6468:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d646a:	b13d      	cbz	r5, d647c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d646c:	f1b8 0f00 	cmp.w	r8, #0
   d6470:	f43f af7e 	beq.w	d6370 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d6474:	4628      	mov	r0, r5
   d6476:	f000 fd6d 	bl	d6f54 <_ZN8SPIClass5beginEv>
   d647a:	e779      	b.n	d6370 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d647c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6480:	2101      	movs	r1, #1
   d6482:	b280      	uxth	r0, r0
   d6484:	f001 ff4c 	bl	d8320 <pinMode>
      pinMode(clkPin , OUTPUT);
   d6488:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d648c:	2101      	movs	r1, #1
   d648e:	b280      	uxth	r0, r0
   d6490:	f001 ff46 	bl	d8320 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d6494:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6498:	4629      	mov	r1, r5
   d649a:	b280      	uxth	r0, r0
   d649c:	f001 ff51 	bl	d8342 <digitalWrite>
   d64a0:	e766      	b.n	d6370 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d64a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d64a4:	b118      	cbz	r0, d64ae <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d64a6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d64aa:	f000 fd7d 	bl	d6fa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d64ae:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d64b2:	2100      	movs	r1, #0
   d64b4:	b280      	uxth	r0, r0
   d64b6:	f001 ff44 	bl	d8342 <digitalWrite>
   d64ba:	e780      	b.n	d63be <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d64bc:	4a1e      	ldr	r2, [pc, #120]	; (d6538 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d64be:	4293      	cmp	r3, r2
   d64c0:	d10e      	bne.n	d64e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d64c2:	491e      	ldr	r1, [pc, #120]	; (d653c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d64c4:	2203      	movs	r2, #3
   d64c6:	4620      	mov	r0, r4
   d64c8:	f7ff fe8b 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d64cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d64d0:	2b01      	cmp	r3, #1
   d64d2:	bf0c      	ite	eq
   d64d4:	219f      	moveq	r1, #159	; 0x9f
   d64d6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d64d8:	4620      	mov	r0, r4
   d64da:	f7ff fe1b 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d64de:	e795      	b.n	d640c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d64e0:	4a17      	ldr	r2, [pc, #92]	; (d6540 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d64e2:	4293      	cmp	r3, r2
   d64e4:	d192      	bne.n	d640c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d64e6:	4917      	ldr	r1, [pc, #92]	; (d6544 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d64e8:	2203      	movs	r2, #3
   d64ea:	4620      	mov	r0, r4
   d64ec:	f7ff fe79 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d64f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d64f4:	2b01      	cmp	r3, #1
   d64f6:	bf0c      	ite	eq
   d64f8:	2110      	moveq	r1, #16
   d64fa:	21af      	movne	r1, #175	; 0xaf
   d64fc:	e7ec      	b.n	d64d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d64fe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6502:	2101      	movs	r1, #1
   d6504:	b280      	uxth	r0, r0
   d6506:	f001 ff1c 	bl	d8342 <digitalWrite>
   d650a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d650c:	2800      	cmp	r0, #0
   d650e:	d095      	beq.n	d643c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d6510:	f000 fd31 	bl	d6f76 <_ZN8SPIClass14endTransactionEv>
   d6514:	e792      	b.n	d643c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d6516:	bf00      	nop
   d6518:	000db914 	.word	0x000db914
   d651c:	000db654 	.word	0x000db654
   d6520:	000dbb5c 	.word	0x000dbb5c
   d6524:	000dbb60 	.word	0x000dbb60
   d6528:	000dbb64 	.word	0x000dbb64
   d652c:	00200080 	.word	0x00200080
   d6530:	000dbb6e 	.word	0x000dbb6e
   d6534:	000dbb68 	.word	0x000dbb68
   d6538:	00400080 	.word	0x00400080
   d653c:	000dbb72 	.word	0x000dbb72
   d6540:	00100060 	.word	0x00100060
   d6544:	000dbb75 	.word	0x000dbb75

000d6548 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6548:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d654a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d654c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d6550:	db3d      	blt.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6552:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d6556:	4294      	cmp	r4, r2
   d6558:	dd39      	ble.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d655a:	2900      	cmp	r1, #0
      w += x;
   d655c:	bfbe      	ittt	lt
   d655e:	185b      	addlt	r3, r3, r1
   d6560:	b21b      	sxthlt	r3, r3
      x  = 0;
   d6562:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d6564:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d6568:	18ce      	adds	r6, r1, r3
   d656a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d656c:	bfc4      	itt	gt
   d656e:	1a63      	subgt	r3, r4, r1
   d6570:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d6572:	2b00      	cmp	r3, #0
   d6574:	dd2b      	ble.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d6576:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6578:	10d6      	asrs	r6, r2, #3
   d657a:	fb14 1106 	smlabb	r1, r4, r6, r1
   d657e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d6580:	f002 0007 	and.w	r0, r2, #7
   d6584:	2201      	movs	r2, #1
   d6586:	4082      	lsls	r2, r0
      switch(color) {
   d6588:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d658a:	b2d2      	uxtb	r2, r2
      switch(color) {
   d658c:	d016      	beq.n	d65bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d658e:	2d02      	cmp	r5, #2
   d6590:	d00b      	beq.n	d65aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d6592:	b9e5      	cbnz	r5, d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d6594:	43d2      	mvns	r2, r2
   d6596:	b2d2      	uxtb	r2, r2
   d6598:	440b      	add	r3, r1
   d659a:	4299      	cmp	r1, r3
   d659c:	d017      	beq.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d659e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d65a2:	4010      	ands	r0, r2
   d65a4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d65a8:	e7f7      	b.n	d659a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d65aa:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d65ac:	4299      	cmp	r1, r3
   d65ae:	d00e      	beq.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d65b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   d65b4:	4050      	eors	r0, r2
   d65b6:	f801 0c01 	strb.w	r0, [r1, #-1]
   d65ba:	e7f7      	b.n	d65ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d65bc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d65be:	4299      	cmp	r1, r3
   d65c0:	d005      	beq.n	d65ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d65c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d65c6:	4310      	orrs	r0, r2
   d65c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d65cc:	e7f7      	b.n	d65be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d65ce:	bd70      	pop	{r4, r5, r6, pc}

000d65d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d65d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d65d2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d65d4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d65d8:	db76      	blt.n	d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d65da:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d65de:	42a9      	cmp	r1, r5
   d65e0:	da72      	bge.n	d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d65e2:	2a00      	cmp	r2, #0
      __h += __y;
   d65e4:	bfbc      	itt	lt
   d65e6:	18d2      	addlt	r2, r2, r3
   d65e8:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d65ea:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d65ee:	bfb8      	it	lt
   d65f0:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d65f2:	18d7      	adds	r7, r2, r3
   d65f4:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d65f6:	bfc4      	itt	gt
   d65f8:	1aa3      	subgt	r3, r4, r2
   d65fa:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d65fc:	2b00      	cmp	r3, #0
   d65fe:	dd63      	ble.n	d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d6600:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d6604:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d6606:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d660a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d660e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d6610:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d6614:	d023      	beq.n	d665e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d6616:	f1c2 0208 	rsb	r2, r2, #8
   d661a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d661c:	4d2c      	ldr	r5, [pc, #176]	; (d66d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d661e:	4293      	cmp	r3, r2
   d6620:	bf3c      	itt	cc
   d6622:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d6626:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d662a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d662c:	bf3c      	itt	cc
   d662e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d6632:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d6636:	2e01      	cmp	r6, #1
   d6638:	d007      	beq.n	d664a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d663a:	2e02      	cmp	r6, #2
   d663c:	d02e      	beq.n	d669c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d663e:	b94e      	cbnz	r6, d6654 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d6640:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6644:	ea2c 0505 	bic.w	r5, ip, r5
   d6648:	e003      	b.n	d6652 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d664a:	f817 c001 	ldrb.w	ip, [r7, r1]
   d664e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d6652:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d6654:	4293      	cmp	r3, r2
   d6656:	d337      	bcc.n	d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d6658:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d665c:	440c      	add	r4, r1
        h -= mod;
   d665e:	1a9a      	subs	r2, r3, r2
   d6660:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d6662:	2a07      	cmp	r2, #7
   d6664:	d90e      	bls.n	d6684 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d6666:	2e02      	cmp	r6, #2
   d6668:	d11d      	bne.n	d66a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d666a:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d666c:	7821      	ldrb	r1, [r4, #0]
   d666e:	43c9      	mvns	r1, r1
   d6670:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d6672:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d6674:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d6678:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d667a:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d667c:	440c      	add	r4, r1
            } while(h >= 8);
   d667e:	d8f5      	bhi.n	d666c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d6680:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d6684:	b302      	cbz	r2, d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d6686:	4b13      	ldr	r3, [pc, #76]	; (d66d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d6688:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d668a:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d668c:	d019      	beq.n	d66c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d668e:	2e02      	cmp	r6, #2
   d6690:	d01b      	beq.n	d66ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d6692:	b9ce      	cbnz	r6, d66c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d6694:	7822      	ldrb	r2, [r4, #0]
   d6696:	ea22 0303 	bic.w	r3, r2, r3
   d669a:	e014      	b.n	d66c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d669c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d66a0:	ea85 050c 	eor.w	r5, r5, ip
   d66a4:	e7d5      	b.n	d6652 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d66a6:	2e00      	cmp	r6, #0
   d66a8:	bf14      	ite	ne
   d66aa:	25ff      	movne	r5, #255	; 0xff
   d66ac:	2500      	moveq	r5, #0
   d66ae:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d66b0:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d66b2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d66b4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d66b8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d66ba:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d66bc:	440c      	add	r4, r1
            } while(h >= 8);
   d66be:	d8f7      	bhi.n	d66b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d66c0:	e7de      	b.n	d6680 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d66c2:	7822      	ldrb	r2, [r4, #0]
   d66c4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d66c6:	7023      	strb	r3, [r4, #0]
}
   d66c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d66ca:	7822      	ldrb	r2, [r4, #0]
   d66cc:	4053      	eors	r3, r2
   d66ce:	e7fa      	b.n	d66c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d66d0:	000dbb4c 	.word	0x000dbb4c
   d66d4:	000dbb54 	.word	0x000dbb54

000d66d8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d66d8:	b470      	push	{r4, r5, r6}
   d66da:	4614      	mov	r4, r2
  switch(rotation) {
   d66dc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d66de:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d66e2:	2a02      	cmp	r2, #2
   d66e4:	d00d      	beq.n	d6702 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d66e6:	2a03      	cmp	r2, #3
   d66e8:	d018      	beq.n	d671c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d66ea:	2a01      	cmp	r2, #1
   d66ec:	d111      	bne.n	d6712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d66ee:	8902      	ldrh	r2, [r0, #8]
   d66f0:	43e4      	mvns	r4, r4
   d66f2:	4414      	add	r4, r2
   d66f4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d66f6:	9603      	str	r6, [sp, #12]
   d66f8:	460a      	mov	r2, r1
   d66fa:	4621      	mov	r1, r4
}
   d66fc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d66fe:	f7ff bf67 	b.w	d65d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d6702:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d6704:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d6706:	43e4      	mvns	r4, r4
    x -= (w-1);
   d6708:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d670a:	4414      	add	r4, r2
    x -= (w-1);
   d670c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d670e:	b224      	sxth	r4, r4
    x -= (w-1);
   d6710:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d6712:	9603      	str	r6, [sp, #12]
   d6714:	4622      	mov	r2, r4
}
   d6716:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d6718:	f7ff bf16 	b.w	d6548 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d671c:	8945      	ldrh	r5, [r0, #10]
   d671e:	4419      	add	r1, r3
   d6720:	1a69      	subs	r1, r5, r1
   d6722:	b209      	sxth	r1, r1
    break;
   d6724:	e7e7      	b.n	d66f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d6726 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6726:	b430      	push	{r4, r5}
   d6728:	4614      	mov	r4, r2
  switch(rotation) {
   d672a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d672c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d6730:	2a02      	cmp	r2, #2
   d6732:	d00d      	beq.n	d6750 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d6734:	2a03      	cmp	r2, #3
   d6736:	d018      	beq.n	d676a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d6738:	2a01      	cmp	r2, #1
   d673a:	d111      	bne.n	d6760 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d673c:	18e2      	adds	r2, r4, r3
   d673e:	8904      	ldrh	r4, [r0, #8]
   d6740:	1aa4      	subs	r4, r4, r2
   d6742:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6744:	9502      	str	r5, [sp, #8]
   d6746:	460a      	mov	r2, r1
   d6748:	4621      	mov	r1, r4
}
   d674a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d674c:	f7ff befc 	b.w	d6548 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d6750:	8902      	ldrh	r2, [r0, #8]
   d6752:	43c9      	mvns	r1, r1
   d6754:	4411      	add	r1, r2
    y -= (h-1);
   d6756:	18e2      	adds	r2, r4, r3
   d6758:	8944      	ldrh	r4, [r0, #10]
   d675a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d675c:	b209      	sxth	r1, r1
    y -= (h-1);
   d675e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d6760:	9502      	str	r5, [sp, #8]
   d6762:	4622      	mov	r2, r4
}
   d6764:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d6766:	f7ff bf33 	b.w	d65d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d676a:	8942      	ldrh	r2, [r0, #10]
   d676c:	43c9      	mvns	r1, r1
   d676e:	4411      	add	r1, r2
   d6770:	b209      	sxth	r1, r1
    break;
   d6772:	e7e7      	b.n	d6744 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d6774 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d6774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6778:	4604      	mov	r4, r0
  TRANSACTION_START
   d677a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d677c:	2800      	cmp	r0, #0
   d677e:	d042      	beq.n	d6806 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d6780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6782:	f001 f9a9 	bl	d7ad8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d6786:	4947      	ldr	r1, [pc, #284]	; (d68a4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d6788:	2205      	movs	r2, #5
   d678a:	4620      	mov	r0, r4
   d678c:	f7ff fd29 	bl	d61e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d6790:	7a21      	ldrb	r1, [r4, #8]
   d6792:	3901      	subs	r1, #1
   d6794:	4620      	mov	r0, r4
   d6796:	b2c9      	uxtb	r1, r1
   d6798:	f7ff fcbc 	bl	d6114 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d679c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d67a0:	1dde      	adds	r6, r3, #7
   d67a2:	bf48      	it	mi
   d67a4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d67a8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d67ac:	8923      	ldrh	r3, [r4, #8]
   d67ae:	10f6      	asrs	r6, r6, #3
   d67b0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d67b4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d67b8:	2800      	cmp	r0, #0
   d67ba:	d03a      	beq.n	d6832 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d67bc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d67c0:	f001 f998 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d67c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67c6:	6803      	ldr	r3, [r0, #0]
   d67c8:	2140      	movs	r1, #64	; 0x40
   d67ca:	689b      	ldr	r3, [r3, #8]
   d67cc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d67ce:	2701      	movs	r7, #1
    while(count--) {
   d67d0:	42b5      	cmp	r5, r6
   d67d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67d4:	d024      	beq.n	d6820 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d67d6:	2f1f      	cmp	r7, #31
   d67d8:	d90c      	bls.n	d67f4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d67da:	f001 f992 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d67de:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d67e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67e4:	f001 f986 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d67e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67ea:	6803      	ldr	r3, [r0, #0]
   d67ec:	2140      	movs	r1, #64	; 0x40
   d67ee:	689b      	ldr	r3, [r3, #8]
   d67f0:	4798      	blx	r3
        bytesOut = 1;
   d67f2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d67f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67f6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d67fa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d67fc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d67fe:	689b      	ldr	r3, [r3, #8]
   d6800:	4798      	blx	r3
      bytesOut++;
   d6802:	b2ff      	uxtb	r7, r7
    while(count--) {
   d6804:	e7e4      	b.n	d67d0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d6806:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6808:	b118      	cbz	r0, d6812 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d680a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d680e:	f000 fbcb 	bl	d6fa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d6812:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6816:	2100      	movs	r1, #0
   d6818:	b280      	uxth	r0, r0
   d681a:	f001 fd92 	bl	d8342 <digitalWrite>
   d681e:	e7b2      	b.n	d6786 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d6820:	f001 f96f 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d6824:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6826:	b378      	cbz	r0, d6888 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d6828:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d682a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d682e:	f001 b953 	b.w	d7ad8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d6832:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d6836:	2101      	movs	r1, #1
   d6838:	b280      	uxth	r0, r0
   d683a:	f001 fd82 	bl	d8342 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d683e:	42b5      	cmp	r5, r6
   d6840:	d0f0      	beq.n	d6824 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d6842:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d6844:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d6848:	b118      	cbz	r0, d6852 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d684a:	4649      	mov	r1, r9
   d684c:	f000 fc1a 	bl	d7084 <_ZN8SPIClass8transferEh>
   d6850:	e7f5      	b.n	d683e <_ZN16Adafruit_SSD13067displayEv+0xca>
   d6852:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6854:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6858:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d685c:	ea09 0108 	and.w	r1, r9, r8
   d6860:	b280      	uxth	r0, r0
   d6862:	f001 fd6e 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6866:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d686a:	2101      	movs	r1, #1
   d686c:	b280      	uxth	r0, r0
   d686e:	f001 fd68 	bl	d8342 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6872:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6876:	2100      	movs	r1, #0
   d6878:	b280      	uxth	r0, r0
   d687a:	f001 fd62 	bl	d8342 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d687e:	3f01      	subs	r7, #1
   d6880:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6884:	d1e8      	bne.n	d6858 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d6886:	e7da      	b.n	d683e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d6888:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d688c:	2101      	movs	r1, #1
   d688e:	b280      	uxth	r0, r0
   d6890:	f001 fd57 	bl	d8342 <digitalWrite>
   d6894:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6896:	b118      	cbz	r0, d68a0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d6898:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d689c:	f000 bb6b 	b.w	d6f76 <_ZN8SPIClass14endTransactionEv>
}
   d68a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d68a4:	000dbb78 	.word	0x000dbb78

000d68a8 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d68a8:	f000 be90 	b.w	d75cc <delay>

000d68ac <_Z11BlynkMillisv>:
   d68ac:	f000 b880 	b.w	d69b0 <HAL_Timer_Get_Milli_Seconds>

000d68b0 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d68b0:	4770      	bx	lr

000d68b2 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d68b2:	4770      	bx	lr

000d68b4 <BlynkNoOpCbk>:
{}
   d68b4:	4770      	bx	lr
	...

000d68b8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d68b8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d68ba:	bf5a      	itte	pl
   d68bc:	4b02      	ldrpl	r3, [pc, #8]	; (d68c8 <GetReadHandler+0x10>)
   d68be:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d68c2:	2000      	movmi	r0, #0
#endif
}
   d68c4:	4770      	bx	lr
   d68c6:	bf00      	nop
   d68c8:	000dbb80 	.word	0x000dbb80

000d68cc <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d68cc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d68ce:	bf5a      	itte	pl
   d68d0:	4b02      	ldrpl	r3, [pc, #8]	; (d68dc <GetWriteHandler+0x10>)
   d68d2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d68d6:	2000      	movmi	r0, #0
#endif
}
   d68d8:	4770      	bx	lr
   d68da:	bf00      	nop
   d68dc:	000dbd80 	.word	0x000dbd80

000d68e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <netdb_freeaddrinfo+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	689b      	ldr	r3, [r3, #8]
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	00030268 	.word	0x00030268

000d68f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <netdb_getaddrinfo+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	68db      	ldr	r3, [r3, #12]
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	00030268 	.word	0x00030268

000d6900 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <HAL_Validate_Pin_Function+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	685b      	ldr	r3, [r3, #4]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	0003022c 	.word	0x0003022c

000d6910 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <HAL_Pin_Mode+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	689b      	ldr	r3, [r3, #8]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	0003022c 	.word	0x0003022c

000d6920 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <HAL_Get_Pin_Mode+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	68db      	ldr	r3, [r3, #12]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003022c 	.word	0x0003022c

000d6930 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <HAL_GPIO_Write+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	691b      	ldr	r3, [r3, #16]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003022c 	.word	0x0003022c

000d6940 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <HAL_GPIO_Read+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	695b      	ldr	r3, [r3, #20]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003022c 	.word	0x0003022c

000d6950 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <HAL_DAC_Write+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003022c 	.word	0x0003022c

000d6960 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <hal_adc_read+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003022c 	.word	0x0003022c

000d6970 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <hal_pwm_write_ext+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003022c 	.word	0x0003022c

000d6980 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <if_index_to_name+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	695b      	ldr	r3, [r3, #20]
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	0003026c 	.word	0x0003026c

000d6990 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <HAL_RNG_GetRandomNumber+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	685b      	ldr	r3, [r3, #4]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030218 	.word	0x00030218

000d69a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <HAL_Delay_Microseconds+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	68db      	ldr	r3, [r3, #12]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030218 	.word	0x00030218

000d69b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	695b      	ldr	r3, [r3, #20]
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030218 	.word	0x00030218

000d69c0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <os_mutex_create+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	00030248 	.word	0x00030248

000d69d0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <os_mutex_destroy+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	00030248 	.word	0x00030248

000d69e0 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <os_mutex_lock+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	00030248 	.word	0x00030248

000d69f0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <os_mutex_unlock+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030248 	.word	0x00030248

000d6a00 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <os_mutex_recursive_create+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030248 	.word	0x00030248

000d6a10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <os_mutex_recursive_destroy+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030248 	.word	0x00030248

000d6a20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <inet_inet_ntop+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	695b      	ldr	r3, [r3, #20]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030264 	.word	0x00030264

000d6a30 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <inet_htonl+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6a1b      	ldr	r3, [r3, #32]
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030264 	.word	0x00030264

000d6a40 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <inet_htons+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030264 	.word	0x00030264

000d6a50 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <hal_usart_init+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	681b      	ldr	r3, [r3, #0]
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	0003023c 	.word	0x0003023c

000d6a60 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <hal_usart_write+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	68db      	ldr	r3, [r3, #12]
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	0003023c 	.word	0x0003023c

000d6a70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <hal_usart_available+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	691b      	ldr	r3, [r3, #16]
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	0003023c 	.word	0x0003023c

000d6a80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <hal_usart_read+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	695b      	ldr	r3, [r3, #20]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	0003023c 	.word	0x0003023c

000d6a90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <hal_usart_peek+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	699b      	ldr	r3, [r3, #24]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	0003023c 	.word	0x0003023c

000d6aa0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <hal_usart_flush+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	69db      	ldr	r3, [r3, #28]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	0003023c 	.word	0x0003023c

000d6ab0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <hal_usart_is_enabled+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	6a1b      	ldr	r3, [r3, #32]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	0003023c 	.word	0x0003023c

000d6ac0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <hal_usart_available_data_for_write+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	0003023c 	.word	0x0003023c

000d6ad0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <hal_i2c_set_speed+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	681b      	ldr	r3, [r3, #0]
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030228 	.word	0x00030228

000d6ae0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <hal_i2c_begin+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	68db      	ldr	r3, [r3, #12]
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030228 	.word	0x00030228

000d6af0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <hal_i2c_begin_transmission+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	699b      	ldr	r3, [r3, #24]
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030228 	.word	0x00030228

000d6b00 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <hal_i2c_end_transmission+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	69db      	ldr	r3, [r3, #28]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030228 	.word	0x00030228

000d6b10 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <hal_i2c_write+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	6a1b      	ldr	r3, [r3, #32]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030228 	.word	0x00030228

000d6b20 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <hal_i2c_available+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030228 	.word	0x00030228

000d6b30 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <hal_i2c_read+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	00030228 	.word	0x00030228

000d6b40 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <hal_i2c_peek+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	00030228 	.word	0x00030228

000d6b50 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <hal_i2c_flush+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	00030228 	.word	0x00030228

000d6b60 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <hal_i2c_is_enabled+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	00030228 	.word	0x00030228

000d6b70 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <hal_i2c_init+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030228 	.word	0x00030228

000d6b80 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <sock_setsockopt+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	699b      	ldr	r3, [r3, #24]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030238 	.word	0x00030238

000d6b90 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <sock_close+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	69db      	ldr	r3, [r3, #28]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030238 	.word	0x00030238

000d6ba0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <sock_connect+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	6a1b      	ldr	r3, [r3, #32]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030238 	.word	0x00030238

000d6bb0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <sock_recv+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030238 	.word	0x00030238

000d6bc0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <sock_send+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030238 	.word	0x00030238

000d6bd0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <sock_socket+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030238 	.word	0x00030238

000d6be0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <hal_spi_begin+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	681b      	ldr	r3, [r3, #0]
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030230 	.word	0x00030230

000d6bf0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <hal_spi_transfer+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	695b      	ldr	r3, [r3, #20]
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030230 	.word	0x00030230

000d6c00 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <hal_spi_init+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	69db      	ldr	r3, [r3, #28]
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030230 	.word	0x00030230

000d6c10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <hal_spi_is_enabled+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	6a1b      	ldr	r3, [r3, #32]
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030230 	.word	0x00030230

000d6c20 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <hal_spi_info+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030230 	.word	0x00030230

000d6c30 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <hal_spi_set_settings+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030230 	.word	0x00030230

000d6c40 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <hal_spi_acquire+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030230 	.word	0x00030230

000d6c50 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <hal_spi_release+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030230 	.word	0x00030230

000d6c60 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <HAL_USB_USART_Init+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	681b      	ldr	r3, [r3, #0]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	0003024c 	.word	0x0003024c

000d6c70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <HAL_USB_USART_Begin+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	685b      	ldr	r3, [r3, #4]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	0003024c 	.word	0x0003024c

000d6c80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <HAL_USB_USART_Available_Data+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	691b      	ldr	r3, [r3, #16]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	0003024c 	.word	0x0003024c

000d6c90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	695b      	ldr	r3, [r3, #20]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	0003024c 	.word	0x0003024c

000d6ca0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <HAL_USB_USART_Receive_Data+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	699b      	ldr	r3, [r3, #24]
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	0003024c 	.word	0x0003024c

000d6cb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <HAL_USB_USART_Send_Data+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	69db      	ldr	r3, [r3, #28]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	0003024c 	.word	0x0003024c

000d6cc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <HAL_USB_USART_Flush_Data+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	6a1b      	ldr	r3, [r3, #32]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	0003024c 	.word	0x0003024c

000d6cd0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <panic_+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030260 	.word	0x00030260

000d6ce0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <log_message+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030260 	.word	0x00030260

000d6cf0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <set_system_mode+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	685b      	ldr	r3, [r3, #4]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	00030220 	.word	0x00030220

000d6d00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <system_delay_ms+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	695b      	ldr	r3, [r3, #20]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	00030220 	.word	0x00030220

000d6d10 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <system_thread_set_state+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	00030220 	.word	0x00030220

000d6d20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b03      	ldr	r3, [pc, #12]	; (d6d30 <system_ctrl_set_app_request_handler+0x10>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6d2a:	9301      	str	r3, [sp, #4]
   d6d2c:	bd08      	pop	{r3, pc}
   d6d2e:	0000      	.short	0x0000
   d6d30:	00030220 	.word	0x00030220

000d6d34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b03      	ldr	r3, [pc, #12]	; (d6d44 <system_ctrl_set_result+0x10>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6d3e:	9301      	str	r3, [sp, #4]
   d6d40:	bd08      	pop	{r3, pc}
   d6d42:	0000      	.short	0x0000
   d6d44:	00030220 	.word	0x00030220

000d6d48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <network_connect+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	685b      	ldr	r3, [r3, #4]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	00030240 	.word	0x00030240

000d6d58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <network_connecting+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	689b      	ldr	r3, [r3, #8]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	00030240 	.word	0x00030240

000d6d68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <network_disconnect+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	68db      	ldr	r3, [r3, #12]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	00030240 	.word	0x00030240

000d6d78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <network_ready+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	691b      	ldr	r3, [r3, #16]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	00030240 	.word	0x00030240

000d6d88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <network_on+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	695b      	ldr	r3, [r3, #20]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030240 	.word	0x00030240

000d6d98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <network_off+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	699b      	ldr	r3, [r3, #24]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030240 	.word	0x00030240

000d6da8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <network_listen+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	69db      	ldr	r3, [r3, #28]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030240 	.word	0x00030240

000d6db8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <network_listening+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	6a1b      	ldr	r3, [r3, #32]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030240 	.word	0x00030240

000d6dc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <network_set_listen_timeout+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030240 	.word	0x00030240

000d6dd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <network_get_listen_timeout+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030240 	.word	0x00030240

000d6de8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <network_is_on+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030240 	.word	0x00030240

000d6df8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <network_is_off+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030240 	.word	0x00030240

000d6e08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <spark_process+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	689b      	ldr	r3, [r3, #8]
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030244 	.word	0x00030244

000d6e18 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <spark_deviceID+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	69db      	ldr	r3, [r3, #28]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030244 	.word	0x00030244

000d6e28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030244 	.word	0x00030244

000d6e38 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <malloc+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	681b      	ldr	r3, [r3, #0]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	0003021c 	.word	0x0003021c

000d6e48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <free+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	685b      	ldr	r3, [r3, #4]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	0003021c 	.word	0x0003021c

000d6e58 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <realloc+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	689b      	ldr	r3, [r3, #8]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	0003021c 	.word	0x0003021c

000d6e68 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <snprintf+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	69db      	ldr	r3, [r3, #28]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	0003021c 	.word	0x0003021c

000d6e78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <vsnprintf+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	0003021c 	.word	0x0003021c

000d6e88 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <_malloc_r+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	0003021c 	.word	0x0003021c

000d6e98 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <__errno+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	0003021c 	.word	0x0003021c

000d6ea8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <newlib_impure_ptr_callback+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	0003021c 	.word	0x0003021c

000d6eb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6eb8:	2200      	movs	r2, #0
   d6eba:	6840      	ldr	r0, [r0, #4]
   d6ebc:	4611      	mov	r1, r2
   d6ebe:	f7ff bf7b 	b.w	d6db8 <network_listening>

000d6ec2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6ec2:	2200      	movs	r2, #0
   d6ec4:	6840      	ldr	r0, [r0, #4]
   d6ec6:	4611      	mov	r1, r2
   d6ec8:	f7ff bf86 	b.w	d6dd8 <network_get_listen_timeout>

000d6ecc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6ecc:	6840      	ldr	r0, [r0, #4]
   d6ece:	2200      	movs	r2, #0
   d6ed0:	f7ff bf7a 	b.w	d6dc8 <network_set_listen_timeout>

000d6ed4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ed4:	6840      	ldr	r0, [r0, #4]
   d6ed6:	2200      	movs	r2, #0
   d6ed8:	f081 0101 	eor.w	r1, r1, #1
   d6edc:	f7ff bf64 	b.w	d6da8 <network_listen>

000d6ee0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6ee0:	2300      	movs	r3, #0
   d6ee2:	6840      	ldr	r0, [r0, #4]
   d6ee4:	461a      	mov	r2, r3
   d6ee6:	4619      	mov	r1, r3
   d6ee8:	f7ff bf56 	b.w	d6d98 <network_off>

000d6eec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6eec:	2300      	movs	r3, #0
   d6eee:	6840      	ldr	r0, [r0, #4]
   d6ef0:	461a      	mov	r2, r3
   d6ef2:	4619      	mov	r1, r3
   d6ef4:	f7ff bf48 	b.w	d6d88 <network_on>

000d6ef8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ef8:	2200      	movs	r2, #0
   d6efa:	6840      	ldr	r0, [r0, #4]
   d6efc:	4611      	mov	r1, r2
   d6efe:	f7ff bf3b 	b.w	d6d78 <network_ready>

000d6f02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6f02:	2200      	movs	r2, #0
   d6f04:	6840      	ldr	r0, [r0, #4]
   d6f06:	4611      	mov	r1, r2
   d6f08:	f7ff bf26 	b.w	d6d58 <network_connecting>

000d6f0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f0c:	6840      	ldr	r0, [r0, #4]
   d6f0e:	2200      	movs	r2, #0
   d6f10:	2102      	movs	r1, #2
   d6f12:	f7ff bf29 	b.w	d6d68 <network_disconnect>

000d6f16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6f16:	2300      	movs	r3, #0
   d6f18:	6840      	ldr	r0, [r0, #4]
   d6f1a:	461a      	mov	r2, r3
   d6f1c:	f7ff bf14 	b.w	d6d48 <network_connect>

000d6f20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f20:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f22:	2203      	movs	r2, #3
   d6f24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f26:	4a02      	ldr	r2, [pc, #8]	; (d6f30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6f2a:	4770      	bx	lr
   d6f2c:	2003e654 	.word	0x2003e654
   d6f30:	000dbf88 	.word	0x000dbf88

000d6f34 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6f34:	2100      	movs	r1, #0
   d6f36:	f7ff be83 	b.w	d6c40 <hal_spi_acquire>

000d6f3a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6f3a:	2100      	movs	r1, #0
   d6f3c:	f7ff be88 	b.w	d6c50 <hal_spi_release>

000d6f40 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6f40:	b510      	push	{r4, lr}
   d6f42:	4604      	mov	r4, r0
   d6f44:	4608      	mov	r0, r1
{
    _spi = spi;
   d6f46:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6f48:	f7ff fe5a 	bl	d6c00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f4c:	2300      	movs	r3, #0
   d6f4e:	6063      	str	r3, [r4, #4]
}
   d6f50:	4620      	mov	r0, r4
   d6f52:	bd10      	pop	{r4, pc}

000d6f54 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6f54:	b510      	push	{r4, lr}
   d6f56:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6f58:	7800      	ldrb	r0, [r0, #0]
   d6f5a:	f7ff ffeb 	bl	d6f34 <_ZN8SPIClass4lockEv.isra.0>
   d6f5e:	b948      	cbnz	r0, d6f74 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6f60:	7820      	ldrb	r0, [r4, #0]
   d6f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6f66:	f7ff fe3b 	bl	d6be0 <hal_spi_begin>
        unlock();
   d6f6a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6f70:	f7ff bfe3 	b.w	d6f3a <_ZN8SPIClass6unlockEv.isra.0>
}
   d6f74:	bd10      	pop	{r4, pc}

000d6f76 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6f76:	7800      	ldrb	r0, [r0, #0]
   d6f78:	f7ff bfdf 	b.w	d6f3a <_ZN8SPIClass6unlockEv.isra.0>

000d6f7c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6f7c:	0840      	lsrs	r0, r0, #1
{
   d6f7e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6f80:	6018      	str	r0, [r3, #0]
   d6f82:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6f84:	6818      	ldr	r0, [r3, #0]
   d6f86:	4288      	cmp	r0, r1
   d6f88:	b2e5      	uxtb	r5, r4
   d6f8a:	d906      	bls.n	d6f9a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6f8c:	3401      	adds	r4, #1
   d6f8e:	2c08      	cmp	r4, #8
   d6f90:	d002      	beq.n	d6f98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6f92:	0840      	lsrs	r0, r0, #1
   d6f94:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6f96:	e7f5      	b.n	d6f84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6f98:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6f9c:	5d5b      	ldrb	r3, [r3, r5]
   d6f9e:	7013      	strb	r3, [r2, #0]
}
   d6fa0:	bd30      	pop	{r4, r5, pc}
   d6fa2:	bf00      	nop
   d6fa4:	000dbfbc 	.word	0x000dbfbc

000d6fa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fac:	4606      	mov	r6, r0
   d6fae:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6fb0:	7800      	ldrb	r0, [r0, #0]
{
   d6fb2:	460c      	mov	r4, r1
    CHECK(lock());
   d6fb4:	f7ff ffbe 	bl	d6f34 <_ZN8SPIClass4lockEv.isra.0>
   d6fb8:	2800      	cmp	r0, #0
   d6fba:	db1b      	blt.n	d6ff4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6fbc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6fbe:	2214      	movs	r2, #20
   d6fc0:	2100      	movs	r1, #0
   d6fc2:	a809      	add	r0, sp, #36	; 0x24
   d6fc4:	f002 f8cc 	bl	d9160 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6fc8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6fca:	2200      	movs	r2, #0
   d6fcc:	a909      	add	r1, sp, #36	; 0x24
   d6fce:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d6fd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6fd4:	f7ff fe24 	bl	d6c20 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6fd8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6fdc:	b113      	cbz	r3, d6fe4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6fde:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6fe2:	b155      	cbz	r5, d6ffa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6fe4:	2700      	movs	r7, #0
   d6fe6:	46b9      	mov	r9, r7
   d6fe8:	46b8      	mov	r8, r7
   d6fea:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6fec:	7923      	ldrb	r3, [r4, #4]
   d6fee:	b15d      	cbz	r5, d7008 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6ff0:	b1c3      	cbz	r3, d7024 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6ff2:	2000      	movs	r0, #0
}
   d6ff4:	b00f      	add	sp, #60	; 0x3c
   d6ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6ffa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6ffe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7002:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7006:	e7f1      	b.n	d6fec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7008:	2b00      	cmp	r3, #0
   d700a:	d135      	bne.n	d7078 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d700c:	68a3      	ldr	r3, [r4, #8]
   d700e:	4543      	cmp	r3, r8
   d7010:	d108      	bne.n	d7024 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7012:	f88d 9020 	strb.w	r9, [sp, #32]
   d7016:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d701a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d701e:	89a3      	ldrh	r3, [r4, #12]
   d7020:	429a      	cmp	r2, r3
   d7022:	d0e6      	beq.n	d6ff2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7024:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7026:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7028:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d702c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d702e:	ab04      	add	r3, sp, #16
   d7030:	f10d 020f 	add.w	r2, sp, #15
   d7034:	f7ff ffa2 	bl	d6f7c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7038:	7921      	ldrb	r1, [r4, #4]
   d703a:	b985      	cbnz	r5, d705e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d703c:	b989      	cbnz	r1, d7062 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d703e:	68a3      	ldr	r3, [r4, #8]
   d7040:	4543      	cmp	r3, r8
   d7042:	d30e      	bcc.n	d7062 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7044:	f88d 9020 	strb.w	r9, [sp, #32]
   d7048:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d704c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7050:	89a3      	ldrh	r3, [r4, #12]
   d7052:	429a      	cmp	r2, r3
   d7054:	d105      	bne.n	d7062 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7056:	9b04      	ldr	r3, [sp, #16]
   d7058:	4543      	cmp	r3, r8
   d705a:	d102      	bne.n	d7062 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d705c:	e7c9      	b.n	d6ff2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d705e:	2900      	cmp	r1, #0
   d7060:	d1f9      	bne.n	d7056 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d7062:	2300      	movs	r3, #0
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	7b63      	ldrb	r3, [r4, #13]
   d7068:	9300      	str	r3, [sp, #0]
   d706a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d706e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7070:	7830      	ldrb	r0, [r6, #0]
   d7072:	f7ff fddd 	bl	d6c30 <hal_spi_set_settings>
   d7076:	e7bc      	b.n	d6ff2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7078:	e9cd 5500 	strd	r5, r5, [sp]
   d707c:	462b      	mov	r3, r5
   d707e:	462a      	mov	r2, r5
   d7080:	2101      	movs	r1, #1
   d7082:	e7f5      	b.n	d7070 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7084 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7084:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7086:	7800      	ldrb	r0, [r0, #0]
   d7088:	f7ff fdb2 	bl	d6bf0 <hal_spi_transfer>
}
   d708c:	b2c0      	uxtb	r0, r0
   d708e:	bd08      	pop	{r3, pc}

000d7090 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7090:	b510      	push	{r4, lr}
   d7092:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7094:	6800      	ldr	r0, [r0, #0]
   d7096:	b118      	cbz	r0, d70a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7098:	f7ff fed6 	bl	d6e48 <free>
            wakeupSource_ = nullptr;
   d709c:	2300      	movs	r3, #0
   d709e:	6023      	str	r3, [r4, #0]
        }
    }
   d70a0:	bd10      	pop	{r4, pc}

000d70a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d70a2:	b510      	push	{r4, lr}
   d70a4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d70a6:	f7ff fff3 	bl	d7090 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d70aa:	4620      	mov	r0, r4
   d70ac:	bd10      	pop	{r4, pc}
	...

000d70b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d70b0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d70b2:	4b09      	ldr	r3, [pc, #36]	; (d70d8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d70b4:	4c09      	ldr	r4, [pc, #36]	; (d70dc <_GLOBAL__sub_I_System+0x2c>)
   d70b6:	2202      	movs	r2, #2
   d70b8:	2000      	movs	r0, #0
   d70ba:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d70bc:	4b08      	ldr	r3, [pc, #32]	; (d70e0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d70be:	6020      	str	r0, [r4, #0]
   d70c0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d70c2:	71a0      	strb	r0, [r4, #6]
   d70c4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d70c6:	f7ff fe13 	bl	d6cf0 <set_system_mode>
SystemClass System;
   d70ca:	4620      	mov	r0, r4
   d70cc:	4a05      	ldr	r2, [pc, #20]	; (d70e4 <_GLOBAL__sub_I_System+0x34>)
   d70ce:	4906      	ldr	r1, [pc, #24]	; (d70e8 <_GLOBAL__sub_I_System+0x38>)
   d70d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d70d4:	f001 b9de 	b.w	d8494 <__aeabi_atexit>
   d70d8:	2003e668 	.word	0x2003e668
   d70dc:	2003e65c 	.word	0x2003e65c
   d70e0:	ffff0000 	.word	0xffff0000
   d70e4:	2003e500 	.word	0x2003e500
   d70e8:	000d70a3 	.word	0x000d70a3

000d70ec <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d70ec:	b570      	push	{r4, r5, r6, lr}
   d70ee:	b086      	sub	sp, #24
   d70f0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d70f2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d70f4:	4668      	mov	r0, sp
   d70f6:	f000 fb9d 	bl	d7834 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d70fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70fc:	1d34      	adds	r4, r6, #4
   d70fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7100:	682b      	ldr	r3, [r5, #0]
   d7102:	7023      	strb	r3, [r4, #0]
    }
   d7104:	4630      	mov	r0, r6
   d7106:	b006      	add	sp, #24
   d7108:	bd70      	pop	{r4, r5, r6, pc}

000d710a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d710a:	b510      	push	{r4, lr}
   d710c:	4604      	mov	r4, r0
{
	free(buffer);
   d710e:	6800      	ldr	r0, [r0, #0]
   d7110:	f7ff fe9a 	bl	d6e48 <free>
}
   d7114:	4620      	mov	r0, r4
   d7116:	bd10      	pop	{r4, pc}

000d7118 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7118:	b510      	push	{r4, lr}
   d711a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d711c:	6800      	ldr	r0, [r0, #0]
   d711e:	b108      	cbz	r0, d7124 <_ZN6String10invalidateEv+0xc>
   d7120:	f7ff fe92 	bl	d6e48 <free>
	buffer = NULL;
   d7124:	2300      	movs	r3, #0
	capacity = len = 0;
   d7126:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d712a:	6023      	str	r3, [r4, #0]
}
   d712c:	bd10      	pop	{r4, pc}

000d712e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d712e:	b538      	push	{r3, r4, r5, lr}
   d7130:	4604      	mov	r4, r0
   d7132:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7134:	6800      	ldr	r0, [r0, #0]
   d7136:	3101      	adds	r1, #1
   d7138:	f7ff fe8e 	bl	d6e58 <realloc>
	if (newbuffer) {
   d713c:	b110      	cbz	r0, d7144 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d713e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7142:	2001      	movs	r0, #1
	}
	return 0;
}
   d7144:	bd38      	pop	{r3, r4, r5, pc}

000d7146 <_ZN6String7reserveEj>:
{
   d7146:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7148:	6803      	ldr	r3, [r0, #0]
{
   d714a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d714c:	b123      	cbz	r3, d7158 <_ZN6String7reserveEj+0x12>
   d714e:	6843      	ldr	r3, [r0, #4]
   d7150:	428b      	cmp	r3, r1
   d7152:	d301      	bcc.n	d7158 <_ZN6String7reserveEj+0x12>
   d7154:	2001      	movs	r0, #1
}
   d7156:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7158:	4620      	mov	r0, r4
   d715a:	f7ff ffe8 	bl	d712e <_ZN6String12changeBufferEj>
   d715e:	2800      	cmp	r0, #0
   d7160:	d0f9      	beq.n	d7156 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7162:	68a3      	ldr	r3, [r4, #8]
   d7164:	2b00      	cmp	r3, #0
   d7166:	d1f5      	bne.n	d7154 <_ZN6String7reserveEj+0xe>
   d7168:	6822      	ldr	r2, [r4, #0]
   d716a:	7013      	strb	r3, [r2, #0]
   d716c:	e7f2      	b.n	d7154 <_ZN6String7reserveEj+0xe>

000d716e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d716e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7170:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7172:	4611      	mov	r1, r2
   d7174:	9201      	str	r2, [sp, #4]
{
   d7176:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7178:	f7ff ffe5 	bl	d7146 <_ZN6String7reserveEj>
   d717c:	9a01      	ldr	r2, [sp, #4]
   d717e:	b928      	cbnz	r0, d718c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7180:	4620      	mov	r0, r4
   d7182:	f7ff ffc9 	bl	d7118 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7186:	4620      	mov	r0, r4
   d7188:	b003      	add	sp, #12
   d718a:	bd30      	pop	{r4, r5, pc}
	len = length;
   d718c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d718e:	4629      	mov	r1, r5
   d7190:	6820      	ldr	r0, [r4, #0]
   d7192:	f001 ffd7 	bl	d9144 <memcpy>
	buffer[len] = 0;
   d7196:	6822      	ldr	r2, [r4, #0]
   d7198:	68a3      	ldr	r3, [r4, #8]
   d719a:	2100      	movs	r1, #0
   d719c:	54d1      	strb	r1, [r2, r3]
	return *this;
   d719e:	e7f2      	b.n	d7186 <_ZN6String4copyEPKcj+0x18>

000d71a0 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d71a0:	2300      	movs	r3, #0
String::String(const char *cstr)
   d71a2:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d71a4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d71a8:	4604      	mov	r4, r0
	len = 0;
   d71aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d71ac:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d71ae:	b141      	cbz	r1, d71c2 <_ZN6StringC1EPKc+0x22>
   d71b0:	4608      	mov	r0, r1
   d71b2:	9101      	str	r1, [sp, #4]
   d71b4:	f002 f80a 	bl	d91cc <strlen>
   d71b8:	9901      	ldr	r1, [sp, #4]
   d71ba:	4602      	mov	r2, r0
   d71bc:	4620      	mov	r0, r4
   d71be:	f7ff ffd6 	bl	d716e <_ZN6String4copyEPKcj>
}
   d71c2:	4620      	mov	r0, r4
   d71c4:	b002      	add	sp, #8
   d71c6:	bd10      	pop	{r4, pc}

000d71c8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d71c8:	b513      	push	{r0, r1, r4, lr}
   d71ca:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d71cc:	b159      	cbz	r1, d71e6 <_ZN6StringaSEPKc+0x1e>
   d71ce:	4608      	mov	r0, r1
   d71d0:	9101      	str	r1, [sp, #4]
   d71d2:	f001 fffb 	bl	d91cc <strlen>
   d71d6:	9901      	ldr	r1, [sp, #4]
   d71d8:	4602      	mov	r2, r0
   d71da:	4620      	mov	r0, r4
   d71dc:	f7ff ffc7 	bl	d716e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d71e0:	4620      	mov	r0, r4
   d71e2:	b002      	add	sp, #8
   d71e4:	bd10      	pop	{r4, pc}
	else invalidate();
   d71e6:	f7ff ff97 	bl	d7118 <_ZN6String10invalidateEv>
   d71ea:	e7f9      	b.n	d71e0 <_ZN6StringaSEPKc+0x18>

000d71ec <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d71ec:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d71ee:	6882      	ldr	r2, [r0, #8]
   d71f0:	b93a      	cbnz	r2, d7202 <_ZNK6String6equalsEPKc+0x16>
   d71f2:	b121      	cbz	r1, d71fe <_ZNK6String6equalsEPKc+0x12>
   d71f4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d71f6:	fab0 f080 	clz	r0, r0
   d71fa:	0940      	lsrs	r0, r0, #5
   d71fc:	e000      	b.n	d7200 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d71fe:	2001      	movs	r0, #1
}
   d7200:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7202:	6800      	ldr	r0, [r0, #0]
   d7204:	b909      	cbnz	r1, d720a <_ZNK6String6equalsEPKc+0x1e>
   d7206:	7800      	ldrb	r0, [r0, #0]
   d7208:	e7f5      	b.n	d71f6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d720a:	f001 ffd5 	bl	d91b8 <strcmp>
   d720e:	e7f2      	b.n	d71f6 <_ZNK6String6equalsEPKc+0xa>

000d7210 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7210:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d7212:	6800      	ldr	r0, [r0, #0]
   d7214:	b140      	cbz	r0, d7228 <_ZNK6String7toFloatEv+0x18>
   d7216:	f001 ff7b 	bl	d9110 <atof>
   d721a:	ec51 0b10 	vmov	r0, r1, d0
   d721e:	f001 ff09 	bl	d9034 <__aeabi_d2f>
   d7222:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d7226:	bd08      	pop	{r3, pc}
	return 0;
   d7228:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7230 <_ZNK6String7toFloatEv+0x20>
   d722c:	e7fb      	b.n	d7226 <_ZNK6String7toFloatEv+0x16>
   d722e:	bf00      	nop
   d7230:	00000000 	.word	0x00000000

000d7234 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7234:	b510      	push	{r4, lr}
   d7236:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7238:	6800      	ldr	r0, [r0, #0]
   d723a:	b108      	cbz	r0, d7240 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d723c:	f7ff fbe8 	bl	d6a10 <os_mutex_recursive_destroy>
    }
   d7240:	4620      	mov	r0, r4
   d7242:	bd10      	pop	{r4, pc}

000d7244 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7244:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7246:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7248:	4604      	mov	r4, r0
      if (_M_manager)
   d724a:	b113      	cbz	r3, d7252 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d724c:	2203      	movs	r2, #3
   d724e:	4601      	mov	r1, r0
   d7250:	4798      	blx	r3
    }
   d7252:	4620      	mov	r0, r4
   d7254:	bd10      	pop	{r4, pc}
	...

000d7258 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7258:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d725a:	4c06      	ldr	r4, [pc, #24]	; (d7274 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d725c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d725e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7260:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7262:	f7ff fbcd 	bl	d6a00 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7266:	4620      	mov	r0, r4
   d7268:	4a03      	ldr	r2, [pc, #12]	; (d7278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d726a:	4904      	ldr	r1, [pc, #16]	; (d727c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7270:	f001 b910 	b.w	d8494 <__aeabi_atexit>
   d7274:	2003e66c 	.word	0x2003e66c
   d7278:	2003e500 	.word	0x2003e500
   d727c:	000d7235 	.word	0x000d7235

000d7280 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7282:	4606      	mov	r6, r0
   d7284:	460d      	mov	r5, r1
  size_t n = 0;
   d7286:	188f      	adds	r7, r1, r2
   d7288:	2400      	movs	r4, #0
  while (size--) {
   d728a:	42bd      	cmp	r5, r7
   d728c:	d00c      	beq.n	d72a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d728e:	6833      	ldr	r3, [r6, #0]
   d7290:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7294:	689b      	ldr	r3, [r3, #8]
   d7296:	4630      	mov	r0, r6
   d7298:	4798      	blx	r3
     if (chunk>=0)
   d729a:	1e03      	subs	r3, r0, #0
   d729c:	db01      	blt.n	d72a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d729e:	441c      	add	r4, r3
  while (size--) {
   d72a0:	e7f3      	b.n	d728a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d72a2:	2c00      	cmp	r4, #0
   d72a4:	bf08      	it	eq
   d72a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d72a8:	4620      	mov	r0, r4
   d72aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d72ac:	b513      	push	{r0, r1, r4, lr}
   d72ae:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d72b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72b2:	b159      	cbz	r1, d72cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72b4:	9101      	str	r1, [sp, #4]
   d72b6:	f001 ff89 	bl	d91cc <strlen>
   d72ba:	6823      	ldr	r3, [r4, #0]
   d72bc:	9901      	ldr	r1, [sp, #4]
   d72be:	68db      	ldr	r3, [r3, #12]
   d72c0:	4602      	mov	r2, r0
   d72c2:	4620      	mov	r0, r4
    }
   d72c4:	b002      	add	sp, #8
   d72c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d72ca:	4718      	bx	r3
    }
   d72cc:	b002      	add	sp, #8
   d72ce:	bd10      	pop	{r4, pc}

000d72d0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d72d0:	b508      	push	{r3, lr}
  return write(str);
   d72d2:	f7ff ffeb 	bl	d72ac <_ZN5Print5writeEPKc>
}
   d72d6:	bd08      	pop	{r3, pc}

000d72d8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d72d8:	6803      	ldr	r3, [r0, #0]
   d72da:	689b      	ldr	r3, [r3, #8]
   d72dc:	4718      	bx	r3

000d72de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d72de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d72e0:	210d      	movs	r1, #13
{
   d72e2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d72e4:	f7ff fff8 	bl	d72d8 <_ZN5Print5printEc>
  n += print('\n');
   d72e8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d72ea:	4604      	mov	r4, r0
  n += print('\n');
   d72ec:	4628      	mov	r0, r5
   d72ee:	f7ff fff3 	bl	d72d8 <_ZN5Print5printEc>
  return n;
}
   d72f2:	4420      	add	r0, r4
   d72f4:	bd38      	pop	{r3, r4, r5, pc}

000d72f6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d72f6:	b538      	push	{r3, r4, r5, lr}
   d72f8:	4605      	mov	r5, r0
  return write(str);
   d72fa:	f7ff ffd7 	bl	d72ac <_ZN5Print5writeEPKc>
   d72fe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7300:	4628      	mov	r0, r5
   d7302:	f7ff ffec 	bl	d72de <_ZN5Print7printlnEv>
  return n;
}
   d7306:	4420      	add	r0, r4
   d7308:	bd38      	pop	{r3, r4, r5, pc}

000d730a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d730a:	b530      	push	{r4, r5, lr}
   d730c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d730e:	2300      	movs	r3, #0
   d7310:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7314:	2a01      	cmp	r2, #1
   d7316:	bf98      	it	ls
   d7318:	220a      	movls	r2, #10
   d731a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d731c:	460d      	mov	r5, r1
   d731e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7322:	fb01 5312 	mls	r3, r1, r2, r5
   d7326:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d732a:	2b09      	cmp	r3, #9
   d732c:	bf94      	ite	ls
   d732e:	3330      	addls	r3, #48	; 0x30
   d7330:	3337      	addhi	r3, #55	; 0x37
   d7332:	b2db      	uxtb	r3, r3
  } while(n);
   d7334:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7336:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d733a:	d9ef      	bls.n	d731c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d733c:	4621      	mov	r1, r4
   d733e:	f7ff ffb5 	bl	d72ac <_ZN5Print5writeEPKc>
}
   d7342:	b00b      	add	sp, #44	; 0x2c
   d7344:	bd30      	pop	{r4, r5, pc}
	...

000d7348 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d734c:	ec55 4b10 	vmov	r4, r5, d0
   d7350:	4606      	mov	r6, r0
   d7352:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7354:	ee10 2a10 	vmov	r2, s0
   d7358:	ee10 0a10 	vmov	r0, s0
   d735c:	462b      	mov	r3, r5
   d735e:	4629      	mov	r1, r5
   d7360:	f001 fe0a 	bl	d8f78 <__aeabi_dcmpun>
   d7364:	b140      	cbz	r0, d7378 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7366:	4953      	ldr	r1, [pc, #332]	; (d74b4 <_ZN5Print10printFloatEdh+0x16c>)
   d7368:	4630      	mov	r0, r6
   d736a:	f7ff ff9f 	bl	d72ac <_ZN5Print5writeEPKc>
   d736e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7370:	4650      	mov	r0, sl
   d7372:	b003      	add	sp, #12
   d7374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7378:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d737c:	4b4e      	ldr	r3, [pc, #312]	; (d74b8 <_ZN5Print10printFloatEdh+0x170>)
   d737e:	f04f 32ff 	mov.w	r2, #4294967295
   d7382:	4620      	mov	r0, r4
   d7384:	4649      	mov	r1, r9
   d7386:	f001 fdf7 	bl	d8f78 <__aeabi_dcmpun>
   d738a:	b948      	cbnz	r0, d73a0 <_ZN5Print10printFloatEdh+0x58>
   d738c:	4b4a      	ldr	r3, [pc, #296]	; (d74b8 <_ZN5Print10printFloatEdh+0x170>)
   d738e:	f04f 32ff 	mov.w	r2, #4294967295
   d7392:	4620      	mov	r0, r4
   d7394:	4649      	mov	r1, r9
   d7396:	f001 fdd1 	bl	d8f3c <__aeabi_dcmple>
   d739a:	b908      	cbnz	r0, d73a0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d739c:	4947      	ldr	r1, [pc, #284]	; (d74bc <_ZN5Print10printFloatEdh+0x174>)
   d739e:	e7e3      	b.n	d7368 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d73a0:	4b47      	ldr	r3, [pc, #284]	; (d74c0 <_ZN5Print10printFloatEdh+0x178>)
   d73a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d73a6:	4620      	mov	r0, r4
   d73a8:	4629      	mov	r1, r5
   d73aa:	f001 fddb 	bl	d8f64 <__aeabi_dcmpgt>
   d73ae:	b108      	cbz	r0, d73b4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d73b0:	4944      	ldr	r1, [pc, #272]	; (d74c4 <_ZN5Print10printFloatEdh+0x17c>)
   d73b2:	e7d9      	b.n	d7368 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d73b4:	4b44      	ldr	r3, [pc, #272]	; (d74c8 <_ZN5Print10printFloatEdh+0x180>)
   d73b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d73ba:	4620      	mov	r0, r4
   d73bc:	4629      	mov	r1, r5
   d73be:	f001 fdb3 	bl	d8f28 <__aeabi_dcmplt>
   d73c2:	2800      	cmp	r0, #0
   d73c4:	d1f4      	bne.n	d73b0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d73c6:	2200      	movs	r2, #0
   d73c8:	2300      	movs	r3, #0
   d73ca:	4620      	mov	r0, r4
   d73cc:	4629      	mov	r1, r5
   d73ce:	f001 fdab 	bl	d8f28 <__aeabi_dcmplt>
   d73d2:	b1d0      	cbz	r0, d740a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d73d4:	212d      	movs	r1, #45	; 0x2d
   d73d6:	4630      	mov	r0, r6
   d73d8:	f7ff ff7e 	bl	d72d8 <_ZN5Print5printEc>
     number = -number;
   d73dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d73e0:	4682      	mov	sl, r0
     number = -number;
   d73e2:	461d      	mov	r5, r3
  double rounding = 0.5;
   d73e4:	4939      	ldr	r1, [pc, #228]	; (d74cc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d73e6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d74d4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d73ea:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d73ee:	2000      	movs	r0, #0
    rounding /= 10.0;
   d73f0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d73f4:	fa5f f38b 	uxtb.w	r3, fp
   d73f8:	429f      	cmp	r7, r3
   d73fa:	d908      	bls.n	d740e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d73fc:	4642      	mov	r2, r8
   d73fe:	464b      	mov	r3, r9
   d7400:	f001 fc4a 	bl	d8c98 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7404:	f10b 0b01 	add.w	fp, fp, #1
   d7408:	e7f4      	b.n	d73f4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d740a:	4682      	mov	sl, r0
   d740c:	e7ea      	b.n	d73e4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d740e:	4622      	mov	r2, r4
   d7410:	462b      	mov	r3, r5
   d7412:	f001 f961 	bl	d86d8 <__adddf3>
   d7416:	460d      	mov	r5, r1
   d7418:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d741a:	f001 fdeb 	bl	d8ff4 <__aeabi_d2uiz>
   d741e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7420:	f001 fa96 	bl	d8950 <__aeabi_ui2d>
   d7424:	4602      	mov	r2, r0
   d7426:	460b      	mov	r3, r1
   d7428:	4620      	mov	r0, r4
   d742a:	4629      	mov	r1, r5
   d742c:	f001 f952 	bl	d86d4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7430:	220a      	movs	r2, #10
   d7432:	4604      	mov	r4, r0
   d7434:	460d      	mov	r5, r1
   d7436:	4630      	mov	r0, r6
   d7438:	4641      	mov	r1, r8
   d743a:	f7ff ff66 	bl	d730a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d743e:	4482      	add	sl, r0
  if (digits > 0) {
   d7440:	b127      	cbz	r7, d744c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7442:	4923      	ldr	r1, [pc, #140]	; (d74d0 <_ZN5Print10printFloatEdh+0x188>)
   d7444:	4630      	mov	r0, r6
   d7446:	f7ff ff31 	bl	d72ac <_ZN5Print5writeEPKc>
    n += print(".");
   d744a:	4482      	add	sl, r0
    remainder *= 10.0;
   d744c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d74d4 <_ZN5Print10printFloatEdh+0x18c>
   d7450:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7454:	3f01      	subs	r7, #1
   d7456:	b2ff      	uxtb	r7, r7
   d7458:	2fff      	cmp	r7, #255	; 0xff
   d745a:	d089      	beq.n	d7370 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d745c:	4642      	mov	r2, r8
   d745e:	464b      	mov	r3, r9
   d7460:	4620      	mov	r0, r4
   d7462:	4629      	mov	r1, r5
   d7464:	f001 faee 	bl	d8a44 <__aeabi_dmul>
   d7468:	4604      	mov	r4, r0
   d746a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d746c:	f001 fd9a 	bl	d8fa4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7470:	f1b0 0b00 	subs.w	fp, r0, #0
   d7474:	da1a      	bge.n	d74ac <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7476:	212d      	movs	r1, #45	; 0x2d
   d7478:	4630      	mov	r0, r6
   d747a:	f7ff ff2d 	bl	d72d8 <_ZN5Print5printEc>
            val = -n;
   d747e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7482:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7484:	220a      	movs	r2, #10
   d7486:	4630      	mov	r0, r6
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	f7ff ff3e 	bl	d730a <_ZN5Print11printNumberEmh>
   d748e:	9b01      	ldr	r3, [sp, #4]
   d7490:	4418      	add	r0, r3
    n += print(toPrint);
   d7492:	4482      	add	sl, r0
    remainder -= toPrint;
   d7494:	4658      	mov	r0, fp
   d7496:	f001 fa6b 	bl	d8970 <__aeabi_i2d>
   d749a:	4602      	mov	r2, r0
   d749c:	460b      	mov	r3, r1
   d749e:	4620      	mov	r0, r4
   d74a0:	4629      	mov	r1, r5
   d74a2:	f001 f917 	bl	d86d4 <__aeabi_dsub>
   d74a6:	4604      	mov	r4, r0
   d74a8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d74aa:	e7d3      	b.n	d7454 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d74ac:	4659      	mov	r1, fp
        size_t t = 0;
   d74ae:	2300      	movs	r3, #0
   d74b0:	e7e8      	b.n	d7484 <_ZN5Print10printFloatEdh+0x13c>
   d74b2:	bf00      	nop
   d74b4:	000dbfcc 	.word	0x000dbfcc
   d74b8:	7fefffff 	.word	0x7fefffff
   d74bc:	000dbfd0 	.word	0x000dbfd0
   d74c0:	41efffff 	.word	0x41efffff
   d74c4:	000dbfd4 	.word	0x000dbfd4
   d74c8:	c1efffff 	.word	0xc1efffff
   d74cc:	3fe00000 	.word	0x3fe00000
   d74d0:	000dbfd8 	.word	0x000dbfd8
   d74d4:	40240000 	.word	0x40240000

000d74d8 <_ZN5Print7printlnEdi>:
{
   d74d8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d74da:	b2c9      	uxtb	r1, r1
{
   d74dc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d74de:	f7ff ff33 	bl	d7348 <_ZN5Print10printFloatEdh>
   d74e2:	4604      	mov	r4, r0
  n += println();
   d74e4:	4628      	mov	r0, r5
   d74e6:	f7ff fefa 	bl	d72de <_ZN5Print7printlnEv>
}
   d74ea:	4420      	add	r0, r4
   d74ec:	bd38      	pop	{r3, r4, r5, pc}

000d74ee <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d74ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74f2:	b086      	sub	sp, #24
   d74f4:	af00      	add	r7, sp, #0
   d74f6:	4605      	mov	r5, r0
   d74f8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d74fa:	1d38      	adds	r0, r7, #4
   d74fc:	2114      	movs	r1, #20
{
   d74fe:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7500:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7502:	f7ff fcb9 	bl	d6e78 <vsnprintf>

    if (n<bufsize)
   d7506:	2813      	cmp	r0, #19
   d7508:	d80e      	bhi.n	d7528 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d750a:	1d39      	adds	r1, r7, #4
   d750c:	4628      	mov	r0, r5
   d750e:	f7ff fecd 	bl	d72ac <_ZN5Print5writeEPKc>
   d7512:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7514:	b11e      	cbz	r6, d751e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7516:	4628      	mov	r0, r5
   d7518:	f7ff fee1 	bl	d72de <_ZN5Print7printlnEv>
   d751c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d751e:	4620      	mov	r0, r4
   d7520:	3718      	adds	r7, #24
   d7522:	46bd      	mov	sp, r7
   d7524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7528:	f100 0308 	add.w	r3, r0, #8
   d752c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7530:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7532:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7536:	4622      	mov	r2, r4
   d7538:	1c41      	adds	r1, r0, #1
   d753a:	683b      	ldr	r3, [r7, #0]
   d753c:	4668      	mov	r0, sp
   d753e:	f7ff fc9b 	bl	d6e78 <vsnprintf>
  return write(str);
   d7542:	4669      	mov	r1, sp
   d7544:	4628      	mov	r0, r5
   d7546:	f7ff feb1 	bl	d72ac <_ZN5Print5writeEPKc>
   d754a:	4604      	mov	r4, r0
   d754c:	46c5      	mov	sp, r8
   d754e:	e7e1      	b.n	d7514 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7550 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d7550:	b510      	push	{r4, lr}
   d7552:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7554:	f7ff fa2c 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d7558:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d755a:	6823      	ldr	r3, [r4, #0]
   d755c:	4620      	mov	r0, r4
   d755e:	695b      	ldr	r3, [r3, #20]
   d7560:	4798      	blx	r3
    if (c >= 0) return c;
   d7562:	2800      	cmp	r0, #0
   d7564:	da08      	bge.n	d7578 <_ZN6Stream9timedReadEv+0x28>
   d7566:	f7ff fa23 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d756a:	68e3      	ldr	r3, [r4, #12]
   d756c:	1ac0      	subs	r0, r0, r3
   d756e:	68a3      	ldr	r3, [r4, #8]
   d7570:	4298      	cmp	r0, r3
   d7572:	d3f2      	bcc.n	d755a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d7574:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7578:	bd10      	pop	{r4, pc}

000d757a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d757a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d757c:	4606      	mov	r6, r0
   d757e:	460d      	mov	r5, r1
   d7580:	4617      	mov	r7, r2
  size_t count = 0;
   d7582:	2400      	movs	r4, #0
  while (count < length) {
   d7584:	42bc      	cmp	r4, r7
   d7586:	d007      	beq.n	d7598 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d7588:	4630      	mov	r0, r6
   d758a:	f7ff ffe1 	bl	d7550 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d758e:	1e03      	subs	r3, r0, #0
   d7590:	db02      	blt.n	d7598 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d7592:	552b      	strb	r3, [r5, r4]
    count++;
   d7594:	3401      	adds	r4, #1
  while (count < length) {
   d7596:	e7f5      	b.n	d7584 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d7598:	4620      	mov	r0, r4
   d759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d759c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d759c:	2300      	movs	r3, #0
   d759e:	6840      	ldr	r0, [r0, #4]
   d75a0:	461a      	mov	r2, r3
   d75a2:	4619      	mov	r1, r3
   d75a4:	f7ff bbf0 	b.w	d6d88 <network_on>

000d75a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d75a8:	4b01      	ldr	r3, [pc, #4]	; (d75b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d75aa:	4a02      	ldr	r2, [pc, #8]	; (d75b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d75ac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d75ae:	4770      	bx	lr
   d75b0:	2003e670 	.word	0x2003e670
   d75b4:	000dbfda 	.word	0x000dbfda

000d75b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d75b8:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d75ba:	681a      	ldr	r2, [r3, #0]
   d75bc:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d75be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d75c0:	4770      	bx	lr
   d75c2:	bf00      	nop
   d75c4:	2003e324 	.word	0x2003e324
   d75c8:	2003e674 	.word	0x2003e674

000d75cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d75cc:	2100      	movs	r1, #0
   d75ce:	f7ff bb97 	b.w	d6d00 <system_delay_ms>

000d75d2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d75d2:	b510      	push	{r4, lr}
   d75d4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75d6:	f7ff fe35 	bl	d7244 <_ZNSt14_Function_baseD1Ev>
   d75da:	4620      	mov	r0, r4
   d75dc:	bd10      	pop	{r4, pc}
	...

000d75e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d75e0:	4803      	ldr	r0, [pc, #12]	; (d75f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d75e2:	4a04      	ldr	r2, [pc, #16]	; (d75f4 <_GLOBAL__sub_I_RGB+0x14>)
   d75e4:	4904      	ldr	r1, [pc, #16]	; (d75f8 <_GLOBAL__sub_I_RGB+0x18>)
   d75e6:	2300      	movs	r3, #0
   d75e8:	6083      	str	r3, [r0, #8]
   d75ea:	f000 bf53 	b.w	d8494 <__aeabi_atexit>
   d75ee:	bf00      	nop
   d75f0:	2003e678 	.word	0x2003e678
   d75f4:	2003e500 	.word	0x2003e500
   d75f8:	000d75d3 	.word	0x000d75d3

000d75fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d75fc:	4b01      	ldr	r3, [pc, #4]	; (d7604 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d75fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7600:	4770      	bx	lr
   d7602:	bf00      	nop
   d7604:	2003e328 	.word	0x2003e328

000d7608 <serialEventRun>:
{
   d7608:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d760a:	4b0b      	ldr	r3, [pc, #44]	; (d7638 <serialEventRun+0x30>)
   d760c:	b143      	cbz	r3, d7620 <serialEventRun+0x18>
   d760e:	f000 f97d 	bl	d790c <_Z16_fetch_usbserialv>
   d7612:	6803      	ldr	r3, [r0, #0]
   d7614:	691b      	ldr	r3, [r3, #16]
   d7616:	4798      	blx	r3
   d7618:	2800      	cmp	r0, #0
   d761a:	dd01      	ble.n	d7620 <serialEventRun+0x18>
        serialEvent();
   d761c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7620:	4b06      	ldr	r3, [pc, #24]	; (d763c <serialEventRun+0x34>)
   d7622:	b143      	cbz	r3, d7636 <serialEventRun+0x2e>
   d7624:	f000 f9f0 	bl	d7a08 <_Z22__fetch_global_Serial1v>
   d7628:	6803      	ldr	r3, [r0, #0]
   d762a:	691b      	ldr	r3, [r3, #16]
   d762c:	4798      	blx	r3
   d762e:	2800      	cmp	r0, #0
   d7630:	dd01      	ble.n	d7636 <serialEventRun+0x2e>
        serialEvent1();
   d7632:	f3af 8000 	nop.w
}
   d7636:	bd08      	pop	{r3, pc}
	...

000d7640 <_post_loop>:
{
   d7640:	b508      	push	{r3, lr}
	serialEventRun();
   d7642:	f7ff ffe1 	bl	d7608 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7646:	f7ff f9b3 	bl	d69b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d764a:	4b01      	ldr	r3, [pc, #4]	; (d7650 <_post_loop+0x10>)
   d764c:	6018      	str	r0, [r3, #0]
}
   d764e:	bd08      	pop	{r3, pc}
   d7650:	2003e7d8 	.word	0x2003e7d8

000d7654 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7654:	4802      	ldr	r0, [pc, #8]	; (d7660 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7656:	4a03      	ldr	r2, [pc, #12]	; (d7664 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7658:	4903      	ldr	r1, [pc, #12]	; (d7668 <_Z33system_initialize_user_backup_ramv+0x14>)
   d765a:	1a12      	subs	r2, r2, r0
   d765c:	f001 bd72 	b.w	d9144 <memcpy>
   d7660:	2003f400 	.word	0x2003f400
   d7664:	2003f404 	.word	0x2003f404
   d7668:	000dc520 	.word	0x000dc520

000d766c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d766c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d766e:	2300      	movs	r3, #0
   d7670:	9300      	str	r3, [sp, #0]
   d7672:	461a      	mov	r2, r3
   d7674:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7678:	f7ff fb5c 	bl	d6d34 <system_ctrl_set_result>
}
   d767c:	b003      	add	sp, #12
   d767e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7684 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7684:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7686:	8843      	ldrh	r3, [r0, #2]
   d7688:	2b0a      	cmp	r3, #10
   d768a:	d008      	beq.n	d769e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d768c:	2b50      	cmp	r3, #80	; 0x50
   d768e:	d10b      	bne.n	d76a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7690:	4b09      	ldr	r3, [pc, #36]	; (d76b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7692:	681b      	ldr	r3, [r3, #0]
   d7694:	b14b      	cbz	r3, d76aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7696:	b003      	add	sp, #12
   d7698:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d769c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d769e:	f7ff ffe5 	bl	d766c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d76a2:	b003      	add	sp, #12
   d76a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76a8:	2300      	movs	r3, #0
   d76aa:	9300      	str	r3, [sp, #0]
   d76ac:	461a      	mov	r2, r3
   d76ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d76b2:	f7ff fb3f 	bl	d6d34 <system_ctrl_set_result>
}
   d76b6:	e7f4      	b.n	d76a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d76b8:	2003e68c 	.word	0x2003e68c

000d76bc <module_user_init_hook>:
{
   d76bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76be:	4c12      	ldr	r4, [pc, #72]	; (d7708 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d76c0:	4812      	ldr	r0, [pc, #72]	; (d770c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76c2:	4d13      	ldr	r5, [pc, #76]	; (d7710 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d76c4:	2100      	movs	r1, #0
   d76c6:	f7ff fbef 	bl	d6ea8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76ca:	6823      	ldr	r3, [r4, #0]
   d76cc:	42ab      	cmp	r3, r5
   d76ce:	4b11      	ldr	r3, [pc, #68]	; (d7714 <module_user_init_hook+0x58>)
   d76d0:	bf0c      	ite	eq
   d76d2:	2201      	moveq	r2, #1
   d76d4:	2200      	movne	r2, #0
   d76d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d76d8:	d002      	beq.n	d76e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d76da:	f7ff ffbb 	bl	d7654 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d76de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d76e0:	f7ff f956 	bl	d6990 <HAL_RNG_GetRandomNumber>
   d76e4:	4604      	mov	r4, r0
    srand(seed);
   d76e6:	f001 fd43 	bl	d9170 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d76ea:	4b0b      	ldr	r3, [pc, #44]	; (d7718 <module_user_init_hook+0x5c>)
   d76ec:	b113      	cbz	r3, d76f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d76ee:	4620      	mov	r0, r4
   d76f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d76f4:	2100      	movs	r1, #0
   d76f6:	4808      	ldr	r0, [pc, #32]	; (d7718 <module_user_init_hook+0x5c>)
   d76f8:	f7ff fb96 	bl	d6e28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d76fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7700:	4806      	ldr	r0, [pc, #24]	; (d771c <module_user_init_hook+0x60>)
   d7702:	2100      	movs	r1, #0
   d7704:	f7ff bb0c 	b.w	d6d20 <system_ctrl_set_app_request_handler>
   d7708:	2003f400 	.word	0x2003f400
   d770c:	000d75fd 	.word	0x000d75fd
   d7710:	9a271c1e 	.word	0x9a271c1e
   d7714:	2003e688 	.word	0x2003e688
   d7718:	00000000 	.word	0x00000000
   d771c:	000d7685 	.word	0x000d7685

000d7720 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7720:	4770      	bx	lr

000d7722 <_ZN9IPAddressD0Ev>:
   d7722:	b510      	push	{r4, lr}
   d7724:	2118      	movs	r1, #24
   d7726:	4604      	mov	r4, r0
   d7728:	f000 feb9 	bl	d849e <_ZdlPvj>
   d772c:	4620      	mov	r0, r4
   d772e:	bd10      	pop	{r4, pc}

000d7730 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7730:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7732:	7d03      	ldrb	r3, [r0, #20]
   d7734:	2b06      	cmp	r3, #6
{
   d7736:	b08d      	sub	sp, #52	; 0x34
   d7738:	460e      	mov	r6, r1
   d773a:	f100 0704 	add.w	r7, r0, #4
   d773e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7742:	d012      	beq.n	d776a <_ZNK9IPAddress7printToER5Print+0x3a>
   d7744:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d7748:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d774c:	220a      	movs	r2, #10
   d774e:	4630      	mov	r0, r6
   d7750:	f7ff fddb 	bl	d730a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7754:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7756:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7758:	d019      	beq.n	d778e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d775a:	2c00      	cmp	r4, #0
   d775c:	d0f4      	beq.n	d7748 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d775e:	212e      	movs	r1, #46	; 0x2e
   d7760:	4630      	mov	r0, r6
   d7762:	f7ff fdb9 	bl	d72d8 <_ZN5Print5printEc>
   d7766:	4404      	add	r4, r0
   d7768:	e7ee      	b.n	d7748 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d776a:	232f      	movs	r3, #47	; 0x2f
   d776c:	466a      	mov	r2, sp
   d776e:	4639      	mov	r1, r7
   d7770:	200a      	movs	r0, #10
		buf[0] = 0;
   d7772:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7776:	f7ff f953 	bl	d6a20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d777a:	4668      	mov	r0, sp
   d777c:	f001 fd26 	bl	d91cc <strlen>
   d7780:	6833      	ldr	r3, [r6, #0]
   d7782:	4602      	mov	r2, r0
   d7784:	68db      	ldr	r3, [r3, #12]
   d7786:	4669      	mov	r1, sp
   d7788:	4630      	mov	r0, r6
   d778a:	4798      	blx	r3
   d778c:	4604      	mov	r4, r0
    }
    return n;
}
   d778e:	4620      	mov	r0, r4
   d7790:	b00d      	add	sp, #52	; 0x34
   d7792:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7794 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7794:	b510      	push	{r4, lr}
   d7796:	4b05      	ldr	r3, [pc, #20]	; (d77ac <_ZN9IPAddressC1Ev+0x18>)
   d7798:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d779a:	2211      	movs	r2, #17
   d779c:	f840 3b04 	str.w	r3, [r0], #4
   d77a0:	2100      	movs	r1, #0
   d77a2:	f001 fcdd 	bl	d9160 <memset>
}
   d77a6:	4620      	mov	r0, r4
   d77a8:	bd10      	pop	{r4, pc}
   d77aa:	bf00      	nop
   d77ac:	000dc004 	.word	0x000dc004

000d77b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d77b0:	4603      	mov	r3, r0
   d77b2:	4a07      	ldr	r2, [pc, #28]	; (d77d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d77b4:	b510      	push	{r4, lr}
   d77b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d77ba:	f101 0210 	add.w	r2, r1, #16
   d77be:	f851 4b04 	ldr.w	r4, [r1], #4
   d77c2:	f843 4b04 	str.w	r4, [r3], #4
   d77c6:	4291      	cmp	r1, r2
   d77c8:	d1f9      	bne.n	d77be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d77ca:	780a      	ldrb	r2, [r1, #0]
   d77cc:	701a      	strb	r2, [r3, #0]
}
   d77ce:	bd10      	pop	{r4, pc}
   d77d0:	000dc004 	.word	0x000dc004

000d77d4 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d77d4:	7d03      	ldrb	r3, [r0, #20]
   d77d6:	2b04      	cmp	r3, #4
   d77d8:	d104      	bne.n	d77e4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d77da:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d77dc:	3800      	subs	r0, #0
   d77de:	bf18      	it	ne
   d77e0:	2001      	movne	r0, #1
   d77e2:	4770      	bx	lr
    } else if (version() == 6) {
   d77e4:	2b06      	cmp	r3, #6
   d77e6:	d107      	bne.n	d77f8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d77e8:	6843      	ldr	r3, [r0, #4]
   d77ea:	b93b      	cbnz	r3, d77fc <_ZNK9IPAddresscvbEv+0x28>
   d77ec:	6883      	ldr	r3, [r0, #8]
   d77ee:	b92b      	cbnz	r3, d77fc <_ZNK9IPAddresscvbEv+0x28>
   d77f0:	68c3      	ldr	r3, [r0, #12]
   d77f2:	b91b      	cbnz	r3, d77fc <_ZNK9IPAddresscvbEv+0x28>
   d77f4:	6900      	ldr	r0, [r0, #16]
   d77f6:	e7f1      	b.n	d77dc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d77f8:	2000      	movs	r0, #0
   d77fa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d77fc:	2001      	movs	r0, #1
}
   d77fe:	4770      	bx	lr

000d7800 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7800:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7802:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7806:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d780a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d780e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7812:	2304      	movs	r3, #4
   d7814:	6041      	str	r1, [r0, #4]
   d7816:	7503      	strb	r3, [r0, #20]
}
   d7818:	bd10      	pop	{r4, pc}
	...

000d781c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d781c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d781e:	4d04      	ldr	r5, [pc, #16]	; (d7830 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7820:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7822:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7826:	9500      	str	r5, [sp, #0]
   d7828:	f7ff ffea 	bl	d7800 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d782c:	b003      	add	sp, #12
   d782e:	bd30      	pop	{r4, r5, pc}
   d7830:	000dc004 	.word	0x000dc004

000d7834 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7834:	b513      	push	{r0, r1, r4, lr}
   d7836:	4b05      	ldr	r3, [pc, #20]	; (d784c <_ZN9IPAddressC1EPKh+0x18>)
   d7838:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d783a:	78cb      	ldrb	r3, [r1, #3]
   d783c:	9300      	str	r3, [sp, #0]
   d783e:	788b      	ldrb	r3, [r1, #2]
   d7840:	784a      	ldrb	r2, [r1, #1]
   d7842:	7809      	ldrb	r1, [r1, #0]
   d7844:	f7ff ffdc 	bl	d7800 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7848:	b002      	add	sp, #8
   d784a:	bd10      	pop	{r4, pc}
   d784c:	000dc004 	.word	0x000dc004

000d7850 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7850:	7441      	strb	r1, [r0, #17]
}
   d7852:	4770      	bx	lr

000d7854 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7854:	4770      	bx	lr

000d7856 <_ZN9USBSerial4readEv>:
{
   d7856:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7858:	2100      	movs	r1, #0
   d785a:	7c00      	ldrb	r0, [r0, #16]
   d785c:	f7ff fa20 	bl	d6ca0 <HAL_USB_USART_Receive_Data>
}
   d7860:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7864:	bd08      	pop	{r3, pc}

000d7866 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7866:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7868:	2101      	movs	r1, #1
   d786a:	7c00      	ldrb	r0, [r0, #16]
   d786c:	f7ff fa18 	bl	d6ca0 <HAL_USB_USART_Receive_Data>
}
   d7870:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7874:	bd08      	pop	{r3, pc}

000d7876 <_ZN9USBSerial17availableForWriteEv>:
{
   d7876:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7878:	7c00      	ldrb	r0, [r0, #16]
   d787a:	f7ff fa09 	bl	d6c90 <HAL_USB_USART_Available_Data_For_Write>
}
   d787e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7882:	bd08      	pop	{r3, pc}

000d7884 <_ZN9USBSerial9availableEv>:
{
   d7884:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7886:	7c00      	ldrb	r0, [r0, #16]
   d7888:	f7ff f9fa 	bl	d6c80 <HAL_USB_USART_Available_Data>
}
   d788c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7890:	bd08      	pop	{r3, pc}

000d7892 <_ZN9USBSerial5writeEh>:
{
   d7892:	b513      	push	{r0, r1, r4, lr}
   d7894:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7896:	7c00      	ldrb	r0, [r0, #16]
{
   d7898:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d789a:	f7ff f9f9 	bl	d6c90 <HAL_USB_USART_Available_Data_For_Write>
   d789e:	2800      	cmp	r0, #0
   d78a0:	9901      	ldr	r1, [sp, #4]
   d78a2:	dc01      	bgt.n	d78a8 <_ZN9USBSerial5writeEh+0x16>
   d78a4:	7c60      	ldrb	r0, [r4, #17]
   d78a6:	b120      	cbz	r0, d78b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d78a8:	7c20      	ldrb	r0, [r4, #16]
   d78aa:	f7ff fa01 	bl	d6cb0 <HAL_USB_USART_Send_Data>
   d78ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d78b2:	b002      	add	sp, #8
   d78b4:	bd10      	pop	{r4, pc}

000d78b6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d78b6:	7c00      	ldrb	r0, [r0, #16]
   d78b8:	f7ff ba02 	b.w	d6cc0 <HAL_USB_USART_Flush_Data>

000d78bc <_ZN9USBSerialD0Ev>:
   d78bc:	b510      	push	{r4, lr}
   d78be:	2114      	movs	r1, #20
   d78c0:	4604      	mov	r4, r0
   d78c2:	f000 fdec 	bl	d849e <_ZdlPvj>
   d78c6:	4620      	mov	r0, r4
   d78c8:	bd10      	pop	{r4, pc}
	...

000d78cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d78cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d78ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78d2:	4604      	mov	r4, r0
   d78d4:	4608      	mov	r0, r1
   d78d6:	2100      	movs	r1, #0
   d78d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78dc:	4b04      	ldr	r3, [pc, #16]	; (d78f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d78de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d78e0:	2301      	movs	r3, #1
  _serial = serial;
   d78e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d78e6:	4611      	mov	r1, r2
   d78e8:	f7ff f9ba 	bl	d6c60 <HAL_USB_USART_Init>
}
   d78ec:	4620      	mov	r0, r4
   d78ee:	bd10      	pop	{r4, pc}
   d78f0:	000dc018 	.word	0x000dc018

000d78f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d78f4:	7c00      	ldrb	r0, [r0, #16]
   d78f6:	2200      	movs	r2, #0
   d78f8:	f7ff b9ba 	b.w	d6c70 <HAL_USB_USART_Begin>

000d78fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d78fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d78fe:	2214      	movs	r2, #20
{
   d7900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7902:	2100      	movs	r1, #0
   d7904:	f001 fc2c 	bl	d9160 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7908:	4620      	mov	r0, r4
   d790a:	bd10      	pop	{r4, pc}

000d790c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d790c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d790e:	4c10      	ldr	r4, [pc, #64]	; (d7950 <_Z16_fetch_usbserialv+0x44>)
{
   d7910:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7912:	a803      	add	r0, sp, #12
   d7914:	f7ff fff2 	bl	d78fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7918:	7821      	ldrb	r1, [r4, #0]
   d791a:	f3bf 8f5b 	dmb	ish
   d791e:	f011 0101 	ands.w	r1, r1, #1
   d7922:	d111      	bne.n	d7948 <_Z16_fetch_usbserialv+0x3c>
   d7924:	4620      	mov	r0, r4
   d7926:	9101      	str	r1, [sp, #4]
   d7928:	f7fc fbc8 	bl	d40bc <__cxa_guard_acquire>
   d792c:	9901      	ldr	r1, [sp, #4]
   d792e:	b158      	cbz	r0, d7948 <_Z16_fetch_usbserialv+0x3c>
   d7930:	aa03      	add	r2, sp, #12
   d7932:	4808      	ldr	r0, [pc, #32]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d7934:	f7ff ffca 	bl	d78cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7938:	4620      	mov	r0, r4
   d793a:	f7fc fbc4 	bl	d40c6 <__cxa_guard_release>
   d793e:	4a06      	ldr	r2, [pc, #24]	; (d7958 <_Z16_fetch_usbserialv+0x4c>)
   d7940:	4906      	ldr	r1, [pc, #24]	; (d795c <_Z16_fetch_usbserialv+0x50>)
   d7942:	4804      	ldr	r0, [pc, #16]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d7944:	f000 fda6 	bl	d8494 <__aeabi_atexit>
	return _usbserial;
}
   d7948:	4802      	ldr	r0, [pc, #8]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d794a:	b008      	add	sp, #32
   d794c:	bd10      	pop	{r4, pc}
   d794e:	bf00      	nop
   d7950:	2003e690 	.word	0x2003e690
   d7954:	2003e694 	.word	0x2003e694
   d7958:	2003e500 	.word	0x2003e500
   d795c:	000d7855 	.word	0x000d7855

000d7960 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7960:	4770      	bx	lr

000d7962 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7962:	7441      	strb	r1, [r0, #17]
}
   d7964:	4770      	bx	lr

000d7966 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7966:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7968:	7c00      	ldrb	r0, [r0, #16]
   d796a:	f7ff f8a9 	bl	d6ac0 <hal_usart_available_data_for_write>
}
   d796e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7972:	bd08      	pop	{r3, pc}

000d7974 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7974:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7976:	7c00      	ldrb	r0, [r0, #16]
   d7978:	f7ff f87a 	bl	d6a70 <hal_usart_available>
}
   d797c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7980:	bd08      	pop	{r3, pc}

000d7982 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7982:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7984:	7c00      	ldrb	r0, [r0, #16]
   d7986:	f7ff f883 	bl	d6a90 <hal_usart_peek>
}
   d798a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d798e:	bd08      	pop	{r3, pc}

000d7990 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7990:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7992:	7c00      	ldrb	r0, [r0, #16]
   d7994:	f7ff f874 	bl	d6a80 <hal_usart_read>
}
   d7998:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d799c:	bd08      	pop	{r3, pc}

000d799e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d799e:	7c00      	ldrb	r0, [r0, #16]
   d79a0:	f7ff b87e 	b.w	d6aa0 <hal_usart_flush>

000d79a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d79a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79a6:	7c45      	ldrb	r5, [r0, #17]
{
   d79a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79aa:	b12d      	cbz	r5, d79b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d79ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d79ae:	b003      	add	sp, #12
   d79b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d79b4:	f7ff b854 	b.w	d6a60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79b8:	7c00      	ldrb	r0, [r0, #16]
   d79ba:	9101      	str	r1, [sp, #4]
   d79bc:	f7ff f880 	bl	d6ac0 <hal_usart_available_data_for_write>
   d79c0:	2800      	cmp	r0, #0
   d79c2:	9901      	ldr	r1, [sp, #4]
   d79c4:	dcf2      	bgt.n	d79ac <_ZN11USARTSerial5writeEh+0x8>
}
   d79c6:	4628      	mov	r0, r5
   d79c8:	b003      	add	sp, #12
   d79ca:	bd30      	pop	{r4, r5, pc}

000d79cc <_ZN11USARTSerialD0Ev>:
   d79cc:	b510      	push	{r4, lr}
   d79ce:	2114      	movs	r1, #20
   d79d0:	4604      	mov	r4, r0
   d79d2:	f000 fd64 	bl	d849e <_ZdlPvj>
   d79d6:	4620      	mov	r0, r4
   d79d8:	bd10      	pop	{r4, pc}
	...

000d79dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d79dc:	b510      	push	{r4, lr}
   d79de:	f04f 0c00 	mov.w	ip, #0
   d79e2:	4604      	mov	r4, r0
   d79e4:	4608      	mov	r0, r1
   d79e6:	4611      	mov	r1, r2
   d79e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d79ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d79f0:	4a04      	ldr	r2, [pc, #16]	; (d7a04 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d79f2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d79f4:	2201      	movs	r2, #1
  _serial = serial;
   d79f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d79f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d79fa:	461a      	mov	r2, r3
   d79fc:	f7ff f828 	bl	d6a50 <hal_usart_init>
}
   d7a00:	4620      	mov	r0, r4
   d7a02:	bd10      	pop	{r4, pc}
   d7a04:	000dc048 	.word	0x000dc048

000d7a08 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7a08:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7a0a:	4c0e      	ldr	r4, [pc, #56]	; (d7a44 <_Z22__fetch_global_Serial1v+0x3c>)
   d7a0c:	7821      	ldrb	r1, [r4, #0]
   d7a0e:	f3bf 8f5b 	dmb	ish
   d7a12:	f011 0101 	ands.w	r1, r1, #1
   d7a16:	d112      	bne.n	d7a3e <_Z22__fetch_global_Serial1v+0x36>
   d7a18:	4620      	mov	r0, r4
   d7a1a:	9101      	str	r1, [sp, #4]
   d7a1c:	f7fc fb4e 	bl	d40bc <__cxa_guard_acquire>
   d7a20:	9901      	ldr	r1, [sp, #4]
   d7a22:	b160      	cbz	r0, d7a3e <_Z22__fetch_global_Serial1v+0x36>
   d7a24:	4a08      	ldr	r2, [pc, #32]	; (d7a48 <_Z22__fetch_global_Serial1v+0x40>)
   d7a26:	4b09      	ldr	r3, [pc, #36]	; (d7a4c <_Z22__fetch_global_Serial1v+0x44>)
   d7a28:	4809      	ldr	r0, [pc, #36]	; (d7a50 <_Z22__fetch_global_Serial1v+0x48>)
   d7a2a:	f7ff ffd7 	bl	d79dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7a2e:	4620      	mov	r0, r4
   d7a30:	f7fc fb49 	bl	d40c6 <__cxa_guard_release>
   d7a34:	4a07      	ldr	r2, [pc, #28]	; (d7a54 <_Z22__fetch_global_Serial1v+0x4c>)
   d7a36:	4908      	ldr	r1, [pc, #32]	; (d7a58 <_Z22__fetch_global_Serial1v+0x50>)
   d7a38:	4805      	ldr	r0, [pc, #20]	; (d7a50 <_Z22__fetch_global_Serial1v+0x48>)
   d7a3a:	f000 fd2b 	bl	d8494 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7a3e:	4804      	ldr	r0, [pc, #16]	; (d7a50 <_Z22__fetch_global_Serial1v+0x48>)
   d7a40:	b002      	add	sp, #8
   d7a42:	bd10      	pop	{r4, pc}
   d7a44:	2003e6a8 	.word	0x2003e6a8
   d7a48:	2003e6ac 	.word	0x2003e6ac
   d7a4c:	2003e730 	.word	0x2003e730
   d7a50:	2003e7b4 	.word	0x2003e7b4
   d7a54:	2003e500 	.word	0x2003e500
   d7a58:	000d7961 	.word	0x000d7961

000d7a5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7a5c:	4770      	bx	lr

000d7a5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a60:	4606      	mov	r6, r0
   d7a62:	4615      	mov	r5, r2
   d7a64:	460c      	mov	r4, r1
   d7a66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a68:	42bc      	cmp	r4, r7
   d7a6a:	d006      	beq.n	d7a7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a6c:	6833      	ldr	r3, [r6, #0]
   d7a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a72:	689b      	ldr	r3, [r3, #8]
   d7a74:	4630      	mov	r0, r6
   d7a76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7a78:	e7f6      	b.n	d7a68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7a7a:	4628      	mov	r0, r5
   d7a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7a7e:	7c00      	ldrb	r0, [r0, #16]
   d7a80:	2200      	movs	r2, #0
   d7a82:	f7ff b845 	b.w	d6b10 <hal_i2c_write>

000d7a86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7a86:	7c00      	ldrb	r0, [r0, #16]
   d7a88:	2100      	movs	r1, #0
   d7a8a:	f7ff b849 	b.w	d6b20 <hal_i2c_available>

000d7a8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7a8e:	7c00      	ldrb	r0, [r0, #16]
   d7a90:	2100      	movs	r1, #0
   d7a92:	f7ff b84d 	b.w	d6b30 <hal_i2c_read>

000d7a96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7a96:	7c00      	ldrb	r0, [r0, #16]
   d7a98:	2100      	movs	r1, #0
   d7a9a:	f7ff b851 	b.w	d6b40 <hal_i2c_peek>

000d7a9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7a9e:	7c00      	ldrb	r0, [r0, #16]
   d7aa0:	2100      	movs	r1, #0
   d7aa2:	f7ff b855 	b.w	d6b50 <hal_i2c_flush>

000d7aa6 <_ZN7TwoWireD0Ev>:
   d7aa6:	b510      	push	{r4, lr}
   d7aa8:	2114      	movs	r1, #20
   d7aaa:	4604      	mov	r4, r0
   d7aac:	f000 fcf7 	bl	d849e <_ZdlPvj>
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	bd10      	pop	{r4, pc}

000d7ab4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7ab4:	b510      	push	{r4, lr}
   d7ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7aba:	4604      	mov	r4, r0
   d7abc:	4608      	mov	r0, r1
   d7abe:	2100      	movs	r1, #0
   d7ac0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7ac4:	4b03      	ldr	r3, [pc, #12]	; (d7ad4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7ac6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7ac8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7aca:	4611      	mov	r1, r2
   d7acc:	f7ff f850 	bl	d6b70 <hal_i2c_init>
}
   d7ad0:	4620      	mov	r0, r4
   d7ad2:	bd10      	pop	{r4, pc}
   d7ad4:	000dc078 	.word	0x000dc078

000d7ad8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7ad8:	7c00      	ldrb	r0, [r0, #16]
   d7ada:	2200      	movs	r2, #0
   d7adc:	f7fe bff8 	b.w	d6ad0 <hal_i2c_set_speed>

000d7ae0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	7c00      	ldrb	r0, [r0, #16]
   d7ae4:	461a      	mov	r2, r3
   d7ae6:	4619      	mov	r1, r3
   d7ae8:	f7fe bffa 	b.w	d6ae0 <hal_i2c_begin>

000d7aec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7aec:	7c00      	ldrb	r0, [r0, #16]
   d7aee:	2200      	movs	r2, #0
   d7af0:	f7fe bffe 	b.w	d6af0 <hal_i2c_begin_transmission>

000d7af4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7af4:	b2c9      	uxtb	r1, r1
   d7af6:	f7ff bff9 	b.w	d7aec <_ZN7TwoWire17beginTransmissionEh>

000d7afa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7afa:	7c00      	ldrb	r0, [r0, #16]
   d7afc:	2200      	movs	r2, #0
   d7afe:	f7fe bfff 	b.w	d6b00 <hal_i2c_end_transmission>

000d7b02 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7b02:	2101      	movs	r1, #1
   d7b04:	f7ff bff9 	b.w	d7afa <_ZN7TwoWire15endTransmissionEh>

000d7b08 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7b08:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7b0a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7b0c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7b10:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7b12:	2201      	movs	r2, #1
   d7b14:	f04f 33ff 	mov.w	r3, #4294967295
   d7b18:	f10d 0107 	add.w	r1, sp, #7
   d7b1c:	47a0      	blx	r4
}
   d7b1e:	b002      	add	sp, #8
   d7b20:	bd10      	pop	{r4, pc}

000d7b22 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7b22:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7b24:	6803      	ldr	r3, [r0, #0]
   d7b26:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7b28:	f04f 33ff 	mov.w	r3, #4294967295
   d7b2c:	46a4      	mov	ip, r4
}
   d7b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7b32:	4760      	bx	ip

000d7b34 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7b34:	b513      	push	{r0, r1, r4, lr}
   d7b36:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7b38:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7b3a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7b3e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7b40:	f10d 0107 	add.w	r1, sp, #7
   d7b44:	2201      	movs	r2, #1
   d7b46:	47a0      	blx	r4
}
   d7b48:	b002      	add	sp, #8
   d7b4a:	bd10      	pop	{r4, pc}

000d7b4c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7b4c:	4770      	bx	lr

000d7b4e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7b4e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7b50:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7b52:	681a      	ldr	r2, [r3, #0]
   d7b54:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7b56:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7b58:	da10      	bge.n	d7b7c <_ZN9TCPClient9connectedEv+0x2e>
   d7b5a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b5e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b62:	429a      	cmp	r2, r3
   d7b64:	d10a      	bne.n	d7b7c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7b66:	6803      	ldr	r3, [r0, #0]
   d7b68:	691b      	ldr	r3, [r3, #16]
   d7b6a:	4798      	blx	r3
        if (!rv) {
   d7b6c:	4604      	mov	r4, r0
   d7b6e:	b928      	cbnz	r0, d7b7c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7b70:	682b      	ldr	r3, [r5, #0]
   d7b72:	4628      	mov	r0, r5
   d7b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7b76:	4798      	blx	r3
        rv = available();
   d7b78:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7b7a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7b7c:	2001      	movs	r0, #1
   d7b7e:	e7fc      	b.n	d7b7a <_ZN9TCPClient9connectedEv+0x2c>

000d7b80 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7b80:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7b82:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7b84:	43c0      	mvns	r0, r0
   d7b86:	0fc0      	lsrs	r0, r0, #31
   d7b88:	4770      	bx	lr

000d7b8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7b8a:	4770      	bx	lr

000d7b8c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7b8c:	4b06      	ldr	r3, [pc, #24]	; (d7ba8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7b8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7b90:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7b92:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7b96:	d005      	beq.n	d7ba4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7b98:	4608      	mov	r0, r1
   d7b9a:	f000 fc85 	bl	d84a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7b9e:	2800      	cmp	r0, #0
	return nullptr;
   d7ba0:	bf08      	it	eq
   d7ba2:	2400      	moveq	r4, #0
      }
   d7ba4:	4620      	mov	r0, r4
   d7ba6:	bd10      	pop	{r4, pc}
   d7ba8:	000dbfc4 	.word	0x000dbfc4

000d7bac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7bac:	b510      	push	{r4, lr}
   d7bae:	21ac      	movs	r1, #172	; 0xac
   d7bb0:	4604      	mov	r4, r0
   d7bb2:	f000 fc74 	bl	d849e <_ZdlPvj>
   d7bb6:	4620      	mov	r0, r4
   d7bb8:	bd10      	pop	{r4, pc}

000d7bba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7bba:	f7fc ba70 	b.w	d409e <_ZdlPv>

000d7bbe <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7bc2:	f04f 0800 	mov.w	r8, #0
   d7bc6:	b086      	sub	sp, #24
   d7bc8:	461d      	mov	r5, r3
   d7bca:	f8c0 8004 	str.w	r8, [r0, #4]
   d7bce:	4604      	mov	r4, r0
   d7bd0:	460e      	mov	r6, r1
   d7bd2:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7bd4:	4641      	mov	r1, r8
   d7bd6:	2210      	movs	r2, #16
   d7bd8:	a802      	add	r0, sp, #8
   d7bda:	f001 fac1 	bl	d9160 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7bde:	1c6b      	adds	r3, r5, #1
   d7be0:	d009      	beq.n	d7bf6 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7be6:	fbb5 f3f0 	udiv	r3, r5, r0
   d7bea:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7bee:	fb00 5313 	mls	r3, r0, r3, r5
   d7bf2:	4358      	muls	r0, r3
   d7bf4:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7bf6:	6960      	ldr	r0, [r4, #20]
   d7bf8:	2310      	movs	r3, #16
   d7bfa:	9300      	str	r3, [sp, #0]
   d7bfc:	6800      	ldr	r0, [r0, #0]
   d7bfe:	ab02      	add	r3, sp, #8
   d7c00:	f241 0205 	movw	r2, #4101	; 0x1005
   d7c04:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c08:	f7fe ffba 	bl	d6b80 <sock_setsockopt>
    if (ret < 0) {
   d7c0c:	2800      	cmp	r0, #0
   d7c0e:	da07      	bge.n	d7c20 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7c10:	f7ff f942 	bl	d6e98 <__errno>
   d7c14:	6803      	ldr	r3, [r0, #0]
   d7c16:	6063      	str	r3, [r4, #4]
        return 0;
   d7c18:	2000      	movs	r0, #0
}
   d7c1a:	b006      	add	sp, #24
   d7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7c20:	6960      	ldr	r0, [r4, #20]
   d7c22:	2300      	movs	r3, #0
   d7c24:	6800      	ldr	r0, [r0, #0]
   d7c26:	463a      	mov	r2, r7
   d7c28:	4631      	mov	r1, r6
   d7c2a:	f7fe ffc9 	bl	d6bc0 <sock_send>
    if (ret < 0) {
   d7c2e:	1e03      	subs	r3, r0, #0
   d7c30:	dbee      	blt.n	d7c10 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7c32:	4618      	mov	r0, r3
   d7c34:	e7f1      	b.n	d7c1a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7c38 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7c38:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7c3a:	6984      	ldr	r4, [r0, #24]
   d7c3c:	4b0a      	ldr	r3, [pc, #40]	; (d7c68 <_ZN9TCPClientD1Ev+0x30>)
   d7c3e:	6003      	str	r3, [r0, #0]
   d7c40:	4605      	mov	r5, r0
   d7c42:	b17c      	cbz	r4, d7c64 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7c44:	6863      	ldr	r3, [r4, #4]
   d7c46:	3b01      	subs	r3, #1
   d7c48:	6063      	str	r3, [r4, #4]
   d7c4a:	b95b      	cbnz	r3, d7c64 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7c4c:	6823      	ldr	r3, [r4, #0]
   d7c4e:	4620      	mov	r0, r4
   d7c50:	689b      	ldr	r3, [r3, #8]
   d7c52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7c54:	68a3      	ldr	r3, [r4, #8]
   d7c56:	3b01      	subs	r3, #1
   d7c58:	60a3      	str	r3, [r4, #8]
   d7c5a:	b91b      	cbnz	r3, d7c64 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7c5c:	6823      	ldr	r3, [r4, #0]
   d7c5e:	4620      	mov	r0, r4
   d7c60:	68db      	ldr	r3, [r3, #12]
   d7c62:	4798      	blx	r3
   d7c64:	4628      	mov	r0, r5
   d7c66:	bd38      	pop	{r3, r4, r5, pc}
   d7c68:	000dc0d4 	.word	0x000dc0d4

000d7c6c <_ZN9TCPClientD0Ev>:
   d7c6c:	b510      	push	{r4, lr}
   d7c6e:	4604      	mov	r4, r0
   d7c70:	f7ff ffe2 	bl	d7c38 <_ZN9TCPClientD1Ev>
   d7c74:	4620      	mov	r0, r4
   d7c76:	211c      	movs	r1, #28
   d7c78:	f000 fc11 	bl	d849e <_ZdlPvj>
   d7c7c:	4620      	mov	r0, r4
   d7c7e:	bd10      	pop	{r4, pc}

000d7c80 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7c80:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7c82:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7c84:	4b05      	ldr	r3, [pc, #20]	; (d7c9c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7c86:	4604      	mov	r4, r0
   d7c88:	358c      	adds	r5, #140	; 0x8c
   d7c8a:	f844 3b04 	str.w	r3, [r4], #4
   d7c8e:	4606      	mov	r6, r0
   d7c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c94:	682b      	ldr	r3, [r5, #0]
   d7c96:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7c98:	4630      	mov	r0, r6
   d7c9a:	bd70      	pop	{r4, r5, r6, pc}
   d7c9c:	000dc004 	.word	0x000dc004

000d7ca0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7ca0:	b510      	push	{r4, lr}
   d7ca2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7ca4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ca8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7cac:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7cae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7cb0:	d005      	beq.n	d7cbe <_ZN9TCPClient4peekEv+0x1e>
   d7cb2:	6963      	ldr	r3, [r4, #20]
   d7cb4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7cb8:	4413      	add	r3, r2
   d7cba:	7918      	ldrb	r0, [r3, #4]
}
   d7cbc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7cbe:	6803      	ldr	r3, [r0, #0]
   d7cc0:	691b      	ldr	r3, [r3, #16]
   d7cc2:	4798      	blx	r3
   d7cc4:	2800      	cmp	r0, #0
   d7cc6:	d1f4      	bne.n	d7cb2 <_ZN9TCPClient4peekEv+0x12>
   d7cc8:	f04f 30ff 	mov.w	r0, #4294967295
   d7ccc:	e7f6      	b.n	d7cbc <_ZN9TCPClient4peekEv+0x1c>

000d7cce <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7cce:	b510      	push	{r4, lr}
   d7cd0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cd2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7cd6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7cda:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7cdc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cde:	d008      	beq.n	d7cf2 <_ZN9TCPClient4readEv+0x24>
   d7ce0:	6963      	ldr	r3, [r4, #20]
   d7ce2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7ce6:	1c51      	adds	r1, r2, #1
   d7ce8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7cec:	4413      	add	r3, r2
   d7cee:	7918      	ldrb	r0, [r3, #4]
}
   d7cf0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cf2:	6803      	ldr	r3, [r0, #0]
   d7cf4:	691b      	ldr	r3, [r3, #16]
   d7cf6:	4798      	blx	r3
   d7cf8:	2800      	cmp	r0, #0
   d7cfa:	d1f1      	bne.n	d7ce0 <_ZN9TCPClient4readEv+0x12>
   d7cfc:	f04f 30ff 	mov.w	r0, #4294967295
   d7d00:	e7f6      	b.n	d7cf0 <_ZN9TCPClient4readEv+0x22>

000d7d02 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d04:	6943      	ldr	r3, [r0, #20]
   d7d06:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7d08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d10:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d12:	4605      	mov	r5, r0
   d7d14:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7d16:	d016      	beq.n	d7d46 <_ZN9TCPClient4readEPhj+0x44>
   d7d18:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7d1a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7d1e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7d22:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7d24:	42bc      	cmp	r4, r7
   d7d26:	bf28      	it	cs
   d7d28:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7d2a:	3304      	adds	r3, #4
   d7d2c:	4622      	mov	r2, r4
   d7d2e:	4419      	add	r1, r3
   d7d30:	4630      	mov	r0, r6
   d7d32:	f001 fa07 	bl	d9144 <memcpy>
   d7d36:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7d38:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d3c:	4423      	add	r3, r4
   d7d3e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7d42:	4620      	mov	r0, r4
   d7d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7d46:	6803      	ldr	r3, [r0, #0]
   d7d48:	691b      	ldr	r3, [r3, #16]
   d7d4a:	4798      	blx	r3
   d7d4c:	2800      	cmp	r0, #0
   d7d4e:	d1e3      	bne.n	d7d18 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7d50:	f04f 34ff 	mov.w	r4, #4294967295
   d7d54:	e7f5      	b.n	d7d42 <_ZN9TCPClient4readEPhj+0x40>

000d7d56 <_ZN9TCPClient12flush_bufferEv>:
   d7d56:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7d58:	2300      	movs	r3, #0
   d7d5a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7d5e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7d60:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7d64:	4770      	bx	lr

000d7d66 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d6a:	461f      	mov	r7, r3
    stop();
   d7d6c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d6e:	460c      	mov	r4, r1
    stop();
   d7d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d72:	b08a      	sub	sp, #40	; 0x28
   d7d74:	4605      	mov	r5, r0
   d7d76:	4616      	mov	r6, r2
    stop();
   d7d78:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7d7a:	7d23      	ldrb	r3, [r4, #20]
   d7d7c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7d80:	2b04      	cmp	r3, #4
   d7d82:	bf0c      	ite	eq
   d7d84:	2002      	moveq	r0, #2
   d7d86:	200a      	movne	r0, #10
   d7d88:	2206      	movs	r2, #6
   d7d8a:	2101      	movs	r1, #1
   d7d8c:	f7fe ff20 	bl	d6bd0 <sock_socket>
   d7d90:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7d94:	696b      	ldr	r3, [r5, #20]
   d7d96:	681b      	ldr	r3, [r3, #0]
   d7d98:	2b00      	cmp	r3, #0
   d7d9a:	da08      	bge.n	d7dae <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7d9c:	682b      	ldr	r3, [r5, #0]
   d7d9e:	4628      	mov	r0, r5
   d7da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7da2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7da4:	4798      	blx	r3
}
   d7da6:	4620      	mov	r0, r4
   d7da8:	b00a      	add	sp, #40	; 0x28
   d7daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7dae:	4628      	mov	r0, r5
   d7db0:	f7ff ffd1 	bl	d7d56 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7db4:	b1b7      	cbz	r7, d7de4 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7db6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7db8:	a903      	add	r1, sp, #12
   d7dba:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7dbc:	9303      	str	r3, [sp, #12]
   d7dbe:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7dc2:	f7fe fddd 	bl	d6980 <if_index_to_name>
   d7dc6:	2800      	cmp	r0, #0
   d7dc8:	d1e8      	bne.n	d7d9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7dca:	6968      	ldr	r0, [r5, #20]
   d7dcc:	2306      	movs	r3, #6
   d7dce:	9300      	str	r3, [sp, #0]
   d7dd0:	6800      	ldr	r0, [r0, #0]
   d7dd2:	ab03      	add	r3, sp, #12
   d7dd4:	f241 020b 	movw	r2, #4107	; 0x100b
   d7dd8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7ddc:	f7fe fed0 	bl	d6b80 <sock_setsockopt>
   d7de0:	2800      	cmp	r0, #0
   d7de2:	d1db      	bne.n	d7d9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7de4:	221c      	movs	r2, #28
   d7de6:	2100      	movs	r1, #0
   d7de8:	a803      	add	r0, sp, #12
   d7dea:	f001 f9b9 	bl	d9160 <memset>
    if (ip.version() == 4) {
   d7dee:	7d23      	ldrb	r3, [r4, #20]
   d7df0:	2b04      	cmp	r3, #4
   d7df2:	d11d      	bne.n	d7e30 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7df4:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7df8:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7dfa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7dfe:	f7fe fe1f 	bl	d6a40 <inet_htons>
   d7e02:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7e06:	6860      	ldr	r0, [r4, #4]
   d7e08:	f7fe fe12 	bl	d6a30 <inet_htonl>
   d7e0c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7e0e:	696b      	ldr	r3, [r5, #20]
   d7e10:	221c      	movs	r2, #28
   d7e12:	6818      	ldr	r0, [r3, #0]
   d7e14:	a903      	add	r1, sp, #12
   d7e16:	f7fe fec3 	bl	d6ba0 <sock_connect>
   d7e1a:	2800      	cmp	r0, #0
   d7e1c:	d1be      	bne.n	d7d9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7e1e:	3404      	adds	r4, #4
   d7e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7e22:	696d      	ldr	r5, [r5, #20]
   d7e24:	358c      	adds	r5, #140	; 0x8c
   d7e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7e28:	6823      	ldr	r3, [r4, #0]
   d7e2a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7e2c:	2401      	movs	r4, #1
   d7e2e:	e7ba      	b.n	d7da6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7e30:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7e34:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7e36:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7e3a:	f7fe fe01 	bl	d6a40 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7e3e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7e40:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7e44:	1d23      	adds	r3, r4, #4
   d7e46:	f104 0714 	add.w	r7, r4, #20
   d7e4a:	6818      	ldr	r0, [r3, #0]
   d7e4c:	6859      	ldr	r1, [r3, #4]
   d7e4e:	4632      	mov	r2, r6
   d7e50:	c203      	stmia	r2!, {r0, r1}
   d7e52:	3308      	adds	r3, #8
   d7e54:	42bb      	cmp	r3, r7
   d7e56:	4616      	mov	r6, r2
   d7e58:	d1f7      	bne.n	d7e4a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7e5a:	e7d8      	b.n	d7e0e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7e5c <_ZN9TCPClient9availableEv>:
{
   d7e5c:	b530      	push	{r4, r5, lr}
   d7e5e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7e60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7e64:	b08b      	sub	sp, #44	; 0x2c
   d7e66:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7e68:	b12b      	cbz	r3, d7e76 <_ZN9TCPClient9availableEv+0x1a>
   d7e6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7e6e:	429a      	cmp	r2, r3
   d7e70:	d101      	bne.n	d7e76 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7e72:	f7ff ff70 	bl	d7d56 <_ZN9TCPClient12flush_bufferEv>
   d7e76:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7e78:	6808      	ldr	r0, [r1, #0]
   d7e7a:	2800      	cmp	r0, #0
   d7e7c:	db18      	blt.n	d7eb0 <_ZN9TCPClient9availableEv+0x54>
   d7e7e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7e82:	2d7f      	cmp	r5, #127	; 0x7f
   d7e84:	d814      	bhi.n	d7eb0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7e86:	3104      	adds	r1, #4
   d7e88:	2308      	movs	r3, #8
   d7e8a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7e8e:	4429      	add	r1, r5
   d7e90:	f7fe fe8e 	bl	d6bb0 <sock_recv>
            if (ret > 0) {
   d7e94:	2800      	cmp	r0, #0
   d7e96:	dd13      	ble.n	d7ec0 <_ZN9TCPClient9availableEv+0x64>
   d7e98:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7e9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e9e:	b90a      	cbnz	r2, d7ea4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7ea0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7ea4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7ea6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7eaa:	4410      	add	r0, r2
   d7eac:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7eb0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7eb2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7eb6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7eba:	1ac0      	subs	r0, r0, r3
   d7ebc:	b00b      	add	sp, #44	; 0x2c
   d7ebe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7ec0:	f7fe ffea 	bl	d6e98 <__errno>
   d7ec4:	6803      	ldr	r3, [r0, #0]
   d7ec6:	2b0b      	cmp	r3, #11
   d7ec8:	d0f2      	beq.n	d7eb0 <_ZN9TCPClient9availableEv+0x54>
   d7eca:	f7fe ffe5 	bl	d6e98 <__errno>
   d7ece:	6803      	ldr	r3, [r0, #0]
   d7ed0:	2b0b      	cmp	r3, #11
   d7ed2:	d0ed      	beq.n	d7eb0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7ed4:	2320      	movs	r3, #32
   d7ed6:	2500      	movs	r5, #0
   d7ed8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7edc:	f7fe ffdc 	bl	d6e98 <__errno>
   d7ee0:	6803      	ldr	r3, [r0, #0]
   d7ee2:	9301      	str	r3, [sp, #4]
   d7ee4:	4b08      	ldr	r3, [pc, #32]	; (d7f08 <_ZN9TCPClient9availableEv+0xac>)
   d7ee6:	4909      	ldr	r1, [pc, #36]	; (d7f0c <_ZN9TCPClient9availableEv+0xb0>)
   d7ee8:	9300      	str	r3, [sp, #0]
   d7eea:	aa02      	add	r2, sp, #8
   d7eec:	462b      	mov	r3, r5
   d7eee:	2032      	movs	r0, #50	; 0x32
   d7ef0:	f7fe fef6 	bl	d6ce0 <log_message>
                    sock_close(d_->sock);
   d7ef4:	6963      	ldr	r3, [r4, #20]
   d7ef6:	6818      	ldr	r0, [r3, #0]
   d7ef8:	f7fe fe4a 	bl	d6b90 <sock_close>
   d7efc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7efe:	f04f 32ff 	mov.w	r2, #4294967295
   d7f02:	601a      	str	r2, [r3, #0]
   d7f04:	e7d4      	b.n	d7eb0 <_ZN9TCPClient9availableEv+0x54>
   d7f06:	bf00      	nop
   d7f08:	000dc09f 	.word	0x000dc09f
   d7f0c:	000dc098 	.word	0x000dc098

000d7f10 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7f10:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7f12:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7f14:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7f16:	6818      	ldr	r0, [r3, #0]
   d7f18:	2800      	cmp	r0, #0
   d7f1a:	db01      	blt.n	d7f20 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7f1c:	f7fe fe38 	bl	d6b90 <sock_close>
   d7f20:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7f22:	f04f 32ff 	mov.w	r2, #4294967295
   d7f26:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7f28:	6960      	ldr	r0, [r4, #20]
   d7f2a:	2211      	movs	r2, #17
   d7f2c:	2100      	movs	r1, #0
   d7f2e:	308c      	adds	r0, #140	; 0x8c
   d7f30:	f001 f916 	bl	d9160 <memset>
    flush_buffer();
   d7f34:	4620      	mov	r0, r4
}
   d7f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7f3a:	f7ff bf0c 	b.w	d7d56 <_ZN9TCPClient12flush_bufferEv>

000d7f3e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7f3e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7f40:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7f42:	4604      	mov	r4, r0
          total(0) {
   d7f44:	6001      	str	r1, [r0, #0]
   d7f46:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7f4a:	3088      	adds	r0, #136	; 0x88
   d7f4c:	f7ff fc22 	bl	d7794 <_ZN9IPAddressC1Ev>
}
   d7f50:	4620      	mov	r0, r4
   d7f52:	bd10      	pop	{r4, pc}

000d7f54 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7f56:	2300      	movs	r3, #0
   d7f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7f5c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7f60:	4a0e      	ldr	r2, [pc, #56]	; (d7f9c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7f62:	6103      	str	r3, [r0, #16]
   d7f64:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7f66:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7f68:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7f6a:	20ac      	movs	r0, #172	; 0xac
   d7f6c:	9101      	str	r1, [sp, #4]
   d7f6e:	f7fc f892 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7f72:	1e05      	subs	r5, r0, #0
   d7f74:	f105 060c 	add.w	r6, r5, #12
   d7f78:	d008      	beq.n	d7f8c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7f7a:	2301      	movs	r3, #1
   d7f7c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7f80:	4b07      	ldr	r3, [pc, #28]	; (d7fa0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7f82:	9901      	ldr	r1, [sp, #4]
   d7f84:	602b      	str	r3, [r5, #0]
   d7f86:	4630      	mov	r0, r6
   d7f88:	f7ff ffd9 	bl	d7f3e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7f8c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7f8e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7f92:	f7ff fee0 	bl	d7d56 <_ZN9TCPClient12flush_bufferEv>
}
   d7f96:	b002      	add	sp, #8
   d7f98:	bd70      	pop	{r4, r5, r6, pc}
   d7f9a:	bf00      	nop
   d7f9c:	000dc0d4 	.word	0x000dc0d4
   d7fa0:	000dc0b8 	.word	0x000dc0b8

000d7fa4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7fa4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7fa6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7faa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7fac:	f7ff ffd2 	bl	d7f54 <_ZN9TCPClientC1Ei>
}
   d7fb0:	4620      	mov	r0, r4
   d7fb2:	bd10      	pop	{r4, pc}

000d7fb4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7fb4:	b510      	push	{r4, lr}
   d7fb6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7fb8:	6800      	ldr	r0, [r0, #0]
   d7fba:	2800      	cmp	r0, #0
   d7fbc:	db01      	blt.n	d7fc2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7fbe:	f7fe fde7 	bl	d6b90 <sock_close>
    }
}
   d7fc2:	4620      	mov	r0, r4
   d7fc4:	bd10      	pop	{r4, pc}

000d7fc6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7fc6:	300c      	adds	r0, #12
   d7fc8:	f7ff bff4 	b.w	d7fb4 <_ZN9TCPClient4DataD1Ev>

000d7fcc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7fd0:	4698      	mov	r8, r3
    stop();
   d7fd2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7fd4:	b093      	sub	sp, #76	; 0x4c
   d7fd6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7fd8:	2400      	movs	r4, #0
    stop();
   d7fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7fdc:	4606      	mov	r6, r0
   d7fde:	4617      	mov	r7, r2
    stop();
   d7fe0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7fe2:	4628      	mov	r0, r5
   d7fe4:	466b      	mov	r3, sp
   d7fe6:	4622      	mov	r2, r4
   d7fe8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7fea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7fec:	f7fe fc80 	bl	d68f0 <netdb_getaddrinfo>
   d7ff0:	4605      	mov	r5, r0
   d7ff2:	2800      	cmp	r0, #0
   d7ff4:	d163      	bne.n	d80be <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7ff6:	9b00      	ldr	r3, [sp, #0]
   d7ff8:	2b00      	cmp	r3, #0
   d7ffa:	d04b      	beq.n	d8094 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7ffc:	695b      	ldr	r3, [r3, #20]
   d7ffe:	2b00      	cmp	r3, #0
   d8000:	d048      	beq.n	d8094 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8002:	a806      	add	r0, sp, #24
   d8004:	f7ff fbc6 	bl	d7794 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8008:	9b00      	ldr	r3, [sp, #0]
   d800a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d800c:	7863      	ldrb	r3, [r4, #1]
   d800e:	2b02      	cmp	r3, #2
   d8010:	d104      	bne.n	d801c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8012:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8014:	a806      	add	r0, sp, #24
   d8016:	f7ff f869 	bl	d70ec <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d801a:	e026      	b.n	d806a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d801c:	2b0a      	cmp	r3, #10
   d801e:	d124      	bne.n	d806a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8020:	2211      	movs	r2, #17
   d8022:	4629      	mov	r1, r5
   d8024:	a801      	add	r0, sp, #4
   d8026:	f001 f89b 	bl	d9160 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d802a:	68a3      	ldr	r3, [r4, #8]
   d802c:	2b00      	cmp	r3, #0
   d802e:	d038      	beq.n	d80a2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8030:	f104 0308 	add.w	r3, r4, #8
   d8034:	f10d 0c04 	add.w	ip, sp, #4
   d8038:	3418      	adds	r4, #24
   d803a:	6818      	ldr	r0, [r3, #0]
   d803c:	6859      	ldr	r1, [r3, #4]
   d803e:	4662      	mov	r2, ip
   d8040:	c203      	stmia	r2!, {r0, r1}
   d8042:	3308      	adds	r3, #8
   d8044:	42a3      	cmp	r3, r4
   d8046:	4694      	mov	ip, r2
   d8048:	d1f7      	bne.n	d803a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d804a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d804c:	a901      	add	r1, sp, #4
   d804e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8050:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8054:	f7ff fbac 	bl	d77b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8058:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d805c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8060:	ac07      	add	r4, sp, #28
   d8062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8064:	f8dc 3000 	ldr.w	r3, [ip]
   d8068:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d806a:	a806      	add	r0, sp, #24
   d806c:	f7ff fbb2 	bl	d77d4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8070:	b180      	cbz	r0, d8094 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8072:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8074:	ad07      	add	r5, sp, #28
   d8076:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d807a:	4b12      	ldr	r3, [pc, #72]	; (d80c4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d807c:	930c      	str	r3, [sp, #48]	; 0x30
   d807e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8080:	ac0d      	add	r4, sp, #52	; 0x34
   d8082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8084:	682b      	ldr	r3, [r5, #0]
   d8086:	7023      	strb	r3, [r4, #0]
   d8088:	463a      	mov	r2, r7
   d808a:	4643      	mov	r3, r8
   d808c:	a90c      	add	r1, sp, #48	; 0x30
   d808e:	4630      	mov	r0, r6
   d8090:	47c8      	blx	r9
   d8092:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8094:	9800      	ldr	r0, [sp, #0]
   d8096:	f7fe fc23 	bl	d68e0 <netdb_freeaddrinfo>
}
   d809a:	4628      	mov	r0, r5
   d809c:	b013      	add	sp, #76	; 0x4c
   d809e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d80a2:	68e3      	ldr	r3, [r4, #12]
   d80a4:	2b00      	cmp	r3, #0
   d80a6:	d1c3      	bne.n	d8030 <_ZN9TCPClient7connectEPKctm+0x64>
   d80a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d80ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d80b0:	f7fe fcbe 	bl	d6a30 <inet_htonl>
   d80b4:	4581      	cmp	r9, r0
   d80b6:	d1bb      	bne.n	d8030 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d80b8:	f104 0114 	add.w	r1, r4, #20
   d80bc:	e7aa      	b.n	d8014 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d80be:	4625      	mov	r5, r4
   d80c0:	e7e8      	b.n	d8094 <_ZN9TCPClient7connectEPKctm+0xc8>
   d80c2:	bf00      	nop
   d80c4:	000dc004 	.word	0x000dc004

000d80c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d80c8:	2200      	movs	r2, #0
   d80ca:	6840      	ldr	r0, [r0, #4]
   d80cc:	4611      	mov	r1, r2
   d80ce:	f7fe be53 	b.w	d6d78 <network_ready>

000d80d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d80d2:	2200      	movs	r2, #0
   d80d4:	6840      	ldr	r0, [r0, #4]
   d80d6:	4611      	mov	r1, r2
   d80d8:	f7fe be6e 	b.w	d6db8 <network_listening>

000d80dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d80dc:	2200      	movs	r2, #0
   d80de:	6840      	ldr	r0, [r0, #4]
   d80e0:	4611      	mov	r1, r2
   d80e2:	f7fe be79 	b.w	d6dd8 <network_get_listen_timeout>

000d80e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d80e6:	6840      	ldr	r0, [r0, #4]
   d80e8:	2200      	movs	r2, #0
   d80ea:	f7fe be6d 	b.w	d6dc8 <network_set_listen_timeout>

000d80ee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d80ee:	6840      	ldr	r0, [r0, #4]
   d80f0:	2200      	movs	r2, #0
   d80f2:	f081 0101 	eor.w	r1, r1, #1
   d80f6:	f7fe be57 	b.w	d6da8 <network_listen>

000d80fa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d80fa:	2300      	movs	r3, #0
   d80fc:	6840      	ldr	r0, [r0, #4]
   d80fe:	461a      	mov	r2, r3
   d8100:	4619      	mov	r1, r3
   d8102:	f7fe be49 	b.w	d6d98 <network_off>

000d8106 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8106:	2200      	movs	r2, #0
   d8108:	6840      	ldr	r0, [r0, #4]
   d810a:	4611      	mov	r1, r2
   d810c:	f7fe be24 	b.w	d6d58 <network_connecting>

000d8110 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8110:	6840      	ldr	r0, [r0, #4]
   d8112:	2200      	movs	r2, #0
   d8114:	2102      	movs	r1, #2
   d8116:	f7fe be27 	b.w	d6d68 <network_disconnect>

000d811a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d811a:	2300      	movs	r3, #0
   d811c:	6840      	ldr	r0, [r0, #4]
   d811e:	461a      	mov	r2, r3
   d8120:	f7fe be12 	b.w	d6d48 <network_connect>

000d8124 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8124:	4b02      	ldr	r3, [pc, #8]	; (d8130 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8126:	2204      	movs	r2, #4
   d8128:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d812a:	4a02      	ldr	r2, [pc, #8]	; (d8134 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d812c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d812e:	4770      	bx	lr
   d8130:	2003e7c8 	.word	0x2003e7c8
   d8134:	000dc120 	.word	0x000dc120

000d8138 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8138:	2300      	movs	r3, #0
   d813a:	6840      	ldr	r0, [r0, #4]
   d813c:	461a      	mov	r2, r3
   d813e:	f7fe be03 	b.w	d6d48 <network_connect>

000d8142 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8142:	6840      	ldr	r0, [r0, #4]
   d8144:	2200      	movs	r2, #0
   d8146:	2102      	movs	r1, #2
   d8148:	f7fe be0e 	b.w	d6d68 <network_disconnect>

000d814c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d814c:	2200      	movs	r2, #0
   d814e:	6840      	ldr	r0, [r0, #4]
   d8150:	4611      	mov	r1, r2
   d8152:	f7fe be01 	b.w	d6d58 <network_connecting>

000d8156 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8156:	2200      	movs	r2, #0
   d8158:	6840      	ldr	r0, [r0, #4]
   d815a:	4611      	mov	r1, r2
   d815c:	f7fe be0c 	b.w	d6d78 <network_ready>

000d8160 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8160:	2300      	movs	r3, #0
   d8162:	6840      	ldr	r0, [r0, #4]
   d8164:	461a      	mov	r2, r3
   d8166:	4619      	mov	r1, r3
   d8168:	f7fe be0e 	b.w	d6d88 <network_on>

000d816c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d816c:	2300      	movs	r3, #0
   d816e:	6840      	ldr	r0, [r0, #4]
   d8170:	461a      	mov	r2, r3
   d8172:	4619      	mov	r1, r3
   d8174:	f7fe be10 	b.w	d6d98 <network_off>

000d8178 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8178:	6840      	ldr	r0, [r0, #4]
   d817a:	2100      	movs	r1, #0
   d817c:	f7fe be34 	b.w	d6de8 <network_is_on>

000d8180 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8180:	6840      	ldr	r0, [r0, #4]
   d8182:	2100      	movs	r1, #0
   d8184:	f7fe be38 	b.w	d6df8 <network_is_off>

000d8188 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8188:	6840      	ldr	r0, [r0, #4]
   d818a:	2200      	movs	r2, #0
   d818c:	f081 0101 	eor.w	r1, r1, #1
   d8190:	f7fe be0a 	b.w	d6da8 <network_listen>

000d8194 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8194:	6840      	ldr	r0, [r0, #4]
   d8196:	2200      	movs	r2, #0
   d8198:	f7fe be16 	b.w	d6dc8 <network_set_listen_timeout>

000d819c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d819c:	2200      	movs	r2, #0
   d819e:	6840      	ldr	r0, [r0, #4]
   d81a0:	4611      	mov	r1, r2
   d81a2:	f7fe be19 	b.w	d6dd8 <network_get_listen_timeout>

000d81a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d81a6:	2200      	movs	r2, #0
   d81a8:	6840      	ldr	r0, [r0, #4]
   d81aa:	4611      	mov	r1, r2
   d81ac:	f7fe be04 	b.w	d6db8 <network_listening>

000d81b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d81b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d81b4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d81b6:	b095      	sub	sp, #84	; 0x54
   d81b8:	4616      	mov	r6, r2
   d81ba:	460d      	mov	r5, r1
   d81bc:	4607      	mov	r7, r0
    IPAddress addr;
   d81be:	f7ff fae9 	bl	d7794 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d81c2:	4621      	mov	r1, r4
   d81c4:	2218      	movs	r2, #24
   d81c6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d81c8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d81ca:	f000 ffc9 	bl	d9160 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d81ce:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d81d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d81d4:	4621      	mov	r1, r4
   d81d6:	466b      	mov	r3, sp
   d81d8:	aa0c      	add	r2, sp, #48	; 0x30
   d81da:	4630      	mov	r0, r6
   d81dc:	f7fe fb88 	bl	d68f0 <netdb_getaddrinfo>
    if (!r) {
   d81e0:	4604      	mov	r4, r0
   d81e2:	2800      	cmp	r0, #0
   d81e4:	d14c      	bne.n	d8280 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d81e6:	4602      	mov	r2, r0
   d81e8:	2101      	movs	r1, #1
   d81ea:	6868      	ldr	r0, [r5, #4]
   d81ec:	f7fe fdc4 	bl	d6d78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d81f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81f4:	4622      	mov	r2, r4
   d81f6:	6868      	ldr	r0, [r5, #4]
   d81f8:	f7fe fdbe 	bl	d6d78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d81fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81fe:	4681      	mov	r9, r0
        bool ok = false;
   d8200:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8202:	2e00      	cmp	r6, #0
   d8204:	d03c      	beq.n	d8280 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8206:	2900      	cmp	r1, #0
   d8208:	d13a      	bne.n	d8280 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d820a:	6873      	ldr	r3, [r6, #4]
   d820c:	2b02      	cmp	r3, #2
   d820e:	d003      	beq.n	d8218 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8210:	2b0a      	cmp	r3, #10
   d8212:	d011      	beq.n	d8238 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8214:	69f6      	ldr	r6, [r6, #28]
   d8216:	e7f4      	b.n	d8202 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8218:	f1b8 0f00 	cmp.w	r8, #0
   d821c:	d00a      	beq.n	d8234 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d821e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8220:	a806      	add	r0, sp, #24
   d8222:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8224:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8226:	f7ff fb05 	bl	d7834 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d822a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d822c:	1d3c      	adds	r4, r7, #4
   d822e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8230:	682b      	ldr	r3, [r5, #0]
   d8232:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8234:	4641      	mov	r1, r8
   d8236:	e7ed      	b.n	d8214 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8238:	f1b9 0f00 	cmp.w	r9, #0
   d823c:	d101      	bne.n	d8242 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d823e:	4649      	mov	r1, r9
   d8240:	e7e8      	b.n	d8214 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8242:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8244:	2210      	movs	r2, #16
   d8246:	a801      	add	r0, sp, #4
   d8248:	f000 ff8a 	bl	d9160 <memset>
                    a.v = 6;
   d824c:	2306      	movs	r3, #6
   d824e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8252:	ad01      	add	r5, sp, #4
   d8254:	f104 0308 	add.w	r3, r4, #8
   d8258:	3418      	adds	r4, #24
   d825a:	6818      	ldr	r0, [r3, #0]
   d825c:	6859      	ldr	r1, [r3, #4]
   d825e:	462a      	mov	r2, r5
   d8260:	c203      	stmia	r2!, {r0, r1}
   d8262:	3308      	adds	r3, #8
   d8264:	42a3      	cmp	r3, r4
   d8266:	4615      	mov	r5, r2
   d8268:	d1f7      	bne.n	d825a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d826a:	a901      	add	r1, sp, #4
   d826c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d826e:	ad07      	add	r5, sp, #28
   d8270:	f7ff fa9e 	bl	d77b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8276:	1d3c      	adds	r4, r7, #4
   d8278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d827a:	682b      	ldr	r3, [r5, #0]
   d827c:	7023      	strb	r3, [r4, #0]
   d827e:	e7de      	b.n	d823e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8280:	9800      	ldr	r0, [sp, #0]
   d8282:	f7fe fb2d 	bl	d68e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8286:	4638      	mov	r0, r7
   d8288:	b015      	add	sp, #84	; 0x54
   d828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8290 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8290:	4b02      	ldr	r3, [pc, #8]	; (d829c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8292:	4a03      	ldr	r2, [pc, #12]	; (d82a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8294:	601a      	str	r2, [r3, #0]
   d8296:	2200      	movs	r2, #0
   d8298:	605a      	str	r2, [r3, #4]

} // spark
   d829a:	4770      	bx	lr
   d829c:	2003e7d0 	.word	0x2003e7d0
   d82a0:	000dc15c 	.word	0x000dc15c

000d82a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d82a4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d82a6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d82a8:	d902      	bls.n	d82b0 <pinAvailable+0xc>
    return false;
   d82aa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d82ac:	b002      	add	sp, #8
   d82ae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d82b0:	f1a0 030b 	sub.w	r3, r0, #11
   d82b4:	2b02      	cmp	r3, #2
   d82b6:	d81a      	bhi.n	d82ee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d82b8:	4c17      	ldr	r4, [pc, #92]	; (d8318 <pinAvailable+0x74>)
   d82ba:	7821      	ldrb	r1, [r4, #0]
   d82bc:	f3bf 8f5b 	dmb	ish
   d82c0:	f011 0101 	ands.w	r1, r1, #1
   d82c4:	d10b      	bne.n	d82de <pinAvailable+0x3a>
   d82c6:	4620      	mov	r0, r4
   d82c8:	9101      	str	r1, [sp, #4]
   d82ca:	f7fb fef7 	bl	d40bc <__cxa_guard_acquire>
   d82ce:	9901      	ldr	r1, [sp, #4]
   d82d0:	b128      	cbz	r0, d82de <pinAvailable+0x3a>
   d82d2:	4812      	ldr	r0, [pc, #72]	; (d831c <pinAvailable+0x78>)
   d82d4:	f7fe fe34 	bl	d6f40 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d82d8:	4620      	mov	r0, r4
   d82da:	f7fb fef4 	bl	d40c6 <__cxa_guard_release>
   d82de:	4b0f      	ldr	r3, [pc, #60]	; (d831c <pinAvailable+0x78>)
   d82e0:	7818      	ldrb	r0, [r3, #0]
   d82e2:	f7fe fc95 	bl	d6c10 <hal_spi_is_enabled>
   d82e6:	2800      	cmp	r0, #0
   d82e8:	d1df      	bne.n	d82aa <pinAvailable+0x6>
  return true; // 'pin' is available
   d82ea:	2001      	movs	r0, #1
   d82ec:	e7de      	b.n	d82ac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d82ee:	2801      	cmp	r0, #1
   d82f0:	d809      	bhi.n	d8306 <pinAvailable+0x62>
   d82f2:	f000 f8a7 	bl	d8444 <_Z19__fetch_global_Wirev>
   d82f6:	2100      	movs	r1, #0
   d82f8:	7c00      	ldrb	r0, [r0, #16]
   d82fa:	f7fe fc31 	bl	d6b60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d82fe:	f080 0001 	eor.w	r0, r0, #1
   d8302:	b2c0      	uxtb	r0, r0
   d8304:	e7d2      	b.n	d82ac <pinAvailable+0x8>
   d8306:	3809      	subs	r0, #9
   d8308:	2801      	cmp	r0, #1
   d830a:	d8ee      	bhi.n	d82ea <pinAvailable+0x46>
   d830c:	f7ff fb7c 	bl	d7a08 <_Z22__fetch_global_Serial1v>
   d8310:	7c00      	ldrb	r0, [r0, #16]
   d8312:	f7fe fbcd 	bl	d6ab0 <hal_usart_is_enabled>
   d8316:	e7f2      	b.n	d82fe <pinAvailable+0x5a>
   d8318:	2003e648 	.word	0x2003e648
   d831c:	2003e64c 	.word	0x2003e64c

000d8320 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8320:	2823      	cmp	r0, #35	; 0x23
{
   d8322:	b538      	push	{r3, r4, r5, lr}
   d8324:	4604      	mov	r4, r0
   d8326:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8328:	d80a      	bhi.n	d8340 <pinMode+0x20>
   d832a:	29ff      	cmp	r1, #255	; 0xff
   d832c:	d008      	beq.n	d8340 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d832e:	f7ff ffb9 	bl	d82a4 <pinAvailable>
   d8332:	b128      	cbz	r0, d8340 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8334:	4629      	mov	r1, r5
   d8336:	4620      	mov	r0, r4
}
   d8338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d833c:	f7fe bae8 	b.w	d6910 <HAL_Pin_Mode>
}
   d8340:	bd38      	pop	{r3, r4, r5, pc}

000d8342 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8342:	b538      	push	{r3, r4, r5, lr}
   d8344:	4604      	mov	r4, r0
   d8346:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8348:	f7fe faea 	bl	d6920 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d834c:	28ff      	cmp	r0, #255	; 0xff
   d834e:	d010      	beq.n	d8372 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8350:	2806      	cmp	r0, #6
   d8352:	d804      	bhi.n	d835e <digitalWrite+0x1c>
   d8354:	234d      	movs	r3, #77	; 0x4d
   d8356:	fa23 f000 	lsr.w	r0, r3, r0
   d835a:	07c3      	lsls	r3, r0, #31
   d835c:	d409      	bmi.n	d8372 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d835e:	4620      	mov	r0, r4
   d8360:	f7ff ffa0 	bl	d82a4 <pinAvailable>
   d8364:	b128      	cbz	r0, d8372 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8366:	4629      	mov	r1, r5
   d8368:	4620      	mov	r0, r4
}
   d836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d836e:	f7fe badf 	b.w	d6930 <HAL_GPIO_Write>
}
   d8372:	bd38      	pop	{r3, r4, r5, pc}

000d8374 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8374:	b510      	push	{r4, lr}
   d8376:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8378:	f7fe fad2 	bl	d6920 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d837c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d837e:	b2db      	uxtb	r3, r3
   d8380:	2b01      	cmp	r3, #1
   d8382:	d908      	bls.n	d8396 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8384:	4620      	mov	r0, r4
   d8386:	f7ff ff8d 	bl	d82a4 <pinAvailable>
   d838a:	b120      	cbz	r0, d8396 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d838c:	4620      	mov	r0, r4
}
   d838e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8392:	f7fe bad5 	b.w	d6940 <HAL_GPIO_Read>
}
   d8396:	2000      	movs	r0, #0
   d8398:	bd10      	pop	{r4, pc}

000d839a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d839a:	280d      	cmp	r0, #13
{
   d839c:	b510      	push	{r4, lr}
   d839e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d83a0:	bf9c      	itt	ls
   d83a2:	340e      	addls	r4, #14
   d83a4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d83a6:	4620      	mov	r0, r4
   d83a8:	f7ff ff7c 	bl	d82a4 <pinAvailable>
   d83ac:	b150      	cbz	r0, d83c4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d83ae:	2103      	movs	r1, #3
   d83b0:	4620      	mov	r0, r4
   d83b2:	f7fe faa5 	bl	d6900 <HAL_Validate_Pin_Function>
   d83b6:	2803      	cmp	r0, #3
   d83b8:	d104      	bne.n	d83c4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d83ba:	4620      	mov	r0, r4
}
   d83bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d83c0:	f7fe bace 	b.w	d6960 <hal_adc_read>
}
   d83c4:	2000      	movs	r0, #0
   d83c6:	bd10      	pop	{r4, pc}

000d83c8 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d83c8:	b538      	push	{r3, r4, r5, lr}
   d83ca:	4604      	mov	r4, r0
   d83cc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d83ce:	f7ff ff69 	bl	d82a4 <pinAvailable>
   d83d2:	b1f0      	cbz	r0, d8412 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d83d4:	2104      	movs	r1, #4
   d83d6:	4620      	mov	r0, r4
   d83d8:	f7fe fa92 	bl	d6900 <HAL_Validate_Pin_Function>
   d83dc:	2804      	cmp	r0, #4
   d83de:	d105      	bne.n	d83ec <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d83e0:	b2a9      	uxth	r1, r5
   d83e2:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d83e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d83e8:	f7fe bab2 	b.w	d6950 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d83ec:	2102      	movs	r1, #2
   d83ee:	4620      	mov	r0, r4
   d83f0:	f7fe fa86 	bl	d6900 <HAL_Validate_Pin_Function>
   d83f4:	2802      	cmp	r0, #2
   d83f6:	d10c      	bne.n	d8412 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d83f8:	4620      	mov	r0, r4
   d83fa:	f7fe fa91 	bl	d6920 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d83fe:	2801      	cmp	r0, #1
   d8400:	d001      	beq.n	d8406 <_Z11analogWritetm+0x3e>
   d8402:	2804      	cmp	r0, #4
   d8404:	d105      	bne.n	d8412 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d8406:	4629      	mov	r1, r5
   d8408:	4620      	mov	r0, r4
}
   d840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d840e:	f7fe baaf 	b.w	d6970 <hal_pwm_write_ext>
}
   d8412:	bd38      	pop	{r3, r4, r5, pc}

000d8414 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8414:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8416:	2300      	movs	r3, #0
   d8418:	2520      	movs	r5, #32
   d841a:	8043      	strh	r3, [r0, #2]
   d841c:	2314      	movs	r3, #20
{
   d841e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8420:	8003      	strh	r3, [r0, #0]
   d8422:	6085      	str	r5, [r0, #8]
   d8424:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8426:	4906      	ldr	r1, [pc, #24]	; (d8440 <_Z17acquireWireBufferv+0x2c>)
   d8428:	4628      	mov	r0, r5
   d842a:	f000 f83a 	bl	d84a2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d842e:	4904      	ldr	r1, [pc, #16]	; (d8440 <_Z17acquireWireBufferv+0x2c>)
	};
   d8430:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8432:	4628      	mov	r0, r5
   d8434:	f000 f835 	bl	d84a2 <_ZnajRKSt9nothrow_t>
	};
   d8438:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d843a:	4620      	mov	r0, r4
   d843c:	bd38      	pop	{r3, r4, r5, pc}
   d843e:	bf00      	nop
   d8440:	000dc190 	.word	0x000dc190

000d8444 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8444:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8446:	4d0f      	ldr	r5, [pc, #60]	; (d8484 <_Z19__fetch_global_Wirev+0x40>)
   d8448:	7829      	ldrb	r1, [r5, #0]
   d844a:	f3bf 8f5b 	dmb	ish
   d844e:	f011 0401 	ands.w	r4, r1, #1
{
   d8452:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8454:	d113      	bne.n	d847e <_Z19__fetch_global_Wirev+0x3a>
   d8456:	4628      	mov	r0, r5
   d8458:	f7fb fe30 	bl	d40bc <__cxa_guard_acquire>
   d845c:	b178      	cbz	r0, d847e <_Z19__fetch_global_Wirev+0x3a>
   d845e:	a801      	add	r0, sp, #4
   d8460:	f7ff ffd8 	bl	d8414 <_Z17acquireWireBufferv>
   d8464:	aa01      	add	r2, sp, #4
   d8466:	4621      	mov	r1, r4
   d8468:	4807      	ldr	r0, [pc, #28]	; (d8488 <_Z19__fetch_global_Wirev+0x44>)
   d846a:	f7ff fb23 	bl	d7ab4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d846e:	4628      	mov	r0, r5
   d8470:	f7fb fe29 	bl	d40c6 <__cxa_guard_release>
   d8474:	4a05      	ldr	r2, [pc, #20]	; (d848c <_Z19__fetch_global_Wirev+0x48>)
   d8476:	4906      	ldr	r1, [pc, #24]	; (d8490 <_Z19__fetch_global_Wirev+0x4c>)
   d8478:	4803      	ldr	r0, [pc, #12]	; (d8488 <_Z19__fetch_global_Wirev+0x44>)
   d847a:	f000 f80b 	bl	d8494 <__aeabi_atexit>
	return wire;
}
   d847e:	4802      	ldr	r0, [pc, #8]	; (d8488 <_Z19__fetch_global_Wirev+0x44>)
   d8480:	b007      	add	sp, #28
   d8482:	bd30      	pop	{r4, r5, pc}
   d8484:	2003e7dc 	.word	0x2003e7dc
   d8488:	2003e7e0 	.word	0x2003e7e0
   d848c:	2003e500 	.word	0x2003e500
   d8490:	000d7a5d 	.word	0x000d7a5d

000d8494 <__aeabi_atexit>:
   d8494:	460b      	mov	r3, r1
   d8496:	4601      	mov	r1, r0
   d8498:	4618      	mov	r0, r3
   d849a:	f000 be45 	b.w	d9128 <__cxa_atexit>

000d849e <_ZdlPvj>:
   d849e:	f7fb bdfe 	b.w	d409e <_ZdlPv>

000d84a2 <_ZnajRKSt9nothrow_t>:
   d84a2:	f7fb bdfa 	b.w	d409a <_Znaj>
	...

000d84a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d84a8:	4901      	ldr	r1, [pc, #4]	; (d84b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d84aa:	f000 b8f9 	b.w	d86a0 <_ZNKSt9type_infoeqERKS_>
   d84ae:	bf00      	nop
   d84b0:	000dc1ac 	.word	0x000dc1ac

000d84b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d84b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d84b6:	2400      	movs	r4, #0
   d84b8:	2310      	movs	r3, #16
   d84ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d84be:	6803      	ldr	r3, [r0, #0]
   d84c0:	9400      	str	r4, [sp, #0]
   d84c2:	699e      	ldr	r6, [r3, #24]
   d84c4:	f88d 4004 	strb.w	r4, [sp, #4]
   d84c8:	4615      	mov	r5, r2
   d84ca:	466b      	mov	r3, sp
   d84cc:	6812      	ldr	r2, [r2, #0]
   d84ce:	47b0      	blx	r6
   d84d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d84d4:	f003 0306 	and.w	r3, r3, #6
   d84d8:	2b06      	cmp	r3, #6
   d84da:	bf03      	ittte	eq
   d84dc:	9b00      	ldreq	r3, [sp, #0]
   d84de:	602b      	streq	r3, [r5, #0]
   d84e0:	2001      	moveq	r0, #1
   d84e2:	4620      	movne	r0, r4
   d84e4:	b004      	add	sp, #16
   d84e6:	bd70      	pop	{r4, r5, r6, pc}

000d84e8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d84e8:	9800      	ldr	r0, [sp, #0]
   d84ea:	4290      	cmp	r0, r2
   d84ec:	bf14      	ite	ne
   d84ee:	2001      	movne	r0, #1
   d84f0:	2006      	moveq	r0, #6
   d84f2:	4770      	bx	lr

000d84f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d84f4:	b510      	push	{r4, lr}
   d84f6:	4b03      	ldr	r3, [pc, #12]	; (d8504 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d84f8:	6003      	str	r3, [r0, #0]
   d84fa:	4604      	mov	r4, r0
   d84fc:	f000 f8cd 	bl	d869a <_ZNSt9type_infoD1Ev>
   d8500:	4620      	mov	r0, r4
   d8502:	bd10      	pop	{r4, pc}
   d8504:	000dc1ec 	.word	0x000dc1ec

000d8508 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8508:	b510      	push	{r4, lr}
   d850a:	4604      	mov	r4, r0
   d850c:	f7ff fff2 	bl	d84f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8510:	4620      	mov	r0, r4
   d8512:	2108      	movs	r1, #8
   d8514:	f7ff ffc3 	bl	d849e <_ZdlPvj>
   d8518:	4620      	mov	r0, r4
   d851a:	bd10      	pop	{r4, pc}

000d851c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8520:	461f      	mov	r7, r3
   d8522:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8526:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d852a:	4598      	cmp	r8, r3
   d852c:	4606      	mov	r6, r0
   d852e:	4615      	mov	r5, r2
   d8530:	d107      	bne.n	d8542 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8532:	9907      	ldr	r1, [sp, #28]
   d8534:	f000 f8b4 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d8538:	b118      	cbz	r0, d8542 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d853a:	7165      	strb	r5, [r4, #5]
   d853c:	2000      	movs	r0, #0
   d853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8542:	4639      	mov	r1, r7
   d8544:	4630      	mov	r0, r6
   d8546:	f000 f8ab 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d854a:	2800      	cmp	r0, #0
   d854c:	d0f6      	beq.n	d853c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d854e:	2301      	movs	r3, #1
   d8550:	f8c4 8000 	str.w	r8, [r4]
   d8554:	7125      	strb	r5, [r4, #4]
   d8556:	71a3      	strb	r3, [r4, #6]
   d8558:	e7f0      	b.n	d853c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d855a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d855a:	b538      	push	{r3, r4, r5, lr}
   d855c:	4615      	mov	r5, r2
   d855e:	461c      	mov	r4, r3
   d8560:	f000 f89e 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d8564:	b120      	cbz	r0, d8570 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8566:	2308      	movs	r3, #8
   d8568:	60e3      	str	r3, [r4, #12]
   d856a:	2306      	movs	r3, #6
   d856c:	6025      	str	r5, [r4, #0]
   d856e:	7123      	strb	r3, [r4, #4]
   d8570:	bd38      	pop	{r3, r4, r5, pc}

000d8572 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8572:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8574:	4605      	mov	r5, r0
   d8576:	460c      	mov	r4, r1
   d8578:	9201      	str	r2, [sp, #4]
   d857a:	461e      	mov	r6, r3
   d857c:	f000 f890 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d8580:	b950      	cbnz	r0, d8598 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8582:	2e03      	cmp	r6, #3
   d8584:	d808      	bhi.n	d8598 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8586:	6823      	ldr	r3, [r4, #0]
   d8588:	9a01      	ldr	r2, [sp, #4]
   d858a:	695b      	ldr	r3, [r3, #20]
   d858c:	4629      	mov	r1, r5
   d858e:	4620      	mov	r0, r4
   d8590:	b002      	add	sp, #8
   d8592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8596:	4718      	bx	r3
   d8598:	b002      	add	sp, #8
   d859a:	bd70      	pop	{r4, r5, r6, pc}

000d859c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d859c:	b510      	push	{r4, lr}
   d859e:	4b03      	ldr	r3, [pc, #12]	; (d85ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d85a0:	6003      	str	r3, [r0, #0]
   d85a2:	4604      	mov	r4, r0
   d85a4:	f7ff ffa6 	bl	d84f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d85a8:	4620      	mov	r0, r4
   d85aa:	bd10      	pop	{r4, pc}
   d85ac:	000dc24c 	.word	0x000dc24c

000d85b0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d85b0:	b510      	push	{r4, lr}
   d85b2:	4604      	mov	r4, r0
   d85b4:	f7ff fff2 	bl	d859c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d85b8:	4620      	mov	r0, r4
   d85ba:	210c      	movs	r1, #12
   d85bc:	f7ff ff6f 	bl	d849e <_ZdlPvj>
   d85c0:	4620      	mov	r0, r4
   d85c2:	bd10      	pop	{r4, pc}

000d85c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d85c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d85c6:	9f08      	ldr	r7, [sp, #32]
   d85c8:	4297      	cmp	r7, r2
   d85ca:	4605      	mov	r5, r0
   d85cc:	460e      	mov	r6, r1
   d85ce:	4614      	mov	r4, r2
   d85d0:	d00a      	beq.n	d85e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d85d2:	68a8      	ldr	r0, [r5, #8]
   d85d4:	6802      	ldr	r2, [r0, #0]
   d85d6:	9708      	str	r7, [sp, #32]
   d85d8:	6a15      	ldr	r5, [r2, #32]
   d85da:	4631      	mov	r1, r6
   d85dc:	4622      	mov	r2, r4
   d85de:	46ac      	mov	ip, r5
   d85e0:	b003      	add	sp, #12
   d85e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d85e6:	4760      	bx	ip
   d85e8:	4619      	mov	r1, r3
   d85ea:	9301      	str	r3, [sp, #4]
   d85ec:	f000 f858 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d85f0:	9b01      	ldr	r3, [sp, #4]
   d85f2:	2800      	cmp	r0, #0
   d85f4:	d0ed      	beq.n	d85d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d85f6:	2006      	movs	r0, #6
   d85f8:	b003      	add	sp, #12
   d85fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d85fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d85fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8600:	460d      	mov	r5, r1
   d8602:	4619      	mov	r1, r3
   d8604:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8608:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d860c:	4681      	mov	r9, r0
   d860e:	4617      	mov	r7, r2
   d8610:	4698      	mov	r8, r3
   d8612:	f000 f845 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d8616:	b190      	cbz	r0, d863e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8618:	2d00      	cmp	r5, #0
   d861a:	6034      	str	r4, [r6, #0]
   d861c:	7137      	strb	r7, [r6, #4]
   d861e:	db09      	blt.n	d8634 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8620:	1961      	adds	r1, r4, r5
   d8622:	458a      	cmp	sl, r1
   d8624:	bf0c      	ite	eq
   d8626:	2106      	moveq	r1, #6
   d8628:	2101      	movne	r1, #1
   d862a:	71b1      	strb	r1, [r6, #6]
   d862c:	2000      	movs	r0, #0
   d862e:	b001      	add	sp, #4
   d8630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8634:	3502      	adds	r5, #2
   d8636:	d1f9      	bne.n	d862c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8638:	2301      	movs	r3, #1
   d863a:	71b3      	strb	r3, [r6, #6]
   d863c:	e7f6      	b.n	d862c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d863e:	4554      	cmp	r4, sl
   d8640:	d106      	bne.n	d8650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8642:	4659      	mov	r1, fp
   d8644:	4648      	mov	r0, r9
   d8646:	f000 f82b 	bl	d86a0 <_ZNKSt9type_infoeqERKS_>
   d864a:	b108      	cbz	r0, d8650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d864c:	7177      	strb	r7, [r6, #5]
   d864e:	e7ed      	b.n	d862c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8650:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8654:	6803      	ldr	r3, [r0, #0]
   d8656:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d865a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d865e:	69dc      	ldr	r4, [r3, #28]
   d8660:	463a      	mov	r2, r7
   d8662:	4643      	mov	r3, r8
   d8664:	4629      	mov	r1, r5
   d8666:	46a4      	mov	ip, r4
   d8668:	b001      	add	sp, #4
   d866a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d866e:	4760      	bx	ip

000d8670 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8674:	4607      	mov	r7, r0
   d8676:	460c      	mov	r4, r1
   d8678:	4615      	mov	r5, r2
   d867a:	461e      	mov	r6, r3
   d867c:	f7ff ff6d 	bl	d855a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8680:	b948      	cbnz	r0, d8696 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8682:	68b8      	ldr	r0, [r7, #8]
   d8684:	6803      	ldr	r3, [r0, #0]
   d8686:	699f      	ldr	r7, [r3, #24]
   d8688:	462a      	mov	r2, r5
   d868a:	4633      	mov	r3, r6
   d868c:	4621      	mov	r1, r4
   d868e:	46bc      	mov	ip, r7
   d8690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8694:	4760      	bx	ip
   d8696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d869a <_ZNSt9type_infoD1Ev>:
   d869a:	4770      	bx	lr

000d869c <_ZNKSt9type_info14__is_pointer_pEv>:
   d869c:	2000      	movs	r0, #0
   d869e:	4770      	bx	lr

000d86a0 <_ZNKSt9type_infoeqERKS_>:
   d86a0:	4281      	cmp	r1, r0
   d86a2:	b508      	push	{r3, lr}
   d86a4:	d00e      	beq.n	d86c4 <_ZNKSt9type_infoeqERKS_+0x24>
   d86a6:	6840      	ldr	r0, [r0, #4]
   d86a8:	7803      	ldrb	r3, [r0, #0]
   d86aa:	2b2a      	cmp	r3, #42	; 0x2a
   d86ac:	d00c      	beq.n	d86c8 <_ZNKSt9type_infoeqERKS_+0x28>
   d86ae:	6849      	ldr	r1, [r1, #4]
   d86b0:	780b      	ldrb	r3, [r1, #0]
   d86b2:	2b2a      	cmp	r3, #42	; 0x2a
   d86b4:	bf08      	it	eq
   d86b6:	3101      	addeq	r1, #1
   d86b8:	f000 fd7e 	bl	d91b8 <strcmp>
   d86bc:	fab0 f080 	clz	r0, r0
   d86c0:	0940      	lsrs	r0, r0, #5
   d86c2:	bd08      	pop	{r3, pc}
   d86c4:	2001      	movs	r0, #1
   d86c6:	e7fc      	b.n	d86c2 <_ZNKSt9type_infoeqERKS_+0x22>
   d86c8:	2000      	movs	r0, #0
   d86ca:	e7fa      	b.n	d86c2 <_ZNKSt9type_infoeqERKS_+0x22>

000d86cc <__aeabi_drsub>:
   d86cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d86d0:	e002      	b.n	d86d8 <__adddf3>
   d86d2:	bf00      	nop

000d86d4 <__aeabi_dsub>:
   d86d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d86d8 <__adddf3>:
   d86d8:	b530      	push	{r4, r5, lr}
   d86da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d86de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d86e2:	ea94 0f05 	teq	r4, r5
   d86e6:	bf08      	it	eq
   d86e8:	ea90 0f02 	teqeq	r0, r2
   d86ec:	bf1f      	itttt	ne
   d86ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   d86f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d86f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d86fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86fe:	f000 80e2 	beq.w	d88c6 <__adddf3+0x1ee>
   d8702:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d870a:	bfb8      	it	lt
   d870c:	426d      	neglt	r5, r5
   d870e:	dd0c      	ble.n	d872a <__adddf3+0x52>
   d8710:	442c      	add	r4, r5
   d8712:	ea80 0202 	eor.w	r2, r0, r2
   d8716:	ea81 0303 	eor.w	r3, r1, r3
   d871a:	ea82 0000 	eor.w	r0, r2, r0
   d871e:	ea83 0101 	eor.w	r1, r3, r1
   d8722:	ea80 0202 	eor.w	r2, r0, r2
   d8726:	ea81 0303 	eor.w	r3, r1, r3
   d872a:	2d36      	cmp	r5, #54	; 0x36
   d872c:	bf88      	it	hi
   d872e:	bd30      	pophi	{r4, r5, pc}
   d8730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8734:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d873c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8740:	d002      	beq.n	d8748 <__adddf3+0x70>
   d8742:	4240      	negs	r0, r0
   d8744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d874c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8754:	d002      	beq.n	d875c <__adddf3+0x84>
   d8756:	4252      	negs	r2, r2
   d8758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d875c:	ea94 0f05 	teq	r4, r5
   d8760:	f000 80a7 	beq.w	d88b2 <__adddf3+0x1da>
   d8764:	f1a4 0401 	sub.w	r4, r4, #1
   d8768:	f1d5 0e20 	rsbs	lr, r5, #32
   d876c:	db0d      	blt.n	d878a <__adddf3+0xb2>
   d876e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8772:	fa22 f205 	lsr.w	r2, r2, r5
   d8776:	1880      	adds	r0, r0, r2
   d8778:	f141 0100 	adc.w	r1, r1, #0
   d877c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8780:	1880      	adds	r0, r0, r2
   d8782:	fa43 f305 	asr.w	r3, r3, r5
   d8786:	4159      	adcs	r1, r3
   d8788:	e00e      	b.n	d87a8 <__adddf3+0xd0>
   d878a:	f1a5 0520 	sub.w	r5, r5, #32
   d878e:	f10e 0e20 	add.w	lr, lr, #32
   d8792:	2a01      	cmp	r2, #1
   d8794:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8798:	bf28      	it	cs
   d879a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d879e:	fa43 f305 	asr.w	r3, r3, r5
   d87a2:	18c0      	adds	r0, r0, r3
   d87a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d87a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d87ac:	d507      	bpl.n	d87be <__adddf3+0xe6>
   d87ae:	f04f 0e00 	mov.w	lr, #0
   d87b2:	f1dc 0c00 	rsbs	ip, ip, #0
   d87b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d87ba:	eb6e 0101 	sbc.w	r1, lr, r1
   d87be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d87c2:	d31b      	bcc.n	d87fc <__adddf3+0x124>
   d87c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87c8:	d30c      	bcc.n	d87e4 <__adddf3+0x10c>
   d87ca:	0849      	lsrs	r1, r1, #1
   d87cc:	ea5f 0030 	movs.w	r0, r0, rrx
   d87d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d87d4:	f104 0401 	add.w	r4, r4, #1
   d87d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d87dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d87e0:	f080 809a 	bcs.w	d8918 <__adddf3+0x240>
   d87e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d87e8:	bf08      	it	eq
   d87ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d87ee:	f150 0000 	adcs.w	r0, r0, #0
   d87f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87f6:	ea41 0105 	orr.w	r1, r1, r5
   d87fa:	bd30      	pop	{r4, r5, pc}
   d87fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8800:	4140      	adcs	r0, r0
   d8802:	eb41 0101 	adc.w	r1, r1, r1
   d8806:	3c01      	subs	r4, #1
   d8808:	bf28      	it	cs
   d880a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d880e:	d2e9      	bcs.n	d87e4 <__adddf3+0x10c>
   d8810:	f091 0f00 	teq	r1, #0
   d8814:	bf04      	itt	eq
   d8816:	4601      	moveq	r1, r0
   d8818:	2000      	moveq	r0, #0
   d881a:	fab1 f381 	clz	r3, r1
   d881e:	bf08      	it	eq
   d8820:	3320      	addeq	r3, #32
   d8822:	f1a3 030b 	sub.w	r3, r3, #11
   d8826:	f1b3 0220 	subs.w	r2, r3, #32
   d882a:	da0c      	bge.n	d8846 <__adddf3+0x16e>
   d882c:	320c      	adds	r2, #12
   d882e:	dd08      	ble.n	d8842 <__adddf3+0x16a>
   d8830:	f102 0c14 	add.w	ip, r2, #20
   d8834:	f1c2 020c 	rsb	r2, r2, #12
   d8838:	fa01 f00c 	lsl.w	r0, r1, ip
   d883c:	fa21 f102 	lsr.w	r1, r1, r2
   d8840:	e00c      	b.n	d885c <__adddf3+0x184>
   d8842:	f102 0214 	add.w	r2, r2, #20
   d8846:	bfd8      	it	le
   d8848:	f1c2 0c20 	rsble	ip, r2, #32
   d884c:	fa01 f102 	lsl.w	r1, r1, r2
   d8850:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8854:	bfdc      	itt	le
   d8856:	ea41 010c 	orrle.w	r1, r1, ip
   d885a:	4090      	lslle	r0, r2
   d885c:	1ae4      	subs	r4, r4, r3
   d885e:	bfa2      	ittt	ge
   d8860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8864:	4329      	orrge	r1, r5
   d8866:	bd30      	popge	{r4, r5, pc}
   d8868:	ea6f 0404 	mvn.w	r4, r4
   d886c:	3c1f      	subs	r4, #31
   d886e:	da1c      	bge.n	d88aa <__adddf3+0x1d2>
   d8870:	340c      	adds	r4, #12
   d8872:	dc0e      	bgt.n	d8892 <__adddf3+0x1ba>
   d8874:	f104 0414 	add.w	r4, r4, #20
   d8878:	f1c4 0220 	rsb	r2, r4, #32
   d887c:	fa20 f004 	lsr.w	r0, r0, r4
   d8880:	fa01 f302 	lsl.w	r3, r1, r2
   d8884:	ea40 0003 	orr.w	r0, r0, r3
   d8888:	fa21 f304 	lsr.w	r3, r1, r4
   d888c:	ea45 0103 	orr.w	r1, r5, r3
   d8890:	bd30      	pop	{r4, r5, pc}
   d8892:	f1c4 040c 	rsb	r4, r4, #12
   d8896:	f1c4 0220 	rsb	r2, r4, #32
   d889a:	fa20 f002 	lsr.w	r0, r0, r2
   d889e:	fa01 f304 	lsl.w	r3, r1, r4
   d88a2:	ea40 0003 	orr.w	r0, r0, r3
   d88a6:	4629      	mov	r1, r5
   d88a8:	bd30      	pop	{r4, r5, pc}
   d88aa:	fa21 f004 	lsr.w	r0, r1, r4
   d88ae:	4629      	mov	r1, r5
   d88b0:	bd30      	pop	{r4, r5, pc}
   d88b2:	f094 0f00 	teq	r4, #0
   d88b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d88ba:	bf06      	itte	eq
   d88bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d88c0:	3401      	addeq	r4, #1
   d88c2:	3d01      	subne	r5, #1
   d88c4:	e74e      	b.n	d8764 <__adddf3+0x8c>
   d88c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88ca:	bf18      	it	ne
   d88cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88d0:	d029      	beq.n	d8926 <__adddf3+0x24e>
   d88d2:	ea94 0f05 	teq	r4, r5
   d88d6:	bf08      	it	eq
   d88d8:	ea90 0f02 	teqeq	r0, r2
   d88dc:	d005      	beq.n	d88ea <__adddf3+0x212>
   d88de:	ea54 0c00 	orrs.w	ip, r4, r0
   d88e2:	bf04      	itt	eq
   d88e4:	4619      	moveq	r1, r3
   d88e6:	4610      	moveq	r0, r2
   d88e8:	bd30      	pop	{r4, r5, pc}
   d88ea:	ea91 0f03 	teq	r1, r3
   d88ee:	bf1e      	ittt	ne
   d88f0:	2100      	movne	r1, #0
   d88f2:	2000      	movne	r0, #0
   d88f4:	bd30      	popne	{r4, r5, pc}
   d88f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d88fa:	d105      	bne.n	d8908 <__adddf3+0x230>
   d88fc:	0040      	lsls	r0, r0, #1
   d88fe:	4149      	adcs	r1, r1
   d8900:	bf28      	it	cs
   d8902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8906:	bd30      	pop	{r4, r5, pc}
   d8908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d890c:	bf3c      	itt	cc
   d890e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8912:	bd30      	popcc	{r4, r5, pc}
   d8914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d891c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8920:	f04f 0000 	mov.w	r0, #0
   d8924:	bd30      	pop	{r4, r5, pc}
   d8926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d892a:	bf1a      	itte	ne
   d892c:	4619      	movne	r1, r3
   d892e:	4610      	movne	r0, r2
   d8930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8934:	bf1c      	itt	ne
   d8936:	460b      	movne	r3, r1
   d8938:	4602      	movne	r2, r0
   d893a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d893e:	bf06      	itte	eq
   d8940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8944:	ea91 0f03 	teqeq	r1, r3
   d8948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d894c:	bd30      	pop	{r4, r5, pc}
   d894e:	bf00      	nop

000d8950 <__aeabi_ui2d>:
   d8950:	f090 0f00 	teq	r0, #0
   d8954:	bf04      	itt	eq
   d8956:	2100      	moveq	r1, #0
   d8958:	4770      	bxeq	lr
   d895a:	b530      	push	{r4, r5, lr}
   d895c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8960:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8964:	f04f 0500 	mov.w	r5, #0
   d8968:	f04f 0100 	mov.w	r1, #0
   d896c:	e750      	b.n	d8810 <__adddf3+0x138>
   d896e:	bf00      	nop

000d8970 <__aeabi_i2d>:
   d8970:	f090 0f00 	teq	r0, #0
   d8974:	bf04      	itt	eq
   d8976:	2100      	moveq	r1, #0
   d8978:	4770      	bxeq	lr
   d897a:	b530      	push	{r4, r5, lr}
   d897c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8980:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8988:	bf48      	it	mi
   d898a:	4240      	negmi	r0, r0
   d898c:	f04f 0100 	mov.w	r1, #0
   d8990:	e73e      	b.n	d8810 <__adddf3+0x138>
   d8992:	bf00      	nop

000d8994 <__aeabi_f2d>:
   d8994:	0042      	lsls	r2, r0, #1
   d8996:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d899a:	ea4f 0131 	mov.w	r1, r1, rrx
   d899e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d89a2:	bf1f      	itttt	ne
   d89a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d89a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d89ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d89b0:	4770      	bxne	lr
   d89b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d89b6:	bf08      	it	eq
   d89b8:	4770      	bxeq	lr
   d89ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d89be:	bf04      	itt	eq
   d89c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d89c4:	4770      	bxeq	lr
   d89c6:	b530      	push	{r4, r5, lr}
   d89c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d89cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89d4:	e71c      	b.n	d8810 <__adddf3+0x138>
   d89d6:	bf00      	nop

000d89d8 <__aeabi_ul2d>:
   d89d8:	ea50 0201 	orrs.w	r2, r0, r1
   d89dc:	bf08      	it	eq
   d89de:	4770      	bxeq	lr
   d89e0:	b530      	push	{r4, r5, lr}
   d89e2:	f04f 0500 	mov.w	r5, #0
   d89e6:	e00a      	b.n	d89fe <__aeabi_l2d+0x16>

000d89e8 <__aeabi_l2d>:
   d89e8:	ea50 0201 	orrs.w	r2, r0, r1
   d89ec:	bf08      	it	eq
   d89ee:	4770      	bxeq	lr
   d89f0:	b530      	push	{r4, r5, lr}
   d89f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d89f6:	d502      	bpl.n	d89fe <__aeabi_l2d+0x16>
   d89f8:	4240      	negs	r0, r0
   d89fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a0a:	f43f aed8 	beq.w	d87be <__adddf3+0xe6>
   d8a0e:	f04f 0203 	mov.w	r2, #3
   d8a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a16:	bf18      	it	ne
   d8a18:	3203      	addne	r2, #3
   d8a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a1e:	bf18      	it	ne
   d8a20:	3203      	addne	r2, #3
   d8a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a26:	f1c2 0320 	rsb	r3, r2, #32
   d8a2a:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a2e:	fa20 f002 	lsr.w	r0, r0, r2
   d8a32:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a36:	ea40 000e 	orr.w	r0, r0, lr
   d8a3a:	fa21 f102 	lsr.w	r1, r1, r2
   d8a3e:	4414      	add	r4, r2
   d8a40:	e6bd      	b.n	d87be <__adddf3+0xe6>
   d8a42:	bf00      	nop

000d8a44 <__aeabi_dmul>:
   d8a44:	b570      	push	{r4, r5, r6, lr}
   d8a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a52:	bf1d      	ittte	ne
   d8a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a58:	ea94 0f0c 	teqne	r4, ip
   d8a5c:	ea95 0f0c 	teqne	r5, ip
   d8a60:	f000 f8de 	bleq	d8c20 <__aeabi_dmul+0x1dc>
   d8a64:	442c      	add	r4, r5
   d8a66:	ea81 0603 	eor.w	r6, r1, r3
   d8a6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a76:	bf18      	it	ne
   d8a78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a84:	d038      	beq.n	d8af8 <__aeabi_dmul+0xb4>
   d8a86:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a8a:	f04f 0500 	mov.w	r5, #0
   d8a8e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a96:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a9a:	f04f 0600 	mov.w	r6, #0
   d8a9e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8aa2:	f09c 0f00 	teq	ip, #0
   d8aa6:	bf18      	it	ne
   d8aa8:	f04e 0e01 	orrne.w	lr, lr, #1
   d8aac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ab0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8ab4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8ab8:	d204      	bcs.n	d8ac4 <__aeabi_dmul+0x80>
   d8aba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8abe:	416d      	adcs	r5, r5
   d8ac0:	eb46 0606 	adc.w	r6, r6, r6
   d8ac4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ac8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8acc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ad0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8ad4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8ad8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8adc:	bf88      	it	hi
   d8ade:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ae2:	d81e      	bhi.n	d8b22 <__aeabi_dmul+0xde>
   d8ae4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ae8:	bf08      	it	eq
   d8aea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8aee:	f150 0000 	adcs.w	r0, r0, #0
   d8af2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8af6:	bd70      	pop	{r4, r5, r6, pc}
   d8af8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8afc:	ea46 0101 	orr.w	r1, r6, r1
   d8b00:	ea40 0002 	orr.w	r0, r0, r2
   d8b04:	ea81 0103 	eor.w	r1, r1, r3
   d8b08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b0c:	bfc2      	ittt	gt
   d8b0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b16:	bd70      	popgt	{r4, r5, r6, pc}
   d8b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b1c:	f04f 0e00 	mov.w	lr, #0
   d8b20:	3c01      	subs	r4, #1
   d8b22:	f300 80ab 	bgt.w	d8c7c <__aeabi_dmul+0x238>
   d8b26:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b2a:	bfde      	ittt	le
   d8b2c:	2000      	movle	r0, #0
   d8b2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b32:	bd70      	pople	{r4, r5, r6, pc}
   d8b34:	f1c4 0400 	rsb	r4, r4, #0
   d8b38:	3c20      	subs	r4, #32
   d8b3a:	da35      	bge.n	d8ba8 <__aeabi_dmul+0x164>
   d8b3c:	340c      	adds	r4, #12
   d8b3e:	dc1b      	bgt.n	d8b78 <__aeabi_dmul+0x134>
   d8b40:	f104 0414 	add.w	r4, r4, #20
   d8b44:	f1c4 0520 	rsb	r5, r4, #32
   d8b48:	fa00 f305 	lsl.w	r3, r0, r5
   d8b4c:	fa20 f004 	lsr.w	r0, r0, r4
   d8b50:	fa01 f205 	lsl.w	r2, r1, r5
   d8b54:	ea40 0002 	orr.w	r0, r0, r2
   d8b58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b64:	fa21 f604 	lsr.w	r6, r1, r4
   d8b68:	eb42 0106 	adc.w	r1, r2, r6
   d8b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b70:	bf08      	it	eq
   d8b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b76:	bd70      	pop	{r4, r5, r6, pc}
   d8b78:	f1c4 040c 	rsb	r4, r4, #12
   d8b7c:	f1c4 0520 	rsb	r5, r4, #32
   d8b80:	fa00 f304 	lsl.w	r3, r0, r4
   d8b84:	fa20 f005 	lsr.w	r0, r0, r5
   d8b88:	fa01 f204 	lsl.w	r2, r1, r4
   d8b8c:	ea40 0002 	orr.w	r0, r0, r2
   d8b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b98:	f141 0100 	adc.w	r1, r1, #0
   d8b9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ba0:	bf08      	it	eq
   d8ba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ba6:	bd70      	pop	{r4, r5, r6, pc}
   d8ba8:	f1c4 0520 	rsb	r5, r4, #32
   d8bac:	fa00 f205 	lsl.w	r2, r0, r5
   d8bb0:	ea4e 0e02 	orr.w	lr, lr, r2
   d8bb4:	fa20 f304 	lsr.w	r3, r0, r4
   d8bb8:	fa01 f205 	lsl.w	r2, r1, r5
   d8bbc:	ea43 0302 	orr.w	r3, r3, r2
   d8bc0:	fa21 f004 	lsr.w	r0, r1, r4
   d8bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bc8:	fa21 f204 	lsr.w	r2, r1, r4
   d8bcc:	ea20 0002 	bic.w	r0, r0, r2
   d8bd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8bd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bd8:	bf08      	it	eq
   d8bda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bde:	bd70      	pop	{r4, r5, r6, pc}
   d8be0:	f094 0f00 	teq	r4, #0
   d8be4:	d10f      	bne.n	d8c06 <__aeabi_dmul+0x1c2>
   d8be6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8bea:	0040      	lsls	r0, r0, #1
   d8bec:	eb41 0101 	adc.w	r1, r1, r1
   d8bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bf4:	bf08      	it	eq
   d8bf6:	3c01      	subeq	r4, #1
   d8bf8:	d0f7      	beq.n	d8bea <__aeabi_dmul+0x1a6>
   d8bfa:	ea41 0106 	orr.w	r1, r1, r6
   d8bfe:	f095 0f00 	teq	r5, #0
   d8c02:	bf18      	it	ne
   d8c04:	4770      	bxne	lr
   d8c06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c0a:	0052      	lsls	r2, r2, #1
   d8c0c:	eb43 0303 	adc.w	r3, r3, r3
   d8c10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c14:	bf08      	it	eq
   d8c16:	3d01      	subeq	r5, #1
   d8c18:	d0f7      	beq.n	d8c0a <__aeabi_dmul+0x1c6>
   d8c1a:	ea43 0306 	orr.w	r3, r3, r6
   d8c1e:	4770      	bx	lr
   d8c20:	ea94 0f0c 	teq	r4, ip
   d8c24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c28:	bf18      	it	ne
   d8c2a:	ea95 0f0c 	teqne	r5, ip
   d8c2e:	d00c      	beq.n	d8c4a <__aeabi_dmul+0x206>
   d8c30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c34:	bf18      	it	ne
   d8c36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c3a:	d1d1      	bne.n	d8be0 <__aeabi_dmul+0x19c>
   d8c3c:	ea81 0103 	eor.w	r1, r1, r3
   d8c40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c44:	f04f 0000 	mov.w	r0, #0
   d8c48:	bd70      	pop	{r4, r5, r6, pc}
   d8c4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c4e:	bf06      	itte	eq
   d8c50:	4610      	moveq	r0, r2
   d8c52:	4619      	moveq	r1, r3
   d8c54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c58:	d019      	beq.n	d8c8e <__aeabi_dmul+0x24a>
   d8c5a:	ea94 0f0c 	teq	r4, ip
   d8c5e:	d102      	bne.n	d8c66 <__aeabi_dmul+0x222>
   d8c60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c64:	d113      	bne.n	d8c8e <__aeabi_dmul+0x24a>
   d8c66:	ea95 0f0c 	teq	r5, ip
   d8c6a:	d105      	bne.n	d8c78 <__aeabi_dmul+0x234>
   d8c6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c70:	bf1c      	itt	ne
   d8c72:	4610      	movne	r0, r2
   d8c74:	4619      	movne	r1, r3
   d8c76:	d10a      	bne.n	d8c8e <__aeabi_dmul+0x24a>
   d8c78:	ea81 0103 	eor.w	r1, r1, r3
   d8c7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c88:	f04f 0000 	mov.w	r0, #0
   d8c8c:	bd70      	pop	{r4, r5, r6, pc}
   d8c8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c96:	bd70      	pop	{r4, r5, r6, pc}

000d8c98 <__aeabi_ddiv>:
   d8c98:	b570      	push	{r4, r5, r6, lr}
   d8c9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ca2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ca6:	bf1d      	ittte	ne
   d8ca8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8cac:	ea94 0f0c 	teqne	r4, ip
   d8cb0:	ea95 0f0c 	teqne	r5, ip
   d8cb4:	f000 f8a7 	bleq	d8e06 <__aeabi_ddiv+0x16e>
   d8cb8:	eba4 0405 	sub.w	r4, r4, r5
   d8cbc:	ea81 0e03 	eor.w	lr, r1, r3
   d8cc0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8cc8:	f000 8088 	beq.w	d8ddc <__aeabi_ddiv+0x144>
   d8ccc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cd0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8cd4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8cd8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8cdc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8ce0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8ce4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8ce8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8cec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8cf0:	429d      	cmp	r5, r3
   d8cf2:	bf08      	it	eq
   d8cf4:	4296      	cmpeq	r6, r2
   d8cf6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8cfa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8cfe:	d202      	bcs.n	d8d06 <__aeabi_ddiv+0x6e>
   d8d00:	085b      	lsrs	r3, r3, #1
   d8d02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d06:	1ab6      	subs	r6, r6, r2
   d8d08:	eb65 0503 	sbc.w	r5, r5, r3
   d8d0c:	085b      	lsrs	r3, r3, #1
   d8d0e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d22:	bf22      	ittt	cs
   d8d24:	1ab6      	subcs	r6, r6, r2
   d8d26:	4675      	movcs	r5, lr
   d8d28:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d2c:	085b      	lsrs	r3, r3, #1
   d8d2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d32:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d3a:	bf22      	ittt	cs
   d8d3c:	1ab6      	subcs	r6, r6, r2
   d8d3e:	4675      	movcs	r5, lr
   d8d40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d44:	085b      	lsrs	r3, r3, #1
   d8d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d52:	bf22      	ittt	cs
   d8d54:	1ab6      	subcs	r6, r6, r2
   d8d56:	4675      	movcs	r5, lr
   d8d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d5c:	085b      	lsrs	r3, r3, #1
   d8d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d62:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d6a:	bf22      	ittt	cs
   d8d6c:	1ab6      	subcs	r6, r6, r2
   d8d6e:	4675      	movcs	r5, lr
   d8d70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d74:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d78:	d018      	beq.n	d8dac <__aeabi_ddiv+0x114>
   d8d7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d82:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d96:	d1c0      	bne.n	d8d1a <__aeabi_ddiv+0x82>
   d8d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d9c:	d10b      	bne.n	d8db6 <__aeabi_ddiv+0x11e>
   d8d9e:	ea41 0100 	orr.w	r1, r1, r0
   d8da2:	f04f 0000 	mov.w	r0, #0
   d8da6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8daa:	e7b6      	b.n	d8d1a <__aeabi_ddiv+0x82>
   d8dac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8db0:	bf04      	itt	eq
   d8db2:	4301      	orreq	r1, r0
   d8db4:	2000      	moveq	r0, #0
   d8db6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8dba:	bf88      	it	hi
   d8dbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8dc0:	f63f aeaf 	bhi.w	d8b22 <__aeabi_dmul+0xde>
   d8dc4:	ebb5 0c03 	subs.w	ip, r5, r3
   d8dc8:	bf04      	itt	eq
   d8dca:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8dce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dd2:	f150 0000 	adcs.w	r0, r0, #0
   d8dd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8dda:	bd70      	pop	{r4, r5, r6, pc}
   d8ddc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8de0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8de4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8de8:	bfc2      	ittt	gt
   d8dea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8dee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8df2:	bd70      	popgt	{r4, r5, r6, pc}
   d8df4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8df8:	f04f 0e00 	mov.w	lr, #0
   d8dfc:	3c01      	subs	r4, #1
   d8dfe:	e690      	b.n	d8b22 <__aeabi_dmul+0xde>
   d8e00:	ea45 0e06 	orr.w	lr, r5, r6
   d8e04:	e68d      	b.n	d8b22 <__aeabi_dmul+0xde>
   d8e06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e0a:	ea94 0f0c 	teq	r4, ip
   d8e0e:	bf08      	it	eq
   d8e10:	ea95 0f0c 	teqeq	r5, ip
   d8e14:	f43f af3b 	beq.w	d8c8e <__aeabi_dmul+0x24a>
   d8e18:	ea94 0f0c 	teq	r4, ip
   d8e1c:	d10a      	bne.n	d8e34 <__aeabi_ddiv+0x19c>
   d8e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e22:	f47f af34 	bne.w	d8c8e <__aeabi_dmul+0x24a>
   d8e26:	ea95 0f0c 	teq	r5, ip
   d8e2a:	f47f af25 	bne.w	d8c78 <__aeabi_dmul+0x234>
   d8e2e:	4610      	mov	r0, r2
   d8e30:	4619      	mov	r1, r3
   d8e32:	e72c      	b.n	d8c8e <__aeabi_dmul+0x24a>
   d8e34:	ea95 0f0c 	teq	r5, ip
   d8e38:	d106      	bne.n	d8e48 <__aeabi_ddiv+0x1b0>
   d8e3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e3e:	f43f aefd 	beq.w	d8c3c <__aeabi_dmul+0x1f8>
   d8e42:	4610      	mov	r0, r2
   d8e44:	4619      	mov	r1, r3
   d8e46:	e722      	b.n	d8c8e <__aeabi_dmul+0x24a>
   d8e48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e4c:	bf18      	it	ne
   d8e4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e52:	f47f aec5 	bne.w	d8be0 <__aeabi_dmul+0x19c>
   d8e56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e5a:	f47f af0d 	bne.w	d8c78 <__aeabi_dmul+0x234>
   d8e5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e62:	f47f aeeb 	bne.w	d8c3c <__aeabi_dmul+0x1f8>
   d8e66:	e712      	b.n	d8c8e <__aeabi_dmul+0x24a>

000d8e68 <__gedf2>:
   d8e68:	f04f 3cff 	mov.w	ip, #4294967295
   d8e6c:	e006      	b.n	d8e7c <__cmpdf2+0x4>
   d8e6e:	bf00      	nop

000d8e70 <__ledf2>:
   d8e70:	f04f 0c01 	mov.w	ip, #1
   d8e74:	e002      	b.n	d8e7c <__cmpdf2+0x4>
   d8e76:	bf00      	nop

000d8e78 <__cmpdf2>:
   d8e78:	f04f 0c01 	mov.w	ip, #1
   d8e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e8c:	bf18      	it	ne
   d8e8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e92:	d01b      	beq.n	d8ecc <__cmpdf2+0x54>
   d8e94:	b001      	add	sp, #4
   d8e96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e9a:	bf0c      	ite	eq
   d8e9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8ea0:	ea91 0f03 	teqne	r1, r3
   d8ea4:	bf02      	ittt	eq
   d8ea6:	ea90 0f02 	teqeq	r0, r2
   d8eaa:	2000      	moveq	r0, #0
   d8eac:	4770      	bxeq	lr
   d8eae:	f110 0f00 	cmn.w	r0, #0
   d8eb2:	ea91 0f03 	teq	r1, r3
   d8eb6:	bf58      	it	pl
   d8eb8:	4299      	cmppl	r1, r3
   d8eba:	bf08      	it	eq
   d8ebc:	4290      	cmpeq	r0, r2
   d8ebe:	bf2c      	ite	cs
   d8ec0:	17d8      	asrcs	r0, r3, #31
   d8ec2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8ec6:	f040 0001 	orr.w	r0, r0, #1
   d8eca:	4770      	bx	lr
   d8ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ed4:	d102      	bne.n	d8edc <__cmpdf2+0x64>
   d8ed6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8eda:	d107      	bne.n	d8eec <__cmpdf2+0x74>
   d8edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ee4:	d1d6      	bne.n	d8e94 <__cmpdf2+0x1c>
   d8ee6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8eea:	d0d3      	beq.n	d8e94 <__cmpdf2+0x1c>
   d8eec:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ef0:	4770      	bx	lr
   d8ef2:	bf00      	nop

000d8ef4 <__aeabi_cdrcmple>:
   d8ef4:	4684      	mov	ip, r0
   d8ef6:	4610      	mov	r0, r2
   d8ef8:	4662      	mov	r2, ip
   d8efa:	468c      	mov	ip, r1
   d8efc:	4619      	mov	r1, r3
   d8efe:	4663      	mov	r3, ip
   d8f00:	e000      	b.n	d8f04 <__aeabi_cdcmpeq>
   d8f02:	bf00      	nop

000d8f04 <__aeabi_cdcmpeq>:
   d8f04:	b501      	push	{r0, lr}
   d8f06:	f7ff ffb7 	bl	d8e78 <__cmpdf2>
   d8f0a:	2800      	cmp	r0, #0
   d8f0c:	bf48      	it	mi
   d8f0e:	f110 0f00 	cmnmi.w	r0, #0
   d8f12:	bd01      	pop	{r0, pc}

000d8f14 <__aeabi_dcmpeq>:
   d8f14:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f18:	f7ff fff4 	bl	d8f04 <__aeabi_cdcmpeq>
   d8f1c:	bf0c      	ite	eq
   d8f1e:	2001      	moveq	r0, #1
   d8f20:	2000      	movne	r0, #0
   d8f22:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f26:	bf00      	nop

000d8f28 <__aeabi_dcmplt>:
   d8f28:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f2c:	f7ff ffea 	bl	d8f04 <__aeabi_cdcmpeq>
   d8f30:	bf34      	ite	cc
   d8f32:	2001      	movcc	r0, #1
   d8f34:	2000      	movcs	r0, #0
   d8f36:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f3a:	bf00      	nop

000d8f3c <__aeabi_dcmple>:
   d8f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f40:	f7ff ffe0 	bl	d8f04 <__aeabi_cdcmpeq>
   d8f44:	bf94      	ite	ls
   d8f46:	2001      	movls	r0, #1
   d8f48:	2000      	movhi	r0, #0
   d8f4a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f4e:	bf00      	nop

000d8f50 <__aeabi_dcmpge>:
   d8f50:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f54:	f7ff ffce 	bl	d8ef4 <__aeabi_cdrcmple>
   d8f58:	bf94      	ite	ls
   d8f5a:	2001      	movls	r0, #1
   d8f5c:	2000      	movhi	r0, #0
   d8f5e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f62:	bf00      	nop

000d8f64 <__aeabi_dcmpgt>:
   d8f64:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f68:	f7ff ffc4 	bl	d8ef4 <__aeabi_cdrcmple>
   d8f6c:	bf34      	ite	cc
   d8f6e:	2001      	movcc	r0, #1
   d8f70:	2000      	movcs	r0, #0
   d8f72:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f76:	bf00      	nop

000d8f78 <__aeabi_dcmpun>:
   d8f78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f80:	d102      	bne.n	d8f88 <__aeabi_dcmpun+0x10>
   d8f82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f86:	d10a      	bne.n	d8f9e <__aeabi_dcmpun+0x26>
   d8f88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f90:	d102      	bne.n	d8f98 <__aeabi_dcmpun+0x20>
   d8f92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f96:	d102      	bne.n	d8f9e <__aeabi_dcmpun+0x26>
   d8f98:	f04f 0000 	mov.w	r0, #0
   d8f9c:	4770      	bx	lr
   d8f9e:	f04f 0001 	mov.w	r0, #1
   d8fa2:	4770      	bx	lr

000d8fa4 <__aeabi_d2iz>:
   d8fa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fac:	d215      	bcs.n	d8fda <__aeabi_d2iz+0x36>
   d8fae:	d511      	bpl.n	d8fd4 <__aeabi_d2iz+0x30>
   d8fb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8fb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8fb8:	d912      	bls.n	d8fe0 <__aeabi_d2iz+0x3c>
   d8fba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8fc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8fc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8fca:	fa23 f002 	lsr.w	r0, r3, r2
   d8fce:	bf18      	it	ne
   d8fd0:	4240      	negne	r0, r0
   d8fd2:	4770      	bx	lr
   d8fd4:	f04f 0000 	mov.w	r0, #0
   d8fd8:	4770      	bx	lr
   d8fda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8fde:	d105      	bne.n	d8fec <__aeabi_d2iz+0x48>
   d8fe0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8fe4:	bf08      	it	eq
   d8fe6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8fea:	4770      	bx	lr
   d8fec:	f04f 0000 	mov.w	r0, #0
   d8ff0:	4770      	bx	lr
   d8ff2:	bf00      	nop

000d8ff4 <__aeabi_d2uiz>:
   d8ff4:	004a      	lsls	r2, r1, #1
   d8ff6:	d211      	bcs.n	d901c <__aeabi_d2uiz+0x28>
   d8ff8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8ffc:	d211      	bcs.n	d9022 <__aeabi_d2uiz+0x2e>
   d8ffe:	d50d      	bpl.n	d901c <__aeabi_d2uiz+0x28>
   d9000:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9004:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9008:	d40e      	bmi.n	d9028 <__aeabi_d2uiz+0x34>
   d900a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d900e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9012:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9016:	fa23 f002 	lsr.w	r0, r3, r2
   d901a:	4770      	bx	lr
   d901c:	f04f 0000 	mov.w	r0, #0
   d9020:	4770      	bx	lr
   d9022:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9026:	d102      	bne.n	d902e <__aeabi_d2uiz+0x3a>
   d9028:	f04f 30ff 	mov.w	r0, #4294967295
   d902c:	4770      	bx	lr
   d902e:	f04f 0000 	mov.w	r0, #0
   d9032:	4770      	bx	lr

000d9034 <__aeabi_d2f>:
   d9034:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9038:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d903c:	bf24      	itt	cs
   d903e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9042:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9046:	d90d      	bls.n	d9064 <__aeabi_d2f+0x30>
   d9048:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d904c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9050:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9054:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9058:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d905c:	bf08      	it	eq
   d905e:	f020 0001 	biceq.w	r0, r0, #1
   d9062:	4770      	bx	lr
   d9064:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9068:	d121      	bne.n	d90ae <__aeabi_d2f+0x7a>
   d906a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d906e:	bfbc      	itt	lt
   d9070:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9074:	4770      	bxlt	lr
   d9076:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d907a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d907e:	f1c2 0218 	rsb	r2, r2, #24
   d9082:	f1c2 0c20 	rsb	ip, r2, #32
   d9086:	fa10 f30c 	lsls.w	r3, r0, ip
   d908a:	fa20 f002 	lsr.w	r0, r0, r2
   d908e:	bf18      	it	ne
   d9090:	f040 0001 	orrne.w	r0, r0, #1
   d9094:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9098:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d909c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d90a0:	ea40 000c 	orr.w	r0, r0, ip
   d90a4:	fa23 f302 	lsr.w	r3, r3, r2
   d90a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d90ac:	e7cc      	b.n	d9048 <__aeabi_d2f+0x14>
   d90ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d90b2:	d107      	bne.n	d90c4 <__aeabi_d2f+0x90>
   d90b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d90b8:	bf1e      	ittt	ne
   d90ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d90be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d90c2:	4770      	bxne	lr
   d90c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d90c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d90cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d90d0:	4770      	bx	lr
   d90d2:	bf00      	nop

000d90d4 <__aeabi_d2ulz>:
   d90d4:	b5d0      	push	{r4, r6, r7, lr}
   d90d6:	4b0c      	ldr	r3, [pc, #48]	; (d9108 <__aeabi_d2ulz+0x34>)
   d90d8:	2200      	movs	r2, #0
   d90da:	4606      	mov	r6, r0
   d90dc:	460f      	mov	r7, r1
   d90de:	f7ff fcb1 	bl	d8a44 <__aeabi_dmul>
   d90e2:	f7ff ff87 	bl	d8ff4 <__aeabi_d2uiz>
   d90e6:	4604      	mov	r4, r0
   d90e8:	f7ff fc32 	bl	d8950 <__aeabi_ui2d>
   d90ec:	4b07      	ldr	r3, [pc, #28]	; (d910c <__aeabi_d2ulz+0x38>)
   d90ee:	2200      	movs	r2, #0
   d90f0:	f7ff fca8 	bl	d8a44 <__aeabi_dmul>
   d90f4:	4602      	mov	r2, r0
   d90f6:	460b      	mov	r3, r1
   d90f8:	4630      	mov	r0, r6
   d90fa:	4639      	mov	r1, r7
   d90fc:	f7ff faea 	bl	d86d4 <__aeabi_dsub>
   d9100:	f7ff ff78 	bl	d8ff4 <__aeabi_d2uiz>
   d9104:	4621      	mov	r1, r4
   d9106:	bdd0      	pop	{r4, r6, r7, pc}
   d9108:	3df00000 	.word	0x3df00000
   d910c:	41f00000 	.word	0x41f00000

000d9110 <atof>:
   d9110:	2100      	movs	r1, #0
   d9112:	f000 beaf 	b.w	d9e74 <strtod>

000d9116 <atoi>:
   d9116:	220a      	movs	r2, #10
   d9118:	2100      	movs	r1, #0
   d911a:	f000 bf31 	b.w	d9f80 <strtol>

000d911e <atol>:
   d911e:	220a      	movs	r2, #10
   d9120:	2100      	movs	r1, #0
   d9122:	f000 bf2d 	b.w	d9f80 <strtol>
	...

000d9128 <__cxa_atexit>:
   d9128:	b510      	push	{r4, lr}
   d912a:	4c05      	ldr	r4, [pc, #20]	; (d9140 <__cxa_atexit+0x18>)
   d912c:	4613      	mov	r3, r2
   d912e:	b12c      	cbz	r4, d913c <__cxa_atexit+0x14>
   d9130:	460a      	mov	r2, r1
   d9132:	4601      	mov	r1, r0
   d9134:	2002      	movs	r0, #2
   d9136:	f3af 8000 	nop.w
   d913a:	bd10      	pop	{r4, pc}
   d913c:	4620      	mov	r0, r4
   d913e:	e7fc      	b.n	d913a <__cxa_atexit+0x12>
   d9140:	00000000 	.word	0x00000000

000d9144 <memcpy>:
   d9144:	440a      	add	r2, r1
   d9146:	4291      	cmp	r1, r2
   d9148:	f100 33ff 	add.w	r3, r0, #4294967295
   d914c:	d100      	bne.n	d9150 <memcpy+0xc>
   d914e:	4770      	bx	lr
   d9150:	b510      	push	{r4, lr}
   d9152:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9156:	f803 4f01 	strb.w	r4, [r3, #1]!
   d915a:	4291      	cmp	r1, r2
   d915c:	d1f9      	bne.n	d9152 <memcpy+0xe>
   d915e:	bd10      	pop	{r4, pc}

000d9160 <memset>:
   d9160:	4402      	add	r2, r0
   d9162:	4603      	mov	r3, r0
   d9164:	4293      	cmp	r3, r2
   d9166:	d100      	bne.n	d916a <memset+0xa>
   d9168:	4770      	bx	lr
   d916a:	f803 1b01 	strb.w	r1, [r3], #1
   d916e:	e7f9      	b.n	d9164 <memset+0x4>

000d9170 <srand>:
   d9170:	b538      	push	{r3, r4, r5, lr}
   d9172:	4b0d      	ldr	r3, [pc, #52]	; (d91a8 <srand+0x38>)
   d9174:	681d      	ldr	r5, [r3, #0]
   d9176:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9178:	4604      	mov	r4, r0
   d917a:	b97b      	cbnz	r3, d919c <srand+0x2c>
   d917c:	2018      	movs	r0, #24
   d917e:	f7fd fe5b 	bl	d6e38 <malloc>
   d9182:	4a0a      	ldr	r2, [pc, #40]	; (d91ac <srand+0x3c>)
   d9184:	4b0a      	ldr	r3, [pc, #40]	; (d91b0 <srand+0x40>)
   d9186:	63a8      	str	r0, [r5, #56]	; 0x38
   d9188:	e9c0 2300 	strd	r2, r3, [r0]
   d918c:	4b09      	ldr	r3, [pc, #36]	; (d91b4 <srand+0x44>)
   d918e:	6083      	str	r3, [r0, #8]
   d9190:	230b      	movs	r3, #11
   d9192:	8183      	strh	r3, [r0, #12]
   d9194:	2201      	movs	r2, #1
   d9196:	2300      	movs	r3, #0
   d9198:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d919c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d919e:	2200      	movs	r2, #0
   d91a0:	611c      	str	r4, [r3, #16]
   d91a2:	615a      	str	r2, [r3, #20]
   d91a4:	bd38      	pop	{r3, r4, r5, pc}
   d91a6:	bf00      	nop
   d91a8:	2003e328 	.word	0x2003e328
   d91ac:	abcd330e 	.word	0xabcd330e
   d91b0:	e66d1234 	.word	0xe66d1234
   d91b4:	0005deec 	.word	0x0005deec

000d91b8 <strcmp>:
   d91b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d91bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d91c0:	2a01      	cmp	r2, #1
   d91c2:	bf28      	it	cs
   d91c4:	429a      	cmpcs	r2, r3
   d91c6:	d0f7      	beq.n	d91b8 <strcmp>
   d91c8:	1ad0      	subs	r0, r2, r3
   d91ca:	4770      	bx	lr

000d91cc <strlen>:
   d91cc:	4603      	mov	r3, r0
   d91ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91d2:	2a00      	cmp	r2, #0
   d91d4:	d1fb      	bne.n	d91ce <strlen+0x2>
   d91d6:	1a18      	subs	r0, r3, r0
   d91d8:	3801      	subs	r0, #1
   d91da:	4770      	bx	lr

000d91dc <strncmp>:
   d91dc:	b510      	push	{r4, lr}
   d91de:	b16a      	cbz	r2, d91fc <strncmp+0x20>
   d91e0:	3901      	subs	r1, #1
   d91e2:	1884      	adds	r4, r0, r2
   d91e4:	f810 3b01 	ldrb.w	r3, [r0], #1
   d91e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d91ec:	4293      	cmp	r3, r2
   d91ee:	d103      	bne.n	d91f8 <strncmp+0x1c>
   d91f0:	42a0      	cmp	r0, r4
   d91f2:	d001      	beq.n	d91f8 <strncmp+0x1c>
   d91f4:	2b00      	cmp	r3, #0
   d91f6:	d1f5      	bne.n	d91e4 <strncmp+0x8>
   d91f8:	1a98      	subs	r0, r3, r2
   d91fa:	bd10      	pop	{r4, pc}
   d91fc:	4610      	mov	r0, r2
   d91fe:	e7fc      	b.n	d91fa <strncmp+0x1e>

000d9200 <strncpy>:
   d9200:	b510      	push	{r4, lr}
   d9202:	3901      	subs	r1, #1
   d9204:	4603      	mov	r3, r0
   d9206:	b132      	cbz	r2, d9216 <strncpy+0x16>
   d9208:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d920c:	f803 4b01 	strb.w	r4, [r3], #1
   d9210:	3a01      	subs	r2, #1
   d9212:	2c00      	cmp	r4, #0
   d9214:	d1f7      	bne.n	d9206 <strncpy+0x6>
   d9216:	441a      	add	r2, r3
   d9218:	2100      	movs	r1, #0
   d921a:	4293      	cmp	r3, r2
   d921c:	d100      	bne.n	d9220 <strncpy+0x20>
   d921e:	bd10      	pop	{r4, pc}
   d9220:	f803 1b01 	strb.w	r1, [r3], #1
   d9224:	e7f9      	b.n	d921a <strncpy+0x1a>

000d9226 <sulp>:
   d9226:	b570      	push	{r4, r5, r6, lr}
   d9228:	4604      	mov	r4, r0
   d922a:	460d      	mov	r5, r1
   d922c:	ec45 4b10 	vmov	d0, r4, r5
   d9230:	4616      	mov	r6, r2
   d9232:	f001 fd1b 	bl	dac6c <__ulp>
   d9236:	ec51 0b10 	vmov	r0, r1, d0
   d923a:	b17e      	cbz	r6, d925c <sulp+0x36>
   d923c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9240:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9244:	2b00      	cmp	r3, #0
   d9246:	dd09      	ble.n	d925c <sulp+0x36>
   d9248:	051b      	lsls	r3, r3, #20
   d924a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d924e:	2400      	movs	r4, #0
   d9250:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9254:	4622      	mov	r2, r4
   d9256:	462b      	mov	r3, r5
   d9258:	f7ff fbf4 	bl	d8a44 <__aeabi_dmul>
   d925c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9260 <_strtod_l>:
   d9260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9264:	b0a3      	sub	sp, #140	; 0x8c
   d9266:	461f      	mov	r7, r3
   d9268:	2300      	movs	r3, #0
   d926a:	931e      	str	r3, [sp, #120]	; 0x78
   d926c:	4ba4      	ldr	r3, [pc, #656]	; (d9500 <_strtod_l+0x2a0>)
   d926e:	9219      	str	r2, [sp, #100]	; 0x64
   d9270:	681b      	ldr	r3, [r3, #0]
   d9272:	9307      	str	r3, [sp, #28]
   d9274:	4604      	mov	r4, r0
   d9276:	4618      	mov	r0, r3
   d9278:	4688      	mov	r8, r1
   d927a:	f7ff ffa7 	bl	d91cc <strlen>
   d927e:	f04f 0a00 	mov.w	sl, #0
   d9282:	4605      	mov	r5, r0
   d9284:	f04f 0b00 	mov.w	fp, #0
   d9288:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d928c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d928e:	781a      	ldrb	r2, [r3, #0]
   d9290:	2a2b      	cmp	r2, #43	; 0x2b
   d9292:	d04c      	beq.n	d932e <_strtod_l+0xce>
   d9294:	d839      	bhi.n	d930a <_strtod_l+0xaa>
   d9296:	2a0d      	cmp	r2, #13
   d9298:	d832      	bhi.n	d9300 <_strtod_l+0xa0>
   d929a:	2a08      	cmp	r2, #8
   d929c:	d832      	bhi.n	d9304 <_strtod_l+0xa4>
   d929e:	2a00      	cmp	r2, #0
   d92a0:	d03c      	beq.n	d931c <_strtod_l+0xbc>
   d92a2:	2300      	movs	r3, #0
   d92a4:	930e      	str	r3, [sp, #56]	; 0x38
   d92a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d92a8:	7833      	ldrb	r3, [r6, #0]
   d92aa:	2b30      	cmp	r3, #48	; 0x30
   d92ac:	f040 80b4 	bne.w	d9418 <_strtod_l+0x1b8>
   d92b0:	7873      	ldrb	r3, [r6, #1]
   d92b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d92b6:	2b58      	cmp	r3, #88	; 0x58
   d92b8:	d16c      	bne.n	d9394 <_strtod_l+0x134>
   d92ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d92bc:	9301      	str	r3, [sp, #4]
   d92be:	ab1e      	add	r3, sp, #120	; 0x78
   d92c0:	9702      	str	r7, [sp, #8]
   d92c2:	9300      	str	r3, [sp, #0]
   d92c4:	4a8f      	ldr	r2, [pc, #572]	; (d9504 <_strtod_l+0x2a4>)
   d92c6:	ab1f      	add	r3, sp, #124	; 0x7c
   d92c8:	a91d      	add	r1, sp, #116	; 0x74
   d92ca:	4620      	mov	r0, r4
   d92cc:	f000 feca 	bl	da064 <__gethex>
   d92d0:	f010 0707 	ands.w	r7, r0, #7
   d92d4:	4605      	mov	r5, r0
   d92d6:	d005      	beq.n	d92e4 <_strtod_l+0x84>
   d92d8:	2f06      	cmp	r7, #6
   d92da:	d12a      	bne.n	d9332 <_strtod_l+0xd2>
   d92dc:	3601      	adds	r6, #1
   d92de:	2300      	movs	r3, #0
   d92e0:	961d      	str	r6, [sp, #116]	; 0x74
   d92e2:	930e      	str	r3, [sp, #56]	; 0x38
   d92e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d92e6:	2b00      	cmp	r3, #0
   d92e8:	f040 8596 	bne.w	d9e18 <_strtod_l+0xbb8>
   d92ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d92ee:	b1db      	cbz	r3, d9328 <_strtod_l+0xc8>
   d92f0:	4652      	mov	r2, sl
   d92f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d92f6:	ec43 2b10 	vmov	d0, r2, r3
   d92fa:	b023      	add	sp, #140	; 0x8c
   d92fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9300:	2a20      	cmp	r2, #32
   d9302:	d1ce      	bne.n	d92a2 <_strtod_l+0x42>
   d9304:	3301      	adds	r3, #1
   d9306:	931d      	str	r3, [sp, #116]	; 0x74
   d9308:	e7c0      	b.n	d928c <_strtod_l+0x2c>
   d930a:	2a2d      	cmp	r2, #45	; 0x2d
   d930c:	d1c9      	bne.n	d92a2 <_strtod_l+0x42>
   d930e:	2201      	movs	r2, #1
   d9310:	920e      	str	r2, [sp, #56]	; 0x38
   d9312:	1c5a      	adds	r2, r3, #1
   d9314:	921d      	str	r2, [sp, #116]	; 0x74
   d9316:	785b      	ldrb	r3, [r3, #1]
   d9318:	2b00      	cmp	r3, #0
   d931a:	d1c4      	bne.n	d92a6 <_strtod_l+0x46>
   d931c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d931e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9322:	2b00      	cmp	r3, #0
   d9324:	f040 8576 	bne.w	d9e14 <_strtod_l+0xbb4>
   d9328:	4652      	mov	r2, sl
   d932a:	465b      	mov	r3, fp
   d932c:	e7e3      	b.n	d92f6 <_strtod_l+0x96>
   d932e:	2200      	movs	r2, #0
   d9330:	e7ee      	b.n	d9310 <_strtod_l+0xb0>
   d9332:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9334:	b13a      	cbz	r2, d9346 <_strtod_l+0xe6>
   d9336:	2135      	movs	r1, #53	; 0x35
   d9338:	a820      	add	r0, sp, #128	; 0x80
   d933a:	f001 fd96 	bl	dae6a <__copybits>
   d933e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9340:	4620      	mov	r0, r4
   d9342:	f001 f9cb 	bl	da6dc <_Bfree>
   d9346:	3f01      	subs	r7, #1
   d9348:	2f05      	cmp	r7, #5
   d934a:	d807      	bhi.n	d935c <_strtod_l+0xfc>
   d934c:	e8df f007 	tbb	[pc, r7]
   d9350:	1d180b0e 	.word	0x1d180b0e
   d9354:	030e      	.short	0x030e
   d9356:	f04f 0b00 	mov.w	fp, #0
   d935a:	46da      	mov	sl, fp
   d935c:	0728      	lsls	r0, r5, #28
   d935e:	d5c1      	bpl.n	d92e4 <_strtod_l+0x84>
   d9360:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9364:	e7be      	b.n	d92e4 <_strtod_l+0x84>
   d9366:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d936a:	e7f7      	b.n	d935c <_strtod_l+0xfc>
   d936c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9370:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9376:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d937a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d937e:	e7ed      	b.n	d935c <_strtod_l+0xfc>
   d9380:	f8df b184 	ldr.w	fp, [pc, #388]	; d9508 <_strtod_l+0x2a8>
   d9384:	f04f 0a00 	mov.w	sl, #0
   d9388:	e7e8      	b.n	d935c <_strtod_l+0xfc>
   d938a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d938e:	f04f 3aff 	mov.w	sl, #4294967295
   d9392:	e7e3      	b.n	d935c <_strtod_l+0xfc>
   d9394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9396:	1c5a      	adds	r2, r3, #1
   d9398:	921d      	str	r2, [sp, #116]	; 0x74
   d939a:	785b      	ldrb	r3, [r3, #1]
   d939c:	2b30      	cmp	r3, #48	; 0x30
   d939e:	d0f9      	beq.n	d9394 <_strtod_l+0x134>
   d93a0:	2b00      	cmp	r3, #0
   d93a2:	d09f      	beq.n	d92e4 <_strtod_l+0x84>
   d93a4:	2301      	movs	r3, #1
   d93a6:	f04f 0900 	mov.w	r9, #0
   d93aa:	9304      	str	r3, [sp, #16]
   d93ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d93ae:	930a      	str	r3, [sp, #40]	; 0x28
   d93b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d93b4:	464f      	mov	r7, r9
   d93b6:	220a      	movs	r2, #10
   d93b8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d93ba:	7806      	ldrb	r6, [r0, #0]
   d93bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d93c0:	b2d9      	uxtb	r1, r3
   d93c2:	2909      	cmp	r1, #9
   d93c4:	d92a      	bls.n	d941c <_strtod_l+0x1bc>
   d93c6:	9907      	ldr	r1, [sp, #28]
   d93c8:	462a      	mov	r2, r5
   d93ca:	f7ff ff07 	bl	d91dc <strncmp>
   d93ce:	b398      	cbz	r0, d9438 <_strtod_l+0x1d8>
   d93d0:	2000      	movs	r0, #0
   d93d2:	4633      	mov	r3, r6
   d93d4:	463d      	mov	r5, r7
   d93d6:	9007      	str	r0, [sp, #28]
   d93d8:	4602      	mov	r2, r0
   d93da:	2b65      	cmp	r3, #101	; 0x65
   d93dc:	d001      	beq.n	d93e2 <_strtod_l+0x182>
   d93de:	2b45      	cmp	r3, #69	; 0x45
   d93e0:	d118      	bne.n	d9414 <_strtod_l+0x1b4>
   d93e2:	b91d      	cbnz	r5, d93ec <_strtod_l+0x18c>
   d93e4:	9b04      	ldr	r3, [sp, #16]
   d93e6:	4303      	orrs	r3, r0
   d93e8:	d098      	beq.n	d931c <_strtod_l+0xbc>
   d93ea:	2500      	movs	r5, #0
   d93ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d93f0:	f108 0301 	add.w	r3, r8, #1
   d93f4:	931d      	str	r3, [sp, #116]	; 0x74
   d93f6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d93fa:	2b2b      	cmp	r3, #43	; 0x2b
   d93fc:	d075      	beq.n	d94ea <_strtod_l+0x28a>
   d93fe:	2b2d      	cmp	r3, #45	; 0x2d
   d9400:	d07b      	beq.n	d94fa <_strtod_l+0x29a>
   d9402:	f04f 0c00 	mov.w	ip, #0
   d9406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d940a:	2909      	cmp	r1, #9
   d940c:	f240 8082 	bls.w	d9514 <_strtod_l+0x2b4>
   d9410:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9414:	2600      	movs	r6, #0
   d9416:	e09d      	b.n	d9554 <_strtod_l+0x2f4>
   d9418:	2300      	movs	r3, #0
   d941a:	e7c4      	b.n	d93a6 <_strtod_l+0x146>
   d941c:	2f08      	cmp	r7, #8
   d941e:	bfd8      	it	le
   d9420:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9422:	f100 0001 	add.w	r0, r0, #1
   d9426:	bfda      	itte	le
   d9428:	fb02 3301 	mlale	r3, r2, r1, r3
   d942c:	9309      	strle	r3, [sp, #36]	; 0x24
   d942e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9432:	3701      	adds	r7, #1
   d9434:	901d      	str	r0, [sp, #116]	; 0x74
   d9436:	e7bf      	b.n	d93b8 <_strtod_l+0x158>
   d9438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d943a:	195a      	adds	r2, r3, r5
   d943c:	921d      	str	r2, [sp, #116]	; 0x74
   d943e:	5d5b      	ldrb	r3, [r3, r5]
   d9440:	2f00      	cmp	r7, #0
   d9442:	d037      	beq.n	d94b4 <_strtod_l+0x254>
   d9444:	9007      	str	r0, [sp, #28]
   d9446:	463d      	mov	r5, r7
   d9448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d944c:	2a09      	cmp	r2, #9
   d944e:	d912      	bls.n	d9476 <_strtod_l+0x216>
   d9450:	2201      	movs	r2, #1
   d9452:	e7c2      	b.n	d93da <_strtod_l+0x17a>
   d9454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9456:	1c5a      	adds	r2, r3, #1
   d9458:	921d      	str	r2, [sp, #116]	; 0x74
   d945a:	785b      	ldrb	r3, [r3, #1]
   d945c:	3001      	adds	r0, #1
   d945e:	2b30      	cmp	r3, #48	; 0x30
   d9460:	d0f8      	beq.n	d9454 <_strtod_l+0x1f4>
   d9462:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9466:	2a08      	cmp	r2, #8
   d9468:	f200 84db 	bhi.w	d9e22 <_strtod_l+0xbc2>
   d946c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d946e:	9007      	str	r0, [sp, #28]
   d9470:	2000      	movs	r0, #0
   d9472:	920a      	str	r2, [sp, #40]	; 0x28
   d9474:	4605      	mov	r5, r0
   d9476:	3b30      	subs	r3, #48	; 0x30
   d9478:	f100 0201 	add.w	r2, r0, #1
   d947c:	d014      	beq.n	d94a8 <_strtod_l+0x248>
   d947e:	9907      	ldr	r1, [sp, #28]
   d9480:	4411      	add	r1, r2
   d9482:	9107      	str	r1, [sp, #28]
   d9484:	462a      	mov	r2, r5
   d9486:	eb00 0e05 	add.w	lr, r0, r5
   d948a:	210a      	movs	r1, #10
   d948c:	4572      	cmp	r2, lr
   d948e:	d113      	bne.n	d94b8 <_strtod_l+0x258>
   d9490:	182a      	adds	r2, r5, r0
   d9492:	2a08      	cmp	r2, #8
   d9494:	f105 0501 	add.w	r5, r5, #1
   d9498:	4405      	add	r5, r0
   d949a:	dc1c      	bgt.n	d94d6 <_strtod_l+0x276>
   d949c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d949e:	220a      	movs	r2, #10
   d94a0:	fb02 3301 	mla	r3, r2, r1, r3
   d94a4:	9309      	str	r3, [sp, #36]	; 0x24
   d94a6:	2200      	movs	r2, #0
   d94a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d94aa:	1c59      	adds	r1, r3, #1
   d94ac:	911d      	str	r1, [sp, #116]	; 0x74
   d94ae:	785b      	ldrb	r3, [r3, #1]
   d94b0:	4610      	mov	r0, r2
   d94b2:	e7c9      	b.n	d9448 <_strtod_l+0x1e8>
   d94b4:	4638      	mov	r0, r7
   d94b6:	e7d2      	b.n	d945e <_strtod_l+0x1fe>
   d94b8:	2a08      	cmp	r2, #8
   d94ba:	dc04      	bgt.n	d94c6 <_strtod_l+0x266>
   d94bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d94be:	434e      	muls	r6, r1
   d94c0:	9609      	str	r6, [sp, #36]	; 0x24
   d94c2:	3201      	adds	r2, #1
   d94c4:	e7e2      	b.n	d948c <_strtod_l+0x22c>
   d94c6:	f102 0c01 	add.w	ip, r2, #1
   d94ca:	f1bc 0f10 	cmp.w	ip, #16
   d94ce:	bfd8      	it	le
   d94d0:	fb01 f909 	mulle.w	r9, r1, r9
   d94d4:	e7f5      	b.n	d94c2 <_strtod_l+0x262>
   d94d6:	2d10      	cmp	r5, #16
   d94d8:	bfdc      	itt	le
   d94da:	220a      	movle	r2, #10
   d94dc:	fb02 3909 	mlale	r9, r2, r9, r3
   d94e0:	e7e1      	b.n	d94a6 <_strtod_l+0x246>
   d94e2:	2300      	movs	r3, #0
   d94e4:	9307      	str	r3, [sp, #28]
   d94e6:	2201      	movs	r2, #1
   d94e8:	e77c      	b.n	d93e4 <_strtod_l+0x184>
   d94ea:	f04f 0c00 	mov.w	ip, #0
   d94ee:	f108 0302 	add.w	r3, r8, #2
   d94f2:	931d      	str	r3, [sp, #116]	; 0x74
   d94f4:	f898 3002 	ldrb.w	r3, [r8, #2]
   d94f8:	e785      	b.n	d9406 <_strtod_l+0x1a6>
   d94fa:	f04f 0c01 	mov.w	ip, #1
   d94fe:	e7f6      	b.n	d94ee <_strtod_l+0x28e>
   d9500:	000dc3e4 	.word	0x000dc3e4
   d9504:	000dc28c 	.word	0x000dc28c
   d9508:	7ff00000 	.word	0x7ff00000
   d950c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d950e:	1c59      	adds	r1, r3, #1
   d9510:	911d      	str	r1, [sp, #116]	; 0x74
   d9512:	785b      	ldrb	r3, [r3, #1]
   d9514:	2b30      	cmp	r3, #48	; 0x30
   d9516:	d0f9      	beq.n	d950c <_strtod_l+0x2ac>
   d9518:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d951c:	2908      	cmp	r1, #8
   d951e:	f63f af79 	bhi.w	d9414 <_strtod_l+0x1b4>
   d9522:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9528:	9308      	str	r3, [sp, #32]
   d952a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d952c:	1c59      	adds	r1, r3, #1
   d952e:	911d      	str	r1, [sp, #116]	; 0x74
   d9530:	785b      	ldrb	r3, [r3, #1]
   d9532:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9536:	2e09      	cmp	r6, #9
   d9538:	d937      	bls.n	d95aa <_strtod_l+0x34a>
   d953a:	9e08      	ldr	r6, [sp, #32]
   d953c:	1b89      	subs	r1, r1, r6
   d953e:	2908      	cmp	r1, #8
   d9540:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9544:	dc02      	bgt.n	d954c <_strtod_l+0x2ec>
   d9546:	4576      	cmp	r6, lr
   d9548:	bfa8      	it	ge
   d954a:	4676      	movge	r6, lr
   d954c:	f1bc 0f00 	cmp.w	ip, #0
   d9550:	d000      	beq.n	d9554 <_strtod_l+0x2f4>
   d9552:	4276      	negs	r6, r6
   d9554:	2d00      	cmp	r5, #0
   d9556:	d14f      	bne.n	d95f8 <_strtod_l+0x398>
   d9558:	9904      	ldr	r1, [sp, #16]
   d955a:	4301      	orrs	r1, r0
   d955c:	f47f aec2 	bne.w	d92e4 <_strtod_l+0x84>
   d9560:	2a00      	cmp	r2, #0
   d9562:	f47f aedb 	bne.w	d931c <_strtod_l+0xbc>
   d9566:	2b69      	cmp	r3, #105	; 0x69
   d9568:	d027      	beq.n	d95ba <_strtod_l+0x35a>
   d956a:	dc24      	bgt.n	d95b6 <_strtod_l+0x356>
   d956c:	2b49      	cmp	r3, #73	; 0x49
   d956e:	d024      	beq.n	d95ba <_strtod_l+0x35a>
   d9570:	2b4e      	cmp	r3, #78	; 0x4e
   d9572:	f47f aed3 	bne.w	d931c <_strtod_l+0xbc>
   d9576:	499e      	ldr	r1, [pc, #632]	; (d97f0 <_strtod_l+0x590>)
   d9578:	a81d      	add	r0, sp, #116	; 0x74
   d957a:	f000 ffb9 	bl	da4f0 <__match>
   d957e:	2800      	cmp	r0, #0
   d9580:	f43f aecc 	beq.w	d931c <_strtod_l+0xbc>
   d9584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9586:	781b      	ldrb	r3, [r3, #0]
   d9588:	2b28      	cmp	r3, #40	; 0x28
   d958a:	d12d      	bne.n	d95e8 <_strtod_l+0x388>
   d958c:	4999      	ldr	r1, [pc, #612]	; (d97f4 <_strtod_l+0x594>)
   d958e:	aa20      	add	r2, sp, #128	; 0x80
   d9590:	a81d      	add	r0, sp, #116	; 0x74
   d9592:	f000 ffc1 	bl	da518 <__hexnan>
   d9596:	2805      	cmp	r0, #5
   d9598:	d126      	bne.n	d95e8 <_strtod_l+0x388>
   d959a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d959c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d95a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d95a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d95a8:	e69c      	b.n	d92e4 <_strtod_l+0x84>
   d95aa:	210a      	movs	r1, #10
   d95ac:	fb01 3e0e 	mla	lr, r1, lr, r3
   d95b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d95b4:	e7b9      	b.n	d952a <_strtod_l+0x2ca>
   d95b6:	2b6e      	cmp	r3, #110	; 0x6e
   d95b8:	e7db      	b.n	d9572 <_strtod_l+0x312>
   d95ba:	498f      	ldr	r1, [pc, #572]	; (d97f8 <_strtod_l+0x598>)
   d95bc:	a81d      	add	r0, sp, #116	; 0x74
   d95be:	f000 ff97 	bl	da4f0 <__match>
   d95c2:	2800      	cmp	r0, #0
   d95c4:	f43f aeaa 	beq.w	d931c <_strtod_l+0xbc>
   d95c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95ca:	498c      	ldr	r1, [pc, #560]	; (d97fc <_strtod_l+0x59c>)
   d95cc:	3b01      	subs	r3, #1
   d95ce:	a81d      	add	r0, sp, #116	; 0x74
   d95d0:	931d      	str	r3, [sp, #116]	; 0x74
   d95d2:	f000 ff8d 	bl	da4f0 <__match>
   d95d6:	b910      	cbnz	r0, d95de <_strtod_l+0x37e>
   d95d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95da:	3301      	adds	r3, #1
   d95dc:	931d      	str	r3, [sp, #116]	; 0x74
   d95de:	f8df b22c 	ldr.w	fp, [pc, #556]	; d980c <_strtod_l+0x5ac>
   d95e2:	f04f 0a00 	mov.w	sl, #0
   d95e6:	e67d      	b.n	d92e4 <_strtod_l+0x84>
   d95e8:	4885      	ldr	r0, [pc, #532]	; (d9800 <_strtod_l+0x5a0>)
   d95ea:	f001 fc91 	bl	daf10 <nan>
   d95ee:	ed8d 0b04 	vstr	d0, [sp, #16]
   d95f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d95f6:	e675      	b.n	d92e4 <_strtod_l+0x84>
   d95f8:	9b07      	ldr	r3, [sp, #28]
   d95fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   d95fc:	1af3      	subs	r3, r6, r3
   d95fe:	2f00      	cmp	r7, #0
   d9600:	bf08      	it	eq
   d9602:	462f      	moveq	r7, r5
   d9604:	2d10      	cmp	r5, #16
   d9606:	9308      	str	r3, [sp, #32]
   d9608:	46a8      	mov	r8, r5
   d960a:	bfa8      	it	ge
   d960c:	f04f 0810 	movge.w	r8, #16
   d9610:	f7ff f99e 	bl	d8950 <__aeabi_ui2d>
   d9614:	2d09      	cmp	r5, #9
   d9616:	4682      	mov	sl, r0
   d9618:	468b      	mov	fp, r1
   d961a:	dd13      	ble.n	d9644 <_strtod_l+0x3e4>
   d961c:	4b79      	ldr	r3, [pc, #484]	; (d9804 <_strtod_l+0x5a4>)
   d961e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9626:	f7ff fa0d 	bl	d8a44 <__aeabi_dmul>
   d962a:	4682      	mov	sl, r0
   d962c:	4648      	mov	r0, r9
   d962e:	468b      	mov	fp, r1
   d9630:	f7ff f98e 	bl	d8950 <__aeabi_ui2d>
   d9634:	4602      	mov	r2, r0
   d9636:	460b      	mov	r3, r1
   d9638:	4650      	mov	r0, sl
   d963a:	4659      	mov	r1, fp
   d963c:	f7ff f84c 	bl	d86d8 <__adddf3>
   d9640:	4682      	mov	sl, r0
   d9642:	468b      	mov	fp, r1
   d9644:	2d0f      	cmp	r5, #15
   d9646:	dc38      	bgt.n	d96ba <_strtod_l+0x45a>
   d9648:	9b08      	ldr	r3, [sp, #32]
   d964a:	2b00      	cmp	r3, #0
   d964c:	f43f ae4a 	beq.w	d92e4 <_strtod_l+0x84>
   d9650:	dd24      	ble.n	d969c <_strtod_l+0x43c>
   d9652:	2b16      	cmp	r3, #22
   d9654:	dc0b      	bgt.n	d966e <_strtod_l+0x40e>
   d9656:	4d6b      	ldr	r5, [pc, #428]	; (d9804 <_strtod_l+0x5a4>)
   d9658:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d965c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9660:	4652      	mov	r2, sl
   d9662:	465b      	mov	r3, fp
   d9664:	f7ff f9ee 	bl	d8a44 <__aeabi_dmul>
   d9668:	4682      	mov	sl, r0
   d966a:	468b      	mov	fp, r1
   d966c:	e63a      	b.n	d92e4 <_strtod_l+0x84>
   d966e:	9a08      	ldr	r2, [sp, #32]
   d9670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9674:	4293      	cmp	r3, r2
   d9676:	db20      	blt.n	d96ba <_strtod_l+0x45a>
   d9678:	4c62      	ldr	r4, [pc, #392]	; (d9804 <_strtod_l+0x5a4>)
   d967a:	f1c5 050f 	rsb	r5, r5, #15
   d967e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9682:	4652      	mov	r2, sl
   d9684:	465b      	mov	r3, fp
   d9686:	e9d1 0100 	ldrd	r0, r1, [r1]
   d968a:	f7ff f9db 	bl	d8a44 <__aeabi_dmul>
   d968e:	9b08      	ldr	r3, [sp, #32]
   d9690:	1b5d      	subs	r5, r3, r5
   d9692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9696:	e9d4 2300 	ldrd	r2, r3, [r4]
   d969a:	e7e3      	b.n	d9664 <_strtod_l+0x404>
   d969c:	9b08      	ldr	r3, [sp, #32]
   d969e:	3316      	adds	r3, #22
   d96a0:	db0b      	blt.n	d96ba <_strtod_l+0x45a>
   d96a2:	9b07      	ldr	r3, [sp, #28]
   d96a4:	4a57      	ldr	r2, [pc, #348]	; (d9804 <_strtod_l+0x5a4>)
   d96a6:	1b9e      	subs	r6, r3, r6
   d96a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d96ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   d96b0:	4650      	mov	r0, sl
   d96b2:	4659      	mov	r1, fp
   d96b4:	f7ff faf0 	bl	d8c98 <__aeabi_ddiv>
   d96b8:	e7d6      	b.n	d9668 <_strtod_l+0x408>
   d96ba:	9b08      	ldr	r3, [sp, #32]
   d96bc:	eba5 0808 	sub.w	r8, r5, r8
   d96c0:	4498      	add	r8, r3
   d96c2:	f1b8 0f00 	cmp.w	r8, #0
   d96c6:	dd71      	ble.n	d97ac <_strtod_l+0x54c>
   d96c8:	f018 030f 	ands.w	r3, r8, #15
   d96cc:	d00a      	beq.n	d96e4 <_strtod_l+0x484>
   d96ce:	494d      	ldr	r1, [pc, #308]	; (d9804 <_strtod_l+0x5a4>)
   d96d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d96d4:	4652      	mov	r2, sl
   d96d6:	465b      	mov	r3, fp
   d96d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d96dc:	f7ff f9b2 	bl	d8a44 <__aeabi_dmul>
   d96e0:	4682      	mov	sl, r0
   d96e2:	468b      	mov	fp, r1
   d96e4:	f038 080f 	bics.w	r8, r8, #15
   d96e8:	d04d      	beq.n	d9786 <_strtod_l+0x526>
   d96ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d96ee:	dd22      	ble.n	d9736 <_strtod_l+0x4d6>
   d96f0:	2500      	movs	r5, #0
   d96f2:	462e      	mov	r6, r5
   d96f4:	9509      	str	r5, [sp, #36]	; 0x24
   d96f6:	9507      	str	r5, [sp, #28]
   d96f8:	2322      	movs	r3, #34	; 0x22
   d96fa:	f8df b110 	ldr.w	fp, [pc, #272]	; d980c <_strtod_l+0x5ac>
   d96fe:	6023      	str	r3, [r4, #0]
   d9700:	f04f 0a00 	mov.w	sl, #0
   d9704:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9706:	2b00      	cmp	r3, #0
   d9708:	f43f adec 	beq.w	d92e4 <_strtod_l+0x84>
   d970c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d970e:	4620      	mov	r0, r4
   d9710:	f000 ffe4 	bl	da6dc <_Bfree>
   d9714:	9907      	ldr	r1, [sp, #28]
   d9716:	4620      	mov	r0, r4
   d9718:	f000 ffe0 	bl	da6dc <_Bfree>
   d971c:	4631      	mov	r1, r6
   d971e:	4620      	mov	r0, r4
   d9720:	f000 ffdc 	bl	da6dc <_Bfree>
   d9724:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9726:	4620      	mov	r0, r4
   d9728:	f000 ffd8 	bl	da6dc <_Bfree>
   d972c:	4629      	mov	r1, r5
   d972e:	4620      	mov	r0, r4
   d9730:	f000 ffd4 	bl	da6dc <_Bfree>
   d9734:	e5d6      	b.n	d92e4 <_strtod_l+0x84>
   d9736:	2300      	movs	r3, #0
   d9738:	ea4f 1828 	mov.w	r8, r8, asr #4
   d973c:	4650      	mov	r0, sl
   d973e:	4659      	mov	r1, fp
   d9740:	4699      	mov	r9, r3
   d9742:	f1b8 0f01 	cmp.w	r8, #1
   d9746:	dc21      	bgt.n	d978c <_strtod_l+0x52c>
   d9748:	b10b      	cbz	r3, d974e <_strtod_l+0x4ee>
   d974a:	4682      	mov	sl, r0
   d974c:	468b      	mov	fp, r1
   d974e:	4b2e      	ldr	r3, [pc, #184]	; (d9808 <_strtod_l+0x5a8>)
   d9750:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9754:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9758:	4652      	mov	r2, sl
   d975a:	465b      	mov	r3, fp
   d975c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9760:	f7ff f970 	bl	d8a44 <__aeabi_dmul>
   d9764:	4b29      	ldr	r3, [pc, #164]	; (d980c <_strtod_l+0x5ac>)
   d9766:	460a      	mov	r2, r1
   d9768:	400b      	ands	r3, r1
   d976a:	4929      	ldr	r1, [pc, #164]	; (d9810 <_strtod_l+0x5b0>)
   d976c:	428b      	cmp	r3, r1
   d976e:	4682      	mov	sl, r0
   d9770:	d8be      	bhi.n	d96f0 <_strtod_l+0x490>
   d9772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9776:	428b      	cmp	r3, r1
   d9778:	bf86      	itte	hi
   d977a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9814 <_strtod_l+0x5b4>
   d977e:	f04f 3aff 	movhi.w	sl, #4294967295
   d9782:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9786:	2300      	movs	r3, #0
   d9788:	9304      	str	r3, [sp, #16]
   d978a:	e081      	b.n	d9890 <_strtod_l+0x630>
   d978c:	f018 0f01 	tst.w	r8, #1
   d9790:	d007      	beq.n	d97a2 <_strtod_l+0x542>
   d9792:	4b1d      	ldr	r3, [pc, #116]	; (d9808 <_strtod_l+0x5a8>)
   d9794:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9798:	e9d3 2300 	ldrd	r2, r3, [r3]
   d979c:	f7ff f952 	bl	d8a44 <__aeabi_dmul>
   d97a0:	2301      	movs	r3, #1
   d97a2:	f109 0901 	add.w	r9, r9, #1
   d97a6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d97aa:	e7ca      	b.n	d9742 <_strtod_l+0x4e2>
   d97ac:	d0eb      	beq.n	d9786 <_strtod_l+0x526>
   d97ae:	f1c8 0800 	rsb	r8, r8, #0
   d97b2:	f018 020f 	ands.w	r2, r8, #15
   d97b6:	d00a      	beq.n	d97ce <_strtod_l+0x56e>
   d97b8:	4b12      	ldr	r3, [pc, #72]	; (d9804 <_strtod_l+0x5a4>)
   d97ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d97be:	4650      	mov	r0, sl
   d97c0:	4659      	mov	r1, fp
   d97c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97c6:	f7ff fa67 	bl	d8c98 <__aeabi_ddiv>
   d97ca:	4682      	mov	sl, r0
   d97cc:	468b      	mov	fp, r1
   d97ce:	ea5f 1828 	movs.w	r8, r8, asr #4
   d97d2:	d0d8      	beq.n	d9786 <_strtod_l+0x526>
   d97d4:	f1b8 0f1f 	cmp.w	r8, #31
   d97d8:	dd1e      	ble.n	d9818 <_strtod_l+0x5b8>
   d97da:	2500      	movs	r5, #0
   d97dc:	462e      	mov	r6, r5
   d97de:	9509      	str	r5, [sp, #36]	; 0x24
   d97e0:	9507      	str	r5, [sp, #28]
   d97e2:	2322      	movs	r3, #34	; 0x22
   d97e4:	f04f 0a00 	mov.w	sl, #0
   d97e8:	f04f 0b00 	mov.w	fp, #0
   d97ec:	6023      	str	r3, [r4, #0]
   d97ee:	e789      	b.n	d9704 <_strtod_l+0x4a4>
   d97f0:	000dbfcd 	.word	0x000dbfcd
   d97f4:	000dc2a0 	.word	0x000dc2a0
   d97f8:	000dbfd1 	.word	0x000dbfd1
   d97fc:	000dc285 	.word	0x000dc285
   d9800:	000db044 	.word	0x000db044
   d9804:	000dc420 	.word	0x000dc420
   d9808:	000dc3f8 	.word	0x000dc3f8
   d980c:	7ff00000 	.word	0x7ff00000
   d9810:	7ca00000 	.word	0x7ca00000
   d9814:	7fefffff 	.word	0x7fefffff
   d9818:	f018 0310 	ands.w	r3, r8, #16
   d981c:	bf18      	it	ne
   d981e:	236a      	movne	r3, #106	; 0x6a
   d9820:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9bd8 <_strtod_l+0x978>
   d9824:	9304      	str	r3, [sp, #16]
   d9826:	4650      	mov	r0, sl
   d9828:	4659      	mov	r1, fp
   d982a:	2300      	movs	r3, #0
   d982c:	f018 0f01 	tst.w	r8, #1
   d9830:	d004      	beq.n	d983c <_strtod_l+0x5dc>
   d9832:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9836:	f7ff f905 	bl	d8a44 <__aeabi_dmul>
   d983a:	2301      	movs	r3, #1
   d983c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9840:	f109 0908 	add.w	r9, r9, #8
   d9844:	d1f2      	bne.n	d982c <_strtod_l+0x5cc>
   d9846:	b10b      	cbz	r3, d984c <_strtod_l+0x5ec>
   d9848:	4682      	mov	sl, r0
   d984a:	468b      	mov	fp, r1
   d984c:	9b04      	ldr	r3, [sp, #16]
   d984e:	b1bb      	cbz	r3, d9880 <_strtod_l+0x620>
   d9850:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9854:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9858:	2b00      	cmp	r3, #0
   d985a:	4659      	mov	r1, fp
   d985c:	dd10      	ble.n	d9880 <_strtod_l+0x620>
   d985e:	2b1f      	cmp	r3, #31
   d9860:	f340 8128 	ble.w	d9ab4 <_strtod_l+0x854>
   d9864:	2b34      	cmp	r3, #52	; 0x34
   d9866:	bfde      	ittt	le
   d9868:	3b20      	suble	r3, #32
   d986a:	f04f 32ff 	movle.w	r2, #4294967295
   d986e:	fa02 f303 	lslle.w	r3, r2, r3
   d9872:	f04f 0a00 	mov.w	sl, #0
   d9876:	bfcc      	ite	gt
   d9878:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d987c:	ea03 0b01 	andle.w	fp, r3, r1
   d9880:	2200      	movs	r2, #0
   d9882:	2300      	movs	r3, #0
   d9884:	4650      	mov	r0, sl
   d9886:	4659      	mov	r1, fp
   d9888:	f7ff fb44 	bl	d8f14 <__aeabi_dcmpeq>
   d988c:	2800      	cmp	r0, #0
   d988e:	d1a4      	bne.n	d97da <_strtod_l+0x57a>
   d9890:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9892:	9300      	str	r3, [sp, #0]
   d9894:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9896:	462b      	mov	r3, r5
   d9898:	463a      	mov	r2, r7
   d989a:	4620      	mov	r0, r4
   d989c:	f000 ff73 	bl	da786 <__s2b>
   d98a0:	9009      	str	r0, [sp, #36]	; 0x24
   d98a2:	2800      	cmp	r0, #0
   d98a4:	f43f af24 	beq.w	d96f0 <_strtod_l+0x490>
   d98a8:	9b07      	ldr	r3, [sp, #28]
   d98aa:	1b9e      	subs	r6, r3, r6
   d98ac:	9b08      	ldr	r3, [sp, #32]
   d98ae:	2b00      	cmp	r3, #0
   d98b0:	bfb4      	ite	lt
   d98b2:	4633      	movlt	r3, r6
   d98b4:	2300      	movge	r3, #0
   d98b6:	9310      	str	r3, [sp, #64]	; 0x40
   d98b8:	9b08      	ldr	r3, [sp, #32]
   d98ba:	2500      	movs	r5, #0
   d98bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d98c0:	9318      	str	r3, [sp, #96]	; 0x60
   d98c2:	462e      	mov	r6, r5
   d98c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d98c6:	4620      	mov	r0, r4
   d98c8:	6859      	ldr	r1, [r3, #4]
   d98ca:	f000 fed3 	bl	da674 <_Balloc>
   d98ce:	9007      	str	r0, [sp, #28]
   d98d0:	2800      	cmp	r0, #0
   d98d2:	f43f af11 	beq.w	d96f8 <_strtod_l+0x498>
   d98d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d98d8:	691a      	ldr	r2, [r3, #16]
   d98da:	3202      	adds	r2, #2
   d98dc:	f103 010c 	add.w	r1, r3, #12
   d98e0:	0092      	lsls	r2, r2, #2
   d98e2:	300c      	adds	r0, #12
   d98e4:	f7ff fc2e 	bl	d9144 <memcpy>
   d98e8:	ec4b ab10 	vmov	d0, sl, fp
   d98ec:	aa20      	add	r2, sp, #128	; 0x80
   d98ee:	a91f      	add	r1, sp, #124	; 0x7c
   d98f0:	4620      	mov	r0, r4
   d98f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d98f6:	f001 fa35 	bl	dad64 <__d2b>
   d98fa:	901e      	str	r0, [sp, #120]	; 0x78
   d98fc:	2800      	cmp	r0, #0
   d98fe:	f43f aefb 	beq.w	d96f8 <_strtod_l+0x498>
   d9902:	2101      	movs	r1, #1
   d9904:	4620      	mov	r0, r4
   d9906:	f000 ffcc 	bl	da8a2 <__i2b>
   d990a:	4606      	mov	r6, r0
   d990c:	2800      	cmp	r0, #0
   d990e:	f43f aef3 	beq.w	d96f8 <_strtod_l+0x498>
   d9912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9914:	9904      	ldr	r1, [sp, #16]
   d9916:	2b00      	cmp	r3, #0
   d9918:	bfab      	itete	ge
   d991a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d991c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d991e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9920:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9924:	bfac      	ite	ge
   d9926:	eb03 0902 	addge.w	r9, r3, r2
   d992a:	1ad7      	sublt	r7, r2, r3
   d992c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d992e:	eba3 0801 	sub.w	r8, r3, r1
   d9932:	4490      	add	r8, r2
   d9934:	4ba3      	ldr	r3, [pc, #652]	; (d9bc4 <_strtod_l+0x964>)
   d9936:	f108 38ff 	add.w	r8, r8, #4294967295
   d993a:	4598      	cmp	r8, r3
   d993c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9940:	f280 80cc 	bge.w	d9adc <_strtod_l+0x87c>
   d9944:	eba3 0308 	sub.w	r3, r3, r8
   d9948:	2b1f      	cmp	r3, #31
   d994a:	eba2 0203 	sub.w	r2, r2, r3
   d994e:	f04f 0101 	mov.w	r1, #1
   d9952:	f300 80b6 	bgt.w	d9ac2 <_strtod_l+0x862>
   d9956:	fa01 f303 	lsl.w	r3, r1, r3
   d995a:	9311      	str	r3, [sp, #68]	; 0x44
   d995c:	2300      	movs	r3, #0
   d995e:	930c      	str	r3, [sp, #48]	; 0x30
   d9960:	eb09 0802 	add.w	r8, r9, r2
   d9964:	9b04      	ldr	r3, [sp, #16]
   d9966:	45c1      	cmp	r9, r8
   d9968:	4417      	add	r7, r2
   d996a:	441f      	add	r7, r3
   d996c:	464b      	mov	r3, r9
   d996e:	bfa8      	it	ge
   d9970:	4643      	movge	r3, r8
   d9972:	42bb      	cmp	r3, r7
   d9974:	bfa8      	it	ge
   d9976:	463b      	movge	r3, r7
   d9978:	2b00      	cmp	r3, #0
   d997a:	bfc2      	ittt	gt
   d997c:	eba8 0803 	subgt.w	r8, r8, r3
   d9980:	1aff      	subgt	r7, r7, r3
   d9982:	eba9 0903 	subgt.w	r9, r9, r3
   d9986:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9988:	2b00      	cmp	r3, #0
   d998a:	dd17      	ble.n	d99bc <_strtod_l+0x75c>
   d998c:	4631      	mov	r1, r6
   d998e:	461a      	mov	r2, r3
   d9990:	4620      	mov	r0, r4
   d9992:	f001 f82b 	bl	da9ec <__pow5mult>
   d9996:	4606      	mov	r6, r0
   d9998:	2800      	cmp	r0, #0
   d999a:	f43f aead 	beq.w	d96f8 <_strtod_l+0x498>
   d999e:	4601      	mov	r1, r0
   d99a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d99a2:	4620      	mov	r0, r4
   d99a4:	f000 ff86 	bl	da8b4 <__multiply>
   d99a8:	900f      	str	r0, [sp, #60]	; 0x3c
   d99aa:	2800      	cmp	r0, #0
   d99ac:	f43f aea4 	beq.w	d96f8 <_strtod_l+0x498>
   d99b0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d99b2:	4620      	mov	r0, r4
   d99b4:	f000 fe92 	bl	da6dc <_Bfree>
   d99b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d99ba:	931e      	str	r3, [sp, #120]	; 0x78
   d99bc:	f1b8 0f00 	cmp.w	r8, #0
   d99c0:	f300 8091 	bgt.w	d9ae6 <_strtod_l+0x886>
   d99c4:	9b08      	ldr	r3, [sp, #32]
   d99c6:	2b00      	cmp	r3, #0
   d99c8:	dd08      	ble.n	d99dc <_strtod_l+0x77c>
   d99ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d99cc:	9907      	ldr	r1, [sp, #28]
   d99ce:	4620      	mov	r0, r4
   d99d0:	f001 f80c 	bl	da9ec <__pow5mult>
   d99d4:	9007      	str	r0, [sp, #28]
   d99d6:	2800      	cmp	r0, #0
   d99d8:	f43f ae8e 	beq.w	d96f8 <_strtod_l+0x498>
   d99dc:	2f00      	cmp	r7, #0
   d99de:	dd08      	ble.n	d99f2 <_strtod_l+0x792>
   d99e0:	9907      	ldr	r1, [sp, #28]
   d99e2:	463a      	mov	r2, r7
   d99e4:	4620      	mov	r0, r4
   d99e6:	f001 f84f 	bl	daa88 <__lshift>
   d99ea:	9007      	str	r0, [sp, #28]
   d99ec:	2800      	cmp	r0, #0
   d99ee:	f43f ae83 	beq.w	d96f8 <_strtod_l+0x498>
   d99f2:	f1b9 0f00 	cmp.w	r9, #0
   d99f6:	dd08      	ble.n	d9a0a <_strtod_l+0x7aa>
   d99f8:	4631      	mov	r1, r6
   d99fa:	464a      	mov	r2, r9
   d99fc:	4620      	mov	r0, r4
   d99fe:	f001 f843 	bl	daa88 <__lshift>
   d9a02:	4606      	mov	r6, r0
   d9a04:	2800      	cmp	r0, #0
   d9a06:	f43f ae77 	beq.w	d96f8 <_strtod_l+0x498>
   d9a0a:	9a07      	ldr	r2, [sp, #28]
   d9a0c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a0e:	4620      	mov	r0, r4
   d9a10:	f001 f8b5 	bl	dab7e <__mdiff>
   d9a14:	4605      	mov	r5, r0
   d9a16:	2800      	cmp	r0, #0
   d9a18:	f43f ae6e 	beq.w	d96f8 <_strtod_l+0x498>
   d9a1c:	68c3      	ldr	r3, [r0, #12]
   d9a1e:	930f      	str	r3, [sp, #60]	; 0x3c
   d9a20:	2300      	movs	r3, #0
   d9a22:	60c3      	str	r3, [r0, #12]
   d9a24:	4631      	mov	r1, r6
   d9a26:	f001 f88e 	bl	dab46 <__mcmp>
   d9a2a:	2800      	cmp	r0, #0
   d9a2c:	da65      	bge.n	d9afa <_strtod_l+0x89a>
   d9a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9a30:	ea53 030a 	orrs.w	r3, r3, sl
   d9a34:	f040 8087 	bne.w	d9b46 <_strtod_l+0x8e6>
   d9a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9a3c:	2b00      	cmp	r3, #0
   d9a3e:	f040 8082 	bne.w	d9b46 <_strtod_l+0x8e6>
   d9a42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9a46:	0d1b      	lsrs	r3, r3, #20
   d9a48:	051b      	lsls	r3, r3, #20
   d9a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9a4e:	d97a      	bls.n	d9b46 <_strtod_l+0x8e6>
   d9a50:	696b      	ldr	r3, [r5, #20]
   d9a52:	b913      	cbnz	r3, d9a5a <_strtod_l+0x7fa>
   d9a54:	692b      	ldr	r3, [r5, #16]
   d9a56:	2b01      	cmp	r3, #1
   d9a58:	dd75      	ble.n	d9b46 <_strtod_l+0x8e6>
   d9a5a:	4629      	mov	r1, r5
   d9a5c:	2201      	movs	r2, #1
   d9a5e:	4620      	mov	r0, r4
   d9a60:	f001 f812 	bl	daa88 <__lshift>
   d9a64:	4631      	mov	r1, r6
   d9a66:	4605      	mov	r5, r0
   d9a68:	f001 f86d 	bl	dab46 <__mcmp>
   d9a6c:	2800      	cmp	r0, #0
   d9a6e:	dd6a      	ble.n	d9b46 <_strtod_l+0x8e6>
   d9a70:	9904      	ldr	r1, [sp, #16]
   d9a72:	4a55      	ldr	r2, [pc, #340]	; (d9bc8 <_strtod_l+0x968>)
   d9a74:	465b      	mov	r3, fp
   d9a76:	2900      	cmp	r1, #0
   d9a78:	f000 8085 	beq.w	d9b86 <_strtod_l+0x926>
   d9a7c:	ea02 010b 	and.w	r1, r2, fp
   d9a80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9a84:	dc7f      	bgt.n	d9b86 <_strtod_l+0x926>
   d9a86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9a8a:	f77f aeaa 	ble.w	d97e2 <_strtod_l+0x582>
   d9a8e:	4a4f      	ldr	r2, [pc, #316]	; (d9bcc <_strtod_l+0x96c>)
   d9a90:	2300      	movs	r3, #0
   d9a92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9a96:	4650      	mov	r0, sl
   d9a98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9a9c:	4659      	mov	r1, fp
   d9a9e:	f7fe ffd1 	bl	d8a44 <__aeabi_dmul>
   d9aa2:	460b      	mov	r3, r1
   d9aa4:	4303      	orrs	r3, r0
   d9aa6:	bf08      	it	eq
   d9aa8:	2322      	moveq	r3, #34	; 0x22
   d9aaa:	4682      	mov	sl, r0
   d9aac:	468b      	mov	fp, r1
   d9aae:	bf08      	it	eq
   d9ab0:	6023      	streq	r3, [r4, #0]
   d9ab2:	e62b      	b.n	d970c <_strtod_l+0x4ac>
   d9ab4:	f04f 32ff 	mov.w	r2, #4294967295
   d9ab8:	fa02 f303 	lsl.w	r3, r2, r3
   d9abc:	ea03 0a0a 	and.w	sl, r3, sl
   d9ac0:	e6de      	b.n	d9880 <_strtod_l+0x620>
   d9ac2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9ac6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9aca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9ace:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9ad2:	fa01 f308 	lsl.w	r3, r1, r8
   d9ad6:	930c      	str	r3, [sp, #48]	; 0x30
   d9ad8:	9111      	str	r1, [sp, #68]	; 0x44
   d9ada:	e741      	b.n	d9960 <_strtod_l+0x700>
   d9adc:	2300      	movs	r3, #0
   d9ade:	930c      	str	r3, [sp, #48]	; 0x30
   d9ae0:	2301      	movs	r3, #1
   d9ae2:	9311      	str	r3, [sp, #68]	; 0x44
   d9ae4:	e73c      	b.n	d9960 <_strtod_l+0x700>
   d9ae6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ae8:	4642      	mov	r2, r8
   d9aea:	4620      	mov	r0, r4
   d9aec:	f000 ffcc 	bl	daa88 <__lshift>
   d9af0:	901e      	str	r0, [sp, #120]	; 0x78
   d9af2:	2800      	cmp	r0, #0
   d9af4:	f47f af66 	bne.w	d99c4 <_strtod_l+0x764>
   d9af8:	e5fe      	b.n	d96f8 <_strtod_l+0x498>
   d9afa:	465f      	mov	r7, fp
   d9afc:	d16e      	bne.n	d9bdc <_strtod_l+0x97c>
   d9afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9b04:	b342      	cbz	r2, d9b58 <_strtod_l+0x8f8>
   d9b06:	4a32      	ldr	r2, [pc, #200]	; (d9bd0 <_strtod_l+0x970>)
   d9b08:	4293      	cmp	r3, r2
   d9b0a:	d128      	bne.n	d9b5e <_strtod_l+0x8fe>
   d9b0c:	9b04      	ldr	r3, [sp, #16]
   d9b0e:	4650      	mov	r0, sl
   d9b10:	b1eb      	cbz	r3, d9b4e <_strtod_l+0x8ee>
   d9b12:	4a2d      	ldr	r2, [pc, #180]	; (d9bc8 <_strtod_l+0x968>)
   d9b14:	403a      	ands	r2, r7
   d9b16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9b1a:	f04f 31ff 	mov.w	r1, #4294967295
   d9b1e:	d819      	bhi.n	d9b54 <_strtod_l+0x8f4>
   d9b20:	0d12      	lsrs	r2, r2, #20
   d9b22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9b26:	fa01 f303 	lsl.w	r3, r1, r3
   d9b2a:	4298      	cmp	r0, r3
   d9b2c:	d117      	bne.n	d9b5e <_strtod_l+0x8fe>
   d9b2e:	4b29      	ldr	r3, [pc, #164]	; (d9bd4 <_strtod_l+0x974>)
   d9b30:	429f      	cmp	r7, r3
   d9b32:	d102      	bne.n	d9b3a <_strtod_l+0x8da>
   d9b34:	3001      	adds	r0, #1
   d9b36:	f43f addf 	beq.w	d96f8 <_strtod_l+0x498>
   d9b3a:	4b23      	ldr	r3, [pc, #140]	; (d9bc8 <_strtod_l+0x968>)
   d9b3c:	403b      	ands	r3, r7
   d9b3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9b42:	f04f 0a00 	mov.w	sl, #0
   d9b46:	9b04      	ldr	r3, [sp, #16]
   d9b48:	2b00      	cmp	r3, #0
   d9b4a:	d1a0      	bne.n	d9a8e <_strtod_l+0x82e>
   d9b4c:	e5de      	b.n	d970c <_strtod_l+0x4ac>
   d9b4e:	f04f 33ff 	mov.w	r3, #4294967295
   d9b52:	e7ea      	b.n	d9b2a <_strtod_l+0x8ca>
   d9b54:	460b      	mov	r3, r1
   d9b56:	e7e8      	b.n	d9b2a <_strtod_l+0x8ca>
   d9b58:	ea53 030a 	orrs.w	r3, r3, sl
   d9b5c:	d088      	beq.n	d9a70 <_strtod_l+0x810>
   d9b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9b60:	b1db      	cbz	r3, d9b9a <_strtod_l+0x93a>
   d9b62:	423b      	tst	r3, r7
   d9b64:	d0ef      	beq.n	d9b46 <_strtod_l+0x8e6>
   d9b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9b68:	9a04      	ldr	r2, [sp, #16]
   d9b6a:	4650      	mov	r0, sl
   d9b6c:	4659      	mov	r1, fp
   d9b6e:	b1c3      	cbz	r3, d9ba2 <_strtod_l+0x942>
   d9b70:	f7ff fb59 	bl	d9226 <sulp>
   d9b74:	4602      	mov	r2, r0
   d9b76:	460b      	mov	r3, r1
   d9b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9b7c:	f7fe fdac 	bl	d86d8 <__adddf3>
   d9b80:	4682      	mov	sl, r0
   d9b82:	468b      	mov	fp, r1
   d9b84:	e7df      	b.n	d9b46 <_strtod_l+0x8e6>
   d9b86:	4013      	ands	r3, r2
   d9b88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9b8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9b90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9b94:	f04f 3aff 	mov.w	sl, #4294967295
   d9b98:	e7d5      	b.n	d9b46 <_strtod_l+0x8e6>
   d9b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9b9c:	ea13 0f0a 	tst.w	r3, sl
   d9ba0:	e7e0      	b.n	d9b64 <_strtod_l+0x904>
   d9ba2:	f7ff fb40 	bl	d9226 <sulp>
   d9ba6:	4602      	mov	r2, r0
   d9ba8:	460b      	mov	r3, r1
   d9baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9bae:	f7fe fd91 	bl	d86d4 <__aeabi_dsub>
   d9bb2:	2200      	movs	r2, #0
   d9bb4:	2300      	movs	r3, #0
   d9bb6:	4682      	mov	sl, r0
   d9bb8:	468b      	mov	fp, r1
   d9bba:	f7ff f9ab 	bl	d8f14 <__aeabi_dcmpeq>
   d9bbe:	2800      	cmp	r0, #0
   d9bc0:	d0c1      	beq.n	d9b46 <_strtod_l+0x8e6>
   d9bc2:	e60e      	b.n	d97e2 <_strtod_l+0x582>
   d9bc4:	fffffc02 	.word	0xfffffc02
   d9bc8:	7ff00000 	.word	0x7ff00000
   d9bcc:	39500000 	.word	0x39500000
   d9bd0:	000fffff 	.word	0x000fffff
   d9bd4:	7fefffff 	.word	0x7fefffff
   d9bd8:	000dc2b8 	.word	0x000dc2b8
   d9bdc:	4631      	mov	r1, r6
   d9bde:	4628      	mov	r0, r5
   d9be0:	f001 f910 	bl	dae04 <__ratio>
   d9be4:	ec59 8b10 	vmov	r8, r9, d0
   d9be8:	ee10 0a10 	vmov	r0, s0
   d9bec:	2200      	movs	r2, #0
   d9bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9bf2:	4649      	mov	r1, r9
   d9bf4:	f7ff f9a2 	bl	d8f3c <__aeabi_dcmple>
   d9bf8:	2800      	cmp	r0, #0
   d9bfa:	d07c      	beq.n	d9cf6 <_strtod_l+0xa96>
   d9bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9bfe:	2b00      	cmp	r3, #0
   d9c00:	d04c      	beq.n	d9c9c <_strtod_l+0xa3c>
   d9c02:	4b95      	ldr	r3, [pc, #596]	; (d9e58 <_strtod_l+0xbf8>)
   d9c04:	2200      	movs	r2, #0
   d9c06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9c0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9e58 <_strtod_l+0xbf8>
   d9c0e:	f04f 0800 	mov.w	r8, #0
   d9c12:	4b92      	ldr	r3, [pc, #584]	; (d9e5c <_strtod_l+0xbfc>)
   d9c14:	403b      	ands	r3, r7
   d9c16:	9311      	str	r3, [sp, #68]	; 0x44
   d9c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9c1a:	4b91      	ldr	r3, [pc, #580]	; (d9e60 <_strtod_l+0xc00>)
   d9c1c:	429a      	cmp	r2, r3
   d9c1e:	f040 80b2 	bne.w	d9d86 <_strtod_l+0xb26>
   d9c22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9c2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9c2e:	ec4b ab10 	vmov	d0, sl, fp
   d9c32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9c36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9c3a:	f001 f817 	bl	dac6c <__ulp>
   d9c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9c42:	ec53 2b10 	vmov	r2, r3, d0
   d9c46:	f7fe fefd 	bl	d8a44 <__aeabi_dmul>
   d9c4a:	4652      	mov	r2, sl
   d9c4c:	465b      	mov	r3, fp
   d9c4e:	f7fe fd43 	bl	d86d8 <__adddf3>
   d9c52:	460b      	mov	r3, r1
   d9c54:	4981      	ldr	r1, [pc, #516]	; (d9e5c <_strtod_l+0xbfc>)
   d9c56:	4a83      	ldr	r2, [pc, #524]	; (d9e64 <_strtod_l+0xc04>)
   d9c58:	4019      	ands	r1, r3
   d9c5a:	4291      	cmp	r1, r2
   d9c5c:	4682      	mov	sl, r0
   d9c5e:	d95e      	bls.n	d9d1e <_strtod_l+0xabe>
   d9c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9c62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9c66:	4293      	cmp	r3, r2
   d9c68:	d103      	bne.n	d9c72 <_strtod_l+0xa12>
   d9c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9c6c:	3301      	adds	r3, #1
   d9c6e:	f43f ad43 	beq.w	d96f8 <_strtod_l+0x498>
   d9c72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9e70 <_strtod_l+0xc10>
   d9c76:	f04f 3aff 	mov.w	sl, #4294967295
   d9c7a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9c7c:	4620      	mov	r0, r4
   d9c7e:	f000 fd2d 	bl	da6dc <_Bfree>
   d9c82:	9907      	ldr	r1, [sp, #28]
   d9c84:	4620      	mov	r0, r4
   d9c86:	f000 fd29 	bl	da6dc <_Bfree>
   d9c8a:	4631      	mov	r1, r6
   d9c8c:	4620      	mov	r0, r4
   d9c8e:	f000 fd25 	bl	da6dc <_Bfree>
   d9c92:	4629      	mov	r1, r5
   d9c94:	4620      	mov	r0, r4
   d9c96:	f000 fd21 	bl	da6dc <_Bfree>
   d9c9a:	e613      	b.n	d98c4 <_strtod_l+0x664>
   d9c9c:	f1ba 0f00 	cmp.w	sl, #0
   d9ca0:	d11b      	bne.n	d9cda <_strtod_l+0xa7a>
   d9ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9ca6:	b9f3      	cbnz	r3, d9ce6 <_strtod_l+0xa86>
   d9ca8:	4b6b      	ldr	r3, [pc, #428]	; (d9e58 <_strtod_l+0xbf8>)
   d9caa:	2200      	movs	r2, #0
   d9cac:	4640      	mov	r0, r8
   d9cae:	4649      	mov	r1, r9
   d9cb0:	f7ff f93a 	bl	d8f28 <__aeabi_dcmplt>
   d9cb4:	b9d0      	cbnz	r0, d9cec <_strtod_l+0xa8c>
   d9cb6:	4640      	mov	r0, r8
   d9cb8:	4649      	mov	r1, r9
   d9cba:	4b6b      	ldr	r3, [pc, #428]	; (d9e68 <_strtod_l+0xc08>)
   d9cbc:	2200      	movs	r2, #0
   d9cbe:	f7fe fec1 	bl	d8a44 <__aeabi_dmul>
   d9cc2:	4680      	mov	r8, r0
   d9cc4:	4689      	mov	r9, r1
   d9cc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9cca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9cce:	931b      	str	r3, [sp, #108]	; 0x6c
   d9cd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9cd8:	e79b      	b.n	d9c12 <_strtod_l+0x9b2>
   d9cda:	f1ba 0f01 	cmp.w	sl, #1
   d9cde:	d102      	bne.n	d9ce6 <_strtod_l+0xa86>
   d9ce0:	2f00      	cmp	r7, #0
   d9ce2:	f43f ad7e 	beq.w	d97e2 <_strtod_l+0x582>
   d9ce6:	4b61      	ldr	r3, [pc, #388]	; (d9e6c <_strtod_l+0xc0c>)
   d9ce8:	2200      	movs	r2, #0
   d9cea:	e78c      	b.n	d9c06 <_strtod_l+0x9a6>
   d9cec:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9e68 <_strtod_l+0xc08>
   d9cf0:	f04f 0800 	mov.w	r8, #0
   d9cf4:	e7e7      	b.n	d9cc6 <_strtod_l+0xa66>
   d9cf6:	4b5c      	ldr	r3, [pc, #368]	; (d9e68 <_strtod_l+0xc08>)
   d9cf8:	4640      	mov	r0, r8
   d9cfa:	4649      	mov	r1, r9
   d9cfc:	2200      	movs	r2, #0
   d9cfe:	f7fe fea1 	bl	d8a44 <__aeabi_dmul>
   d9d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9d04:	4680      	mov	r8, r0
   d9d06:	4689      	mov	r9, r1
   d9d08:	b933      	cbnz	r3, d9d18 <_strtod_l+0xab8>
   d9d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9d0e:	9012      	str	r0, [sp, #72]	; 0x48
   d9d10:	9313      	str	r3, [sp, #76]	; 0x4c
   d9d12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9d16:	e7dd      	b.n	d9cd4 <_strtod_l+0xa74>
   d9d18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9d1c:	e7f9      	b.n	d9d12 <_strtod_l+0xab2>
   d9d1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d9d22:	9b04      	ldr	r3, [sp, #16]
   d9d24:	2b00      	cmp	r3, #0
   d9d26:	d1a8      	bne.n	d9c7a <_strtod_l+0xa1a>
   d9d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9d2e:	0d1b      	lsrs	r3, r3, #20
   d9d30:	051b      	lsls	r3, r3, #20
   d9d32:	429a      	cmp	r2, r3
   d9d34:	d1a1      	bne.n	d9c7a <_strtod_l+0xa1a>
   d9d36:	4640      	mov	r0, r8
   d9d38:	4649      	mov	r1, r9
   d9d3a:	f001 f8ff 	bl	daf3c <__aeabi_d2lz>
   d9d3e:	f7fe fe53 	bl	d89e8 <__aeabi_l2d>
   d9d42:	4602      	mov	r2, r0
   d9d44:	460b      	mov	r3, r1
   d9d46:	4640      	mov	r0, r8
   d9d48:	4649      	mov	r1, r9
   d9d4a:	f7fe fcc3 	bl	d86d4 <__aeabi_dsub>
   d9d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d54:	ea43 030a 	orr.w	r3, r3, sl
   d9d58:	4313      	orrs	r3, r2
   d9d5a:	4680      	mov	r8, r0
   d9d5c:	4689      	mov	r9, r1
   d9d5e:	d053      	beq.n	d9e08 <_strtod_l+0xba8>
   d9d60:	a335      	add	r3, pc, #212	; (adr r3, d9e38 <_strtod_l+0xbd8>)
   d9d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d66:	f7ff f8df 	bl	d8f28 <__aeabi_dcmplt>
   d9d6a:	2800      	cmp	r0, #0
   d9d6c:	f47f acce 	bne.w	d970c <_strtod_l+0x4ac>
   d9d70:	a333      	add	r3, pc, #204	; (adr r3, d9e40 <_strtod_l+0xbe0>)
   d9d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d76:	4640      	mov	r0, r8
   d9d78:	4649      	mov	r1, r9
   d9d7a:	f7ff f8f3 	bl	d8f64 <__aeabi_dcmpgt>
   d9d7e:	2800      	cmp	r0, #0
   d9d80:	f43f af7b 	beq.w	d9c7a <_strtod_l+0xa1a>
   d9d84:	e4c2      	b.n	d970c <_strtod_l+0x4ac>
   d9d86:	9b04      	ldr	r3, [sp, #16]
   d9d88:	b333      	cbz	r3, d9dd8 <_strtod_l+0xb78>
   d9d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9d90:	d822      	bhi.n	d9dd8 <_strtod_l+0xb78>
   d9d92:	a32d      	add	r3, pc, #180	; (adr r3, d9e48 <_strtod_l+0xbe8>)
   d9d94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d98:	4640      	mov	r0, r8
   d9d9a:	4649      	mov	r1, r9
   d9d9c:	f7ff f8ce 	bl	d8f3c <__aeabi_dcmple>
   d9da0:	b1a0      	cbz	r0, d9dcc <_strtod_l+0xb6c>
   d9da2:	4649      	mov	r1, r9
   d9da4:	4640      	mov	r0, r8
   d9da6:	f7ff f925 	bl	d8ff4 <__aeabi_d2uiz>
   d9daa:	2801      	cmp	r0, #1
   d9dac:	bf38      	it	cc
   d9dae:	2001      	movcc	r0, #1
   d9db0:	f7fe fdce 	bl	d8950 <__aeabi_ui2d>
   d9db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9db6:	4680      	mov	r8, r0
   d9db8:	4689      	mov	r9, r1
   d9dba:	bb13      	cbnz	r3, d9e02 <_strtod_l+0xba2>
   d9dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9dc0:	9014      	str	r0, [sp, #80]	; 0x50
   d9dc2:	9315      	str	r3, [sp, #84]	; 0x54
   d9dc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9dd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9dd4:	1a9b      	subs	r3, r3, r2
   d9dd6:	930d      	str	r3, [sp, #52]	; 0x34
   d9dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ddc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9de4:	f000 ff42 	bl	dac6c <__ulp>
   d9de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9dec:	ec53 2b10 	vmov	r2, r3, d0
   d9df0:	f7fe fe28 	bl	d8a44 <__aeabi_dmul>
   d9df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9df8:	f7fe fc6e 	bl	d86d8 <__adddf3>
   d9dfc:	4682      	mov	sl, r0
   d9dfe:	468b      	mov	fp, r1
   d9e00:	e78f      	b.n	d9d22 <_strtod_l+0xac2>
   d9e02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9e06:	e7dd      	b.n	d9dc4 <_strtod_l+0xb64>
   d9e08:	a311      	add	r3, pc, #68	; (adr r3, d9e50 <_strtod_l+0xbf0>)
   d9e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e0e:	f7ff f88b 	bl	d8f28 <__aeabi_dcmplt>
   d9e12:	e7b4      	b.n	d9d7e <_strtod_l+0xb1e>
   d9e14:	2300      	movs	r3, #0
   d9e16:	930e      	str	r3, [sp, #56]	; 0x38
   d9e18:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9e1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9e1c:	6013      	str	r3, [r2, #0]
   d9e1e:	f7ff ba65 	b.w	d92ec <_strtod_l+0x8c>
   d9e22:	2b65      	cmp	r3, #101	; 0x65
   d9e24:	f43f ab5d 	beq.w	d94e2 <_strtod_l+0x282>
   d9e28:	2b45      	cmp	r3, #69	; 0x45
   d9e2a:	f43f ab5a 	beq.w	d94e2 <_strtod_l+0x282>
   d9e2e:	2201      	movs	r2, #1
   d9e30:	f7ff bb92 	b.w	d9558 <_strtod_l+0x2f8>
   d9e34:	f3af 8000 	nop.w
   d9e38:	94a03595 	.word	0x94a03595
   d9e3c:	3fdfffff 	.word	0x3fdfffff
   d9e40:	35afe535 	.word	0x35afe535
   d9e44:	3fe00000 	.word	0x3fe00000
   d9e48:	ffc00000 	.word	0xffc00000
   d9e4c:	41dfffff 	.word	0x41dfffff
   d9e50:	94a03595 	.word	0x94a03595
   d9e54:	3fcfffff 	.word	0x3fcfffff
   d9e58:	3ff00000 	.word	0x3ff00000
   d9e5c:	7ff00000 	.word	0x7ff00000
   d9e60:	7fe00000 	.word	0x7fe00000
   d9e64:	7c9fffff 	.word	0x7c9fffff
   d9e68:	3fe00000 	.word	0x3fe00000
   d9e6c:	bff00000 	.word	0xbff00000
   d9e70:	7fefffff 	.word	0x7fefffff

000d9e74 <strtod>:
   d9e74:	460a      	mov	r2, r1
   d9e76:	4601      	mov	r1, r0
   d9e78:	4802      	ldr	r0, [pc, #8]	; (d9e84 <strtod+0x10>)
   d9e7a:	4b03      	ldr	r3, [pc, #12]	; (d9e88 <strtod+0x14>)
   d9e7c:	6800      	ldr	r0, [r0, #0]
   d9e7e:	f7ff b9ef 	b.w	d9260 <_strtod_l>
   d9e82:	bf00      	nop
   d9e84:	2003e328 	.word	0x2003e328
   d9e88:	2003e390 	.word	0x2003e390

000d9e8c <_strtol_l.isra.0>:
   d9e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e90:	4e3a      	ldr	r6, [pc, #232]	; (d9f7c <_strtol_l.isra.0+0xf0>)
   d9e92:	4686      	mov	lr, r0
   d9e94:	468c      	mov	ip, r1
   d9e96:	4660      	mov	r0, ip
   d9e98:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9e9c:	5da5      	ldrb	r5, [r4, r6]
   d9e9e:	f015 0508 	ands.w	r5, r5, #8
   d9ea2:	d1f8      	bne.n	d9e96 <_strtol_l.isra.0+0xa>
   d9ea4:	2c2d      	cmp	r4, #45	; 0x2d
   d9ea6:	d133      	bne.n	d9f10 <_strtol_l.isra.0+0x84>
   d9ea8:	f89c 4000 	ldrb.w	r4, [ip]
   d9eac:	f04f 0801 	mov.w	r8, #1
   d9eb0:	f100 0c02 	add.w	ip, r0, #2
   d9eb4:	2b00      	cmp	r3, #0
   d9eb6:	d05c      	beq.n	d9f72 <_strtol_l.isra.0+0xe6>
   d9eb8:	2b10      	cmp	r3, #16
   d9eba:	d10c      	bne.n	d9ed6 <_strtol_l.isra.0+0x4a>
   d9ebc:	2c30      	cmp	r4, #48	; 0x30
   d9ebe:	d10a      	bne.n	d9ed6 <_strtol_l.isra.0+0x4a>
   d9ec0:	f89c 0000 	ldrb.w	r0, [ip]
   d9ec4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9ec8:	2858      	cmp	r0, #88	; 0x58
   d9eca:	d14d      	bne.n	d9f68 <_strtol_l.isra.0+0xdc>
   d9ecc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9ed0:	2310      	movs	r3, #16
   d9ed2:	f10c 0c02 	add.w	ip, ip, #2
   d9ed6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9eda:	3f01      	subs	r7, #1
   d9edc:	2600      	movs	r6, #0
   d9ede:	fbb7 f9f3 	udiv	r9, r7, r3
   d9ee2:	4630      	mov	r0, r6
   d9ee4:	fb03 7a19 	mls	sl, r3, r9, r7
   d9ee8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9eec:	2d09      	cmp	r5, #9
   d9eee:	d818      	bhi.n	d9f22 <_strtol_l.isra.0+0x96>
   d9ef0:	462c      	mov	r4, r5
   d9ef2:	42a3      	cmp	r3, r4
   d9ef4:	dd24      	ble.n	d9f40 <_strtol_l.isra.0+0xb4>
   d9ef6:	1c75      	adds	r5, r6, #1
   d9ef8:	d007      	beq.n	d9f0a <_strtol_l.isra.0+0x7e>
   d9efa:	4581      	cmp	r9, r0
   d9efc:	d31d      	bcc.n	d9f3a <_strtol_l.isra.0+0xae>
   d9efe:	d101      	bne.n	d9f04 <_strtol_l.isra.0+0x78>
   d9f00:	45a2      	cmp	sl, r4
   d9f02:	db1a      	blt.n	d9f3a <_strtol_l.isra.0+0xae>
   d9f04:	fb00 4003 	mla	r0, r0, r3, r4
   d9f08:	2601      	movs	r6, #1
   d9f0a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9f0e:	e7eb      	b.n	d9ee8 <_strtol_l.isra.0+0x5c>
   d9f10:	2c2b      	cmp	r4, #43	; 0x2b
   d9f12:	bf08      	it	eq
   d9f14:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9f18:	46a8      	mov	r8, r5
   d9f1a:	bf08      	it	eq
   d9f1c:	f100 0c02 	addeq.w	ip, r0, #2
   d9f20:	e7c8      	b.n	d9eb4 <_strtol_l.isra.0+0x28>
   d9f22:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9f26:	2d19      	cmp	r5, #25
   d9f28:	d801      	bhi.n	d9f2e <_strtol_l.isra.0+0xa2>
   d9f2a:	3c37      	subs	r4, #55	; 0x37
   d9f2c:	e7e1      	b.n	d9ef2 <_strtol_l.isra.0+0x66>
   d9f2e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9f32:	2d19      	cmp	r5, #25
   d9f34:	d804      	bhi.n	d9f40 <_strtol_l.isra.0+0xb4>
   d9f36:	3c57      	subs	r4, #87	; 0x57
   d9f38:	e7db      	b.n	d9ef2 <_strtol_l.isra.0+0x66>
   d9f3a:	f04f 36ff 	mov.w	r6, #4294967295
   d9f3e:	e7e4      	b.n	d9f0a <_strtol_l.isra.0+0x7e>
   d9f40:	1c73      	adds	r3, r6, #1
   d9f42:	d106      	bne.n	d9f52 <_strtol_l.isra.0+0xc6>
   d9f44:	2322      	movs	r3, #34	; 0x22
   d9f46:	f8ce 3000 	str.w	r3, [lr]
   d9f4a:	4638      	mov	r0, r7
   d9f4c:	b942      	cbnz	r2, d9f60 <_strtol_l.isra.0+0xd4>
   d9f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f52:	f1b8 0f00 	cmp.w	r8, #0
   d9f56:	d000      	beq.n	d9f5a <_strtol_l.isra.0+0xce>
   d9f58:	4240      	negs	r0, r0
   d9f5a:	2a00      	cmp	r2, #0
   d9f5c:	d0f7      	beq.n	d9f4e <_strtol_l.isra.0+0xc2>
   d9f5e:	b10e      	cbz	r6, d9f64 <_strtol_l.isra.0+0xd8>
   d9f60:	f10c 31ff 	add.w	r1, ip, #4294967295
   d9f64:	6011      	str	r1, [r2, #0]
   d9f66:	e7f2      	b.n	d9f4e <_strtol_l.isra.0+0xc2>
   d9f68:	2430      	movs	r4, #48	; 0x30
   d9f6a:	2b00      	cmp	r3, #0
   d9f6c:	d1b3      	bne.n	d9ed6 <_strtol_l.isra.0+0x4a>
   d9f6e:	2308      	movs	r3, #8
   d9f70:	e7b1      	b.n	d9ed6 <_strtol_l.isra.0+0x4a>
   d9f72:	2c30      	cmp	r4, #48	; 0x30
   d9f74:	d0a4      	beq.n	d9ec0 <_strtol_l.isra.0+0x34>
   d9f76:	230a      	movs	r3, #10
   d9f78:	e7ad      	b.n	d9ed6 <_strtol_l.isra.0+0x4a>
   d9f7a:	bf00      	nop
   d9f7c:	000dc2e1 	.word	0x000dc2e1

000d9f80 <strtol>:
   d9f80:	4613      	mov	r3, r2
   d9f82:	460a      	mov	r2, r1
   d9f84:	4601      	mov	r1, r0
   d9f86:	4802      	ldr	r0, [pc, #8]	; (d9f90 <strtol+0x10>)
   d9f88:	6800      	ldr	r0, [r0, #0]
   d9f8a:	f7ff bf7f 	b.w	d9e8c <_strtol_l.isra.0>
   d9f8e:	bf00      	nop
   d9f90:	2003e328 	.word	0x2003e328

000d9f94 <rshift>:
   d9f94:	6903      	ldr	r3, [r0, #16]
   d9f96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9f9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9f9e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9fa2:	f100 0414 	add.w	r4, r0, #20
   d9fa6:	dd45      	ble.n	da034 <rshift+0xa0>
   d9fa8:	f011 011f 	ands.w	r1, r1, #31
   d9fac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9fb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9fb4:	d10c      	bne.n	d9fd0 <rshift+0x3c>
   d9fb6:	f100 0710 	add.w	r7, r0, #16
   d9fba:	4629      	mov	r1, r5
   d9fbc:	42b1      	cmp	r1, r6
   d9fbe:	d334      	bcc.n	da02a <rshift+0x96>
   d9fc0:	1a9b      	subs	r3, r3, r2
   d9fc2:	009b      	lsls	r3, r3, #2
   d9fc4:	1eea      	subs	r2, r5, #3
   d9fc6:	4296      	cmp	r6, r2
   d9fc8:	bf38      	it	cc
   d9fca:	2300      	movcc	r3, #0
   d9fcc:	4423      	add	r3, r4
   d9fce:	e015      	b.n	d9ffc <rshift+0x68>
   d9fd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9fd4:	f1c1 0820 	rsb	r8, r1, #32
   d9fd8:	40cf      	lsrs	r7, r1
   d9fda:	f105 0e04 	add.w	lr, r5, #4
   d9fde:	46a1      	mov	r9, r4
   d9fe0:	4576      	cmp	r6, lr
   d9fe2:	46f4      	mov	ip, lr
   d9fe4:	d815      	bhi.n	da012 <rshift+0x7e>
   d9fe6:	1a9b      	subs	r3, r3, r2
   d9fe8:	009a      	lsls	r2, r3, #2
   d9fea:	3a04      	subs	r2, #4
   d9fec:	3501      	adds	r5, #1
   d9fee:	42ae      	cmp	r6, r5
   d9ff0:	bf38      	it	cc
   d9ff2:	2200      	movcc	r2, #0
   d9ff4:	18a3      	adds	r3, r4, r2
   d9ff6:	50a7      	str	r7, [r4, r2]
   d9ff8:	b107      	cbz	r7, d9ffc <rshift+0x68>
   d9ffa:	3304      	adds	r3, #4
   d9ffc:	1b1a      	subs	r2, r3, r4
   d9ffe:	42a3      	cmp	r3, r4
   da000:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da004:	bf08      	it	eq
   da006:	2300      	moveq	r3, #0
   da008:	6102      	str	r2, [r0, #16]
   da00a:	bf08      	it	eq
   da00c:	6143      	streq	r3, [r0, #20]
   da00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da012:	f8dc c000 	ldr.w	ip, [ip]
   da016:	fa0c fc08 	lsl.w	ip, ip, r8
   da01a:	ea4c 0707 	orr.w	r7, ip, r7
   da01e:	f849 7b04 	str.w	r7, [r9], #4
   da022:	f85e 7b04 	ldr.w	r7, [lr], #4
   da026:	40cf      	lsrs	r7, r1
   da028:	e7da      	b.n	d9fe0 <rshift+0x4c>
   da02a:	f851 cb04 	ldr.w	ip, [r1], #4
   da02e:	f847 cf04 	str.w	ip, [r7, #4]!
   da032:	e7c3      	b.n	d9fbc <rshift+0x28>
   da034:	4623      	mov	r3, r4
   da036:	e7e1      	b.n	d9ffc <rshift+0x68>

000da038 <__hexdig_fun>:
   da038:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da03c:	2b09      	cmp	r3, #9
   da03e:	d802      	bhi.n	da046 <__hexdig_fun+0xe>
   da040:	3820      	subs	r0, #32
   da042:	b2c0      	uxtb	r0, r0
   da044:	4770      	bx	lr
   da046:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da04a:	2b05      	cmp	r3, #5
   da04c:	d801      	bhi.n	da052 <__hexdig_fun+0x1a>
   da04e:	3847      	subs	r0, #71	; 0x47
   da050:	e7f7      	b.n	da042 <__hexdig_fun+0xa>
   da052:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da056:	2b05      	cmp	r3, #5
   da058:	d801      	bhi.n	da05e <__hexdig_fun+0x26>
   da05a:	3827      	subs	r0, #39	; 0x27
   da05c:	e7f1      	b.n	da042 <__hexdig_fun+0xa>
   da05e:	2000      	movs	r0, #0
   da060:	4770      	bx	lr
	...

000da064 <__gethex>:
   da064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da068:	ed2d 8b02 	vpush	{d8}
   da06c:	b089      	sub	sp, #36	; 0x24
   da06e:	ee08 0a10 	vmov	s16, r0
   da072:	9304      	str	r3, [sp, #16]
   da074:	4bbc      	ldr	r3, [pc, #752]	; (da368 <__gethex+0x304>)
   da076:	681b      	ldr	r3, [r3, #0]
   da078:	9301      	str	r3, [sp, #4]
   da07a:	4618      	mov	r0, r3
   da07c:	468b      	mov	fp, r1
   da07e:	4690      	mov	r8, r2
   da080:	f7ff f8a4 	bl	d91cc <strlen>
   da084:	9b01      	ldr	r3, [sp, #4]
   da086:	f8db 2000 	ldr.w	r2, [fp]
   da08a:	4403      	add	r3, r0
   da08c:	4682      	mov	sl, r0
   da08e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da092:	9305      	str	r3, [sp, #20]
   da094:	1c93      	adds	r3, r2, #2
   da096:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da09a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da09e:	32fe      	adds	r2, #254	; 0xfe
   da0a0:	18d1      	adds	r1, r2, r3
   da0a2:	461f      	mov	r7, r3
   da0a4:	f813 0b01 	ldrb.w	r0, [r3], #1
   da0a8:	9100      	str	r1, [sp, #0]
   da0aa:	2830      	cmp	r0, #48	; 0x30
   da0ac:	d0f8      	beq.n	da0a0 <__gethex+0x3c>
   da0ae:	f7ff ffc3 	bl	da038 <__hexdig_fun>
   da0b2:	4604      	mov	r4, r0
   da0b4:	2800      	cmp	r0, #0
   da0b6:	d13a      	bne.n	da12e <__gethex+0xca>
   da0b8:	9901      	ldr	r1, [sp, #4]
   da0ba:	4652      	mov	r2, sl
   da0bc:	4638      	mov	r0, r7
   da0be:	f7ff f88d 	bl	d91dc <strncmp>
   da0c2:	4605      	mov	r5, r0
   da0c4:	2800      	cmp	r0, #0
   da0c6:	d168      	bne.n	da19a <__gethex+0x136>
   da0c8:	f817 000a 	ldrb.w	r0, [r7, sl]
   da0cc:	eb07 060a 	add.w	r6, r7, sl
   da0d0:	f7ff ffb2 	bl	da038 <__hexdig_fun>
   da0d4:	2800      	cmp	r0, #0
   da0d6:	d062      	beq.n	da19e <__gethex+0x13a>
   da0d8:	4633      	mov	r3, r6
   da0da:	7818      	ldrb	r0, [r3, #0]
   da0dc:	2830      	cmp	r0, #48	; 0x30
   da0de:	461f      	mov	r7, r3
   da0e0:	f103 0301 	add.w	r3, r3, #1
   da0e4:	d0f9      	beq.n	da0da <__gethex+0x76>
   da0e6:	f7ff ffa7 	bl	da038 <__hexdig_fun>
   da0ea:	2301      	movs	r3, #1
   da0ec:	fab0 f480 	clz	r4, r0
   da0f0:	0964      	lsrs	r4, r4, #5
   da0f2:	4635      	mov	r5, r6
   da0f4:	9300      	str	r3, [sp, #0]
   da0f6:	463a      	mov	r2, r7
   da0f8:	4616      	mov	r6, r2
   da0fa:	3201      	adds	r2, #1
   da0fc:	7830      	ldrb	r0, [r6, #0]
   da0fe:	f7ff ff9b 	bl	da038 <__hexdig_fun>
   da102:	2800      	cmp	r0, #0
   da104:	d1f8      	bne.n	da0f8 <__gethex+0x94>
   da106:	9901      	ldr	r1, [sp, #4]
   da108:	4652      	mov	r2, sl
   da10a:	4630      	mov	r0, r6
   da10c:	f7ff f866 	bl	d91dc <strncmp>
   da110:	b980      	cbnz	r0, da134 <__gethex+0xd0>
   da112:	b94d      	cbnz	r5, da128 <__gethex+0xc4>
   da114:	eb06 050a 	add.w	r5, r6, sl
   da118:	462a      	mov	r2, r5
   da11a:	4616      	mov	r6, r2
   da11c:	3201      	adds	r2, #1
   da11e:	7830      	ldrb	r0, [r6, #0]
   da120:	f7ff ff8a 	bl	da038 <__hexdig_fun>
   da124:	2800      	cmp	r0, #0
   da126:	d1f8      	bne.n	da11a <__gethex+0xb6>
   da128:	1bad      	subs	r5, r5, r6
   da12a:	00ad      	lsls	r5, r5, #2
   da12c:	e004      	b.n	da138 <__gethex+0xd4>
   da12e:	2400      	movs	r4, #0
   da130:	4625      	mov	r5, r4
   da132:	e7e0      	b.n	da0f6 <__gethex+0x92>
   da134:	2d00      	cmp	r5, #0
   da136:	d1f7      	bne.n	da128 <__gethex+0xc4>
   da138:	7833      	ldrb	r3, [r6, #0]
   da13a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da13e:	2b50      	cmp	r3, #80	; 0x50
   da140:	d13b      	bne.n	da1ba <__gethex+0x156>
   da142:	7873      	ldrb	r3, [r6, #1]
   da144:	2b2b      	cmp	r3, #43	; 0x2b
   da146:	d02c      	beq.n	da1a2 <__gethex+0x13e>
   da148:	2b2d      	cmp	r3, #45	; 0x2d
   da14a:	d02e      	beq.n	da1aa <__gethex+0x146>
   da14c:	1c71      	adds	r1, r6, #1
   da14e:	f04f 0900 	mov.w	r9, #0
   da152:	7808      	ldrb	r0, [r1, #0]
   da154:	f7ff ff70 	bl	da038 <__hexdig_fun>
   da158:	1e43      	subs	r3, r0, #1
   da15a:	b2db      	uxtb	r3, r3
   da15c:	2b18      	cmp	r3, #24
   da15e:	d82c      	bhi.n	da1ba <__gethex+0x156>
   da160:	f1a0 0210 	sub.w	r2, r0, #16
   da164:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da168:	f7ff ff66 	bl	da038 <__hexdig_fun>
   da16c:	1e43      	subs	r3, r0, #1
   da16e:	b2db      	uxtb	r3, r3
   da170:	2b18      	cmp	r3, #24
   da172:	d91d      	bls.n	da1b0 <__gethex+0x14c>
   da174:	f1b9 0f00 	cmp.w	r9, #0
   da178:	d000      	beq.n	da17c <__gethex+0x118>
   da17a:	4252      	negs	r2, r2
   da17c:	4415      	add	r5, r2
   da17e:	f8cb 1000 	str.w	r1, [fp]
   da182:	b1e4      	cbz	r4, da1be <__gethex+0x15a>
   da184:	9b00      	ldr	r3, [sp, #0]
   da186:	2b00      	cmp	r3, #0
   da188:	bf14      	ite	ne
   da18a:	2700      	movne	r7, #0
   da18c:	2706      	moveq	r7, #6
   da18e:	4638      	mov	r0, r7
   da190:	b009      	add	sp, #36	; 0x24
   da192:	ecbd 8b02 	vpop	{d8}
   da196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da19a:	463e      	mov	r6, r7
   da19c:	4625      	mov	r5, r4
   da19e:	2401      	movs	r4, #1
   da1a0:	e7ca      	b.n	da138 <__gethex+0xd4>
   da1a2:	f04f 0900 	mov.w	r9, #0
   da1a6:	1cb1      	adds	r1, r6, #2
   da1a8:	e7d3      	b.n	da152 <__gethex+0xee>
   da1aa:	f04f 0901 	mov.w	r9, #1
   da1ae:	e7fa      	b.n	da1a6 <__gethex+0x142>
   da1b0:	230a      	movs	r3, #10
   da1b2:	fb03 0202 	mla	r2, r3, r2, r0
   da1b6:	3a10      	subs	r2, #16
   da1b8:	e7d4      	b.n	da164 <__gethex+0x100>
   da1ba:	4631      	mov	r1, r6
   da1bc:	e7df      	b.n	da17e <__gethex+0x11a>
   da1be:	1bf3      	subs	r3, r6, r7
   da1c0:	3b01      	subs	r3, #1
   da1c2:	4621      	mov	r1, r4
   da1c4:	2b07      	cmp	r3, #7
   da1c6:	dc52      	bgt.n	da26e <__gethex+0x20a>
   da1c8:	ee18 0a10 	vmov	r0, s16
   da1cc:	f000 fa52 	bl	da674 <_Balloc>
   da1d0:	f04f 0b00 	mov.w	fp, #0
   da1d4:	f100 0914 	add.w	r9, r0, #20
   da1d8:	f1ca 0301 	rsb	r3, sl, #1
   da1dc:	4604      	mov	r4, r0
   da1de:	f8cd 9008 	str.w	r9, [sp, #8]
   da1e2:	f8cd b000 	str.w	fp, [sp]
   da1e6:	9306      	str	r3, [sp, #24]
   da1e8:	42b7      	cmp	r7, r6
   da1ea:	d343      	bcc.n	da274 <__gethex+0x210>
   da1ec:	9802      	ldr	r0, [sp, #8]
   da1ee:	9b00      	ldr	r3, [sp, #0]
   da1f0:	f840 3b04 	str.w	r3, [r0], #4
   da1f4:	eba0 0009 	sub.w	r0, r0, r9
   da1f8:	1080      	asrs	r0, r0, #2
   da1fa:	0146      	lsls	r6, r0, #5
   da1fc:	6120      	str	r0, [r4, #16]
   da1fe:	4618      	mov	r0, r3
   da200:	f000 faff 	bl	da802 <__hi0bits>
   da204:	1a30      	subs	r0, r6, r0
   da206:	f8d8 6000 	ldr.w	r6, [r8]
   da20a:	42b0      	cmp	r0, r6
   da20c:	dd66      	ble.n	da2dc <__gethex+0x278>
   da20e:	1b87      	subs	r7, r0, r6
   da210:	4639      	mov	r1, r7
   da212:	4620      	mov	r0, r4
   da214:	f000 fe4c 	bl	daeb0 <__any_on>
   da218:	4682      	mov	sl, r0
   da21a:	b1a8      	cbz	r0, da248 <__gethex+0x1e4>
   da21c:	1e7b      	subs	r3, r7, #1
   da21e:	1159      	asrs	r1, r3, #5
   da220:	f003 021f 	and.w	r2, r3, #31
   da224:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da228:	f04f 0a01 	mov.w	sl, #1
   da22c:	fa0a f202 	lsl.w	r2, sl, r2
   da230:	420a      	tst	r2, r1
   da232:	d009      	beq.n	da248 <__gethex+0x1e4>
   da234:	4553      	cmp	r3, sl
   da236:	dd05      	ble.n	da244 <__gethex+0x1e0>
   da238:	1eb9      	subs	r1, r7, #2
   da23a:	4620      	mov	r0, r4
   da23c:	f000 fe38 	bl	daeb0 <__any_on>
   da240:	2800      	cmp	r0, #0
   da242:	d148      	bne.n	da2d6 <__gethex+0x272>
   da244:	f04f 0a02 	mov.w	sl, #2
   da248:	4639      	mov	r1, r7
   da24a:	4620      	mov	r0, r4
   da24c:	f7ff fea2 	bl	d9f94 <rshift>
   da250:	443d      	add	r5, r7
   da252:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da256:	42ab      	cmp	r3, r5
   da258:	da4f      	bge.n	da2fa <__gethex+0x296>
   da25a:	ee18 0a10 	vmov	r0, s16
   da25e:	4621      	mov	r1, r4
   da260:	f000 fa3c 	bl	da6dc <_Bfree>
   da264:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da266:	2300      	movs	r3, #0
   da268:	6013      	str	r3, [r2, #0]
   da26a:	27a3      	movs	r7, #163	; 0xa3
   da26c:	e78f      	b.n	da18e <__gethex+0x12a>
   da26e:	3101      	adds	r1, #1
   da270:	105b      	asrs	r3, r3, #1
   da272:	e7a7      	b.n	da1c4 <__gethex+0x160>
   da274:	1e73      	subs	r3, r6, #1
   da276:	9a05      	ldr	r2, [sp, #20]
   da278:	9303      	str	r3, [sp, #12]
   da27a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da27e:	4293      	cmp	r3, r2
   da280:	d019      	beq.n	da2b6 <__gethex+0x252>
   da282:	f1bb 0f20 	cmp.w	fp, #32
   da286:	d107      	bne.n	da298 <__gethex+0x234>
   da288:	9b02      	ldr	r3, [sp, #8]
   da28a:	9a00      	ldr	r2, [sp, #0]
   da28c:	f843 2b04 	str.w	r2, [r3], #4
   da290:	9302      	str	r3, [sp, #8]
   da292:	2300      	movs	r3, #0
   da294:	9300      	str	r3, [sp, #0]
   da296:	469b      	mov	fp, r3
   da298:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da29c:	f7ff fecc 	bl	da038 <__hexdig_fun>
   da2a0:	9b00      	ldr	r3, [sp, #0]
   da2a2:	f000 000f 	and.w	r0, r0, #15
   da2a6:	fa00 f00b 	lsl.w	r0, r0, fp
   da2aa:	4303      	orrs	r3, r0
   da2ac:	9300      	str	r3, [sp, #0]
   da2ae:	f10b 0b04 	add.w	fp, fp, #4
   da2b2:	9b03      	ldr	r3, [sp, #12]
   da2b4:	e00d      	b.n	da2d2 <__gethex+0x26e>
   da2b6:	9b03      	ldr	r3, [sp, #12]
   da2b8:	9a06      	ldr	r2, [sp, #24]
   da2ba:	4413      	add	r3, r2
   da2bc:	42bb      	cmp	r3, r7
   da2be:	d3e0      	bcc.n	da282 <__gethex+0x21e>
   da2c0:	4618      	mov	r0, r3
   da2c2:	9901      	ldr	r1, [sp, #4]
   da2c4:	9307      	str	r3, [sp, #28]
   da2c6:	4652      	mov	r2, sl
   da2c8:	f7fe ff88 	bl	d91dc <strncmp>
   da2cc:	9b07      	ldr	r3, [sp, #28]
   da2ce:	2800      	cmp	r0, #0
   da2d0:	d1d7      	bne.n	da282 <__gethex+0x21e>
   da2d2:	461e      	mov	r6, r3
   da2d4:	e788      	b.n	da1e8 <__gethex+0x184>
   da2d6:	f04f 0a03 	mov.w	sl, #3
   da2da:	e7b5      	b.n	da248 <__gethex+0x1e4>
   da2dc:	da0a      	bge.n	da2f4 <__gethex+0x290>
   da2de:	1a37      	subs	r7, r6, r0
   da2e0:	4621      	mov	r1, r4
   da2e2:	ee18 0a10 	vmov	r0, s16
   da2e6:	463a      	mov	r2, r7
   da2e8:	f000 fbce 	bl	daa88 <__lshift>
   da2ec:	1bed      	subs	r5, r5, r7
   da2ee:	4604      	mov	r4, r0
   da2f0:	f100 0914 	add.w	r9, r0, #20
   da2f4:	f04f 0a00 	mov.w	sl, #0
   da2f8:	e7ab      	b.n	da252 <__gethex+0x1ee>
   da2fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da2fe:	42a8      	cmp	r0, r5
   da300:	dd6d      	ble.n	da3de <__gethex+0x37a>
   da302:	1b45      	subs	r5, r0, r5
   da304:	42ae      	cmp	r6, r5
   da306:	dc31      	bgt.n	da36c <__gethex+0x308>
   da308:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da30c:	2b02      	cmp	r3, #2
   da30e:	d023      	beq.n	da358 <__gethex+0x2f4>
   da310:	2b03      	cmp	r3, #3
   da312:	d025      	beq.n	da360 <__gethex+0x2fc>
   da314:	2b01      	cmp	r3, #1
   da316:	d115      	bne.n	da344 <__gethex+0x2e0>
   da318:	42ae      	cmp	r6, r5
   da31a:	d113      	bne.n	da344 <__gethex+0x2e0>
   da31c:	2e01      	cmp	r6, #1
   da31e:	d10b      	bne.n	da338 <__gethex+0x2d4>
   da320:	9a04      	ldr	r2, [sp, #16]
   da322:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da326:	6013      	str	r3, [r2, #0]
   da328:	2301      	movs	r3, #1
   da32a:	6123      	str	r3, [r4, #16]
   da32c:	f8c9 3000 	str.w	r3, [r9]
   da330:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da332:	2762      	movs	r7, #98	; 0x62
   da334:	601c      	str	r4, [r3, #0]
   da336:	e72a      	b.n	da18e <__gethex+0x12a>
   da338:	1e71      	subs	r1, r6, #1
   da33a:	4620      	mov	r0, r4
   da33c:	f000 fdb8 	bl	daeb0 <__any_on>
   da340:	2800      	cmp	r0, #0
   da342:	d1ed      	bne.n	da320 <__gethex+0x2bc>
   da344:	ee18 0a10 	vmov	r0, s16
   da348:	4621      	mov	r1, r4
   da34a:	f000 f9c7 	bl	da6dc <_Bfree>
   da34e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da350:	2300      	movs	r3, #0
   da352:	6013      	str	r3, [r2, #0]
   da354:	2750      	movs	r7, #80	; 0x50
   da356:	e71a      	b.n	da18e <__gethex+0x12a>
   da358:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da35a:	2b00      	cmp	r3, #0
   da35c:	d1f2      	bne.n	da344 <__gethex+0x2e0>
   da35e:	e7df      	b.n	da320 <__gethex+0x2bc>
   da360:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da362:	2b00      	cmp	r3, #0
   da364:	d1dc      	bne.n	da320 <__gethex+0x2bc>
   da366:	e7ed      	b.n	da344 <__gethex+0x2e0>
   da368:	000dc3e4 	.word	0x000dc3e4
   da36c:	1e6f      	subs	r7, r5, #1
   da36e:	f1ba 0f00 	cmp.w	sl, #0
   da372:	d131      	bne.n	da3d8 <__gethex+0x374>
   da374:	b127      	cbz	r7, da380 <__gethex+0x31c>
   da376:	4639      	mov	r1, r7
   da378:	4620      	mov	r0, r4
   da37a:	f000 fd99 	bl	daeb0 <__any_on>
   da37e:	4682      	mov	sl, r0
   da380:	117b      	asrs	r3, r7, #5
   da382:	2101      	movs	r1, #1
   da384:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da388:	f007 071f 	and.w	r7, r7, #31
   da38c:	fa01 f707 	lsl.w	r7, r1, r7
   da390:	421f      	tst	r7, r3
   da392:	4629      	mov	r1, r5
   da394:	4620      	mov	r0, r4
   da396:	bf18      	it	ne
   da398:	f04a 0a02 	orrne.w	sl, sl, #2
   da39c:	1b76      	subs	r6, r6, r5
   da39e:	f7ff fdf9 	bl	d9f94 <rshift>
   da3a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da3a6:	2702      	movs	r7, #2
   da3a8:	f1ba 0f00 	cmp.w	sl, #0
   da3ac:	d048      	beq.n	da440 <__gethex+0x3dc>
   da3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da3b2:	2b02      	cmp	r3, #2
   da3b4:	d015      	beq.n	da3e2 <__gethex+0x37e>
   da3b6:	2b03      	cmp	r3, #3
   da3b8:	d017      	beq.n	da3ea <__gethex+0x386>
   da3ba:	2b01      	cmp	r3, #1
   da3bc:	d109      	bne.n	da3d2 <__gethex+0x36e>
   da3be:	f01a 0f02 	tst.w	sl, #2
   da3c2:	d006      	beq.n	da3d2 <__gethex+0x36e>
   da3c4:	f8d9 0000 	ldr.w	r0, [r9]
   da3c8:	ea4a 0a00 	orr.w	sl, sl, r0
   da3cc:	f01a 0f01 	tst.w	sl, #1
   da3d0:	d10e      	bne.n	da3f0 <__gethex+0x38c>
   da3d2:	f047 0710 	orr.w	r7, r7, #16
   da3d6:	e033      	b.n	da440 <__gethex+0x3dc>
   da3d8:	f04f 0a01 	mov.w	sl, #1
   da3dc:	e7d0      	b.n	da380 <__gethex+0x31c>
   da3de:	2701      	movs	r7, #1
   da3e0:	e7e2      	b.n	da3a8 <__gethex+0x344>
   da3e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da3e4:	f1c3 0301 	rsb	r3, r3, #1
   da3e8:	9315      	str	r3, [sp, #84]	; 0x54
   da3ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da3ec:	2b00      	cmp	r3, #0
   da3ee:	d0f0      	beq.n	da3d2 <__gethex+0x36e>
   da3f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da3f4:	f104 0314 	add.w	r3, r4, #20
   da3f8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da3fc:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da400:	f04f 0c00 	mov.w	ip, #0
   da404:	4618      	mov	r0, r3
   da406:	f853 2b04 	ldr.w	r2, [r3], #4
   da40a:	f1b2 3fff 	cmp.w	r2, #4294967295
   da40e:	d01c      	beq.n	da44a <__gethex+0x3e6>
   da410:	3201      	adds	r2, #1
   da412:	6002      	str	r2, [r0, #0]
   da414:	2f02      	cmp	r7, #2
   da416:	f104 0314 	add.w	r3, r4, #20
   da41a:	d13a      	bne.n	da492 <__gethex+0x42e>
   da41c:	f8d8 2000 	ldr.w	r2, [r8]
   da420:	3a01      	subs	r2, #1
   da422:	42b2      	cmp	r2, r6
   da424:	d10a      	bne.n	da43c <__gethex+0x3d8>
   da426:	1171      	asrs	r1, r6, #5
   da428:	2201      	movs	r2, #1
   da42a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da42e:	f006 061f 	and.w	r6, r6, #31
   da432:	fa02 f606 	lsl.w	r6, r2, r6
   da436:	421e      	tst	r6, r3
   da438:	bf18      	it	ne
   da43a:	4617      	movne	r7, r2
   da43c:	f047 0720 	orr.w	r7, r7, #32
   da440:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da442:	601c      	str	r4, [r3, #0]
   da444:	9b04      	ldr	r3, [sp, #16]
   da446:	601d      	str	r5, [r3, #0]
   da448:	e6a1      	b.n	da18e <__gethex+0x12a>
   da44a:	4299      	cmp	r1, r3
   da44c:	f843 cc04 	str.w	ip, [r3, #-4]
   da450:	d8d8      	bhi.n	da404 <__gethex+0x3a0>
   da452:	68a3      	ldr	r3, [r4, #8]
   da454:	4599      	cmp	r9, r3
   da456:	db14      	blt.n	da482 <__gethex+0x41e>
   da458:	6861      	ldr	r1, [r4, #4]
   da45a:	ee18 0a10 	vmov	r0, s16
   da45e:	3101      	adds	r1, #1
   da460:	f000 f908 	bl	da674 <_Balloc>
   da464:	6922      	ldr	r2, [r4, #16]
   da466:	3202      	adds	r2, #2
   da468:	f104 010c 	add.w	r1, r4, #12
   da46c:	4682      	mov	sl, r0
   da46e:	0092      	lsls	r2, r2, #2
   da470:	300c      	adds	r0, #12
   da472:	f7fe fe67 	bl	d9144 <memcpy>
   da476:	4621      	mov	r1, r4
   da478:	ee18 0a10 	vmov	r0, s16
   da47c:	f000 f92e 	bl	da6dc <_Bfree>
   da480:	4654      	mov	r4, sl
   da482:	6923      	ldr	r3, [r4, #16]
   da484:	1c5a      	adds	r2, r3, #1
   da486:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da48a:	6122      	str	r2, [r4, #16]
   da48c:	2201      	movs	r2, #1
   da48e:	615a      	str	r2, [r3, #20]
   da490:	e7c0      	b.n	da414 <__gethex+0x3b0>
   da492:	6922      	ldr	r2, [r4, #16]
   da494:	454a      	cmp	r2, r9
   da496:	dd0b      	ble.n	da4b0 <__gethex+0x44c>
   da498:	2101      	movs	r1, #1
   da49a:	4620      	mov	r0, r4
   da49c:	f7ff fd7a 	bl	d9f94 <rshift>
   da4a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da4a4:	3501      	adds	r5, #1
   da4a6:	42ab      	cmp	r3, r5
   da4a8:	f6ff aed7 	blt.w	da25a <__gethex+0x1f6>
   da4ac:	2701      	movs	r7, #1
   da4ae:	e7c5      	b.n	da43c <__gethex+0x3d8>
   da4b0:	f016 061f 	ands.w	r6, r6, #31
   da4b4:	d0fa      	beq.n	da4ac <__gethex+0x448>
   da4b6:	449b      	add	fp, r3
   da4b8:	f1c6 0620 	rsb	r6, r6, #32
   da4bc:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da4c0:	f000 f99f 	bl	da802 <__hi0bits>
   da4c4:	42b0      	cmp	r0, r6
   da4c6:	dbe7      	blt.n	da498 <__gethex+0x434>
   da4c8:	e7f0      	b.n	da4ac <__gethex+0x448>
   da4ca:	bf00      	nop

000da4cc <L_shift>:
   da4cc:	f1c2 0208 	rsb	r2, r2, #8
   da4d0:	0092      	lsls	r2, r2, #2
   da4d2:	b570      	push	{r4, r5, r6, lr}
   da4d4:	f1c2 0620 	rsb	r6, r2, #32
   da4d8:	6843      	ldr	r3, [r0, #4]
   da4da:	6804      	ldr	r4, [r0, #0]
   da4dc:	fa03 f506 	lsl.w	r5, r3, r6
   da4e0:	432c      	orrs	r4, r5
   da4e2:	40d3      	lsrs	r3, r2
   da4e4:	6004      	str	r4, [r0, #0]
   da4e6:	f840 3f04 	str.w	r3, [r0, #4]!
   da4ea:	4288      	cmp	r0, r1
   da4ec:	d3f4      	bcc.n	da4d8 <L_shift+0xc>
   da4ee:	bd70      	pop	{r4, r5, r6, pc}

000da4f0 <__match>:
   da4f0:	b530      	push	{r4, r5, lr}
   da4f2:	6803      	ldr	r3, [r0, #0]
   da4f4:	3301      	adds	r3, #1
   da4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   da4fa:	b914      	cbnz	r4, da502 <__match+0x12>
   da4fc:	6003      	str	r3, [r0, #0]
   da4fe:	2001      	movs	r0, #1
   da500:	bd30      	pop	{r4, r5, pc}
   da502:	f813 2b01 	ldrb.w	r2, [r3], #1
   da506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da50a:	2d19      	cmp	r5, #25
   da50c:	bf98      	it	ls
   da50e:	3220      	addls	r2, #32
   da510:	42a2      	cmp	r2, r4
   da512:	d0f0      	beq.n	da4f6 <__match+0x6>
   da514:	2000      	movs	r0, #0
   da516:	e7f3      	b.n	da500 <__match+0x10>

000da518 <__hexnan>:
   da518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da51c:	680b      	ldr	r3, [r1, #0]
   da51e:	6801      	ldr	r1, [r0, #0]
   da520:	115e      	asrs	r6, r3, #5
   da522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da526:	f013 031f 	ands.w	r3, r3, #31
   da52a:	b087      	sub	sp, #28
   da52c:	bf18      	it	ne
   da52e:	3604      	addne	r6, #4
   da530:	2500      	movs	r5, #0
   da532:	1f37      	subs	r7, r6, #4
   da534:	4682      	mov	sl, r0
   da536:	4690      	mov	r8, r2
   da538:	9301      	str	r3, [sp, #4]
   da53a:	f846 5c04 	str.w	r5, [r6, #-4]
   da53e:	46b9      	mov	r9, r7
   da540:	463c      	mov	r4, r7
   da542:	9502      	str	r5, [sp, #8]
   da544:	46ab      	mov	fp, r5
   da546:	784a      	ldrb	r2, [r1, #1]
   da548:	1c4b      	adds	r3, r1, #1
   da54a:	9303      	str	r3, [sp, #12]
   da54c:	b342      	cbz	r2, da5a0 <__hexnan+0x88>
   da54e:	4610      	mov	r0, r2
   da550:	9105      	str	r1, [sp, #20]
   da552:	9204      	str	r2, [sp, #16]
   da554:	f7ff fd70 	bl	da038 <__hexdig_fun>
   da558:	2800      	cmp	r0, #0
   da55a:	d14f      	bne.n	da5fc <__hexnan+0xe4>
   da55c:	9a04      	ldr	r2, [sp, #16]
   da55e:	9905      	ldr	r1, [sp, #20]
   da560:	2a20      	cmp	r2, #32
   da562:	d818      	bhi.n	da596 <__hexnan+0x7e>
   da564:	9b02      	ldr	r3, [sp, #8]
   da566:	459b      	cmp	fp, r3
   da568:	dd13      	ble.n	da592 <__hexnan+0x7a>
   da56a:	454c      	cmp	r4, r9
   da56c:	d206      	bcs.n	da57c <__hexnan+0x64>
   da56e:	2d07      	cmp	r5, #7
   da570:	dc04      	bgt.n	da57c <__hexnan+0x64>
   da572:	462a      	mov	r2, r5
   da574:	4649      	mov	r1, r9
   da576:	4620      	mov	r0, r4
   da578:	f7ff ffa8 	bl	da4cc <L_shift>
   da57c:	4544      	cmp	r4, r8
   da57e:	d950      	bls.n	da622 <__hexnan+0x10a>
   da580:	2300      	movs	r3, #0
   da582:	f1a4 0904 	sub.w	r9, r4, #4
   da586:	f844 3c04 	str.w	r3, [r4, #-4]
   da58a:	f8cd b008 	str.w	fp, [sp, #8]
   da58e:	464c      	mov	r4, r9
   da590:	461d      	mov	r5, r3
   da592:	9903      	ldr	r1, [sp, #12]
   da594:	e7d7      	b.n	da546 <__hexnan+0x2e>
   da596:	2a29      	cmp	r2, #41	; 0x29
   da598:	d156      	bne.n	da648 <__hexnan+0x130>
   da59a:	3102      	adds	r1, #2
   da59c:	f8ca 1000 	str.w	r1, [sl]
   da5a0:	f1bb 0f00 	cmp.w	fp, #0
   da5a4:	d050      	beq.n	da648 <__hexnan+0x130>
   da5a6:	454c      	cmp	r4, r9
   da5a8:	d206      	bcs.n	da5b8 <__hexnan+0xa0>
   da5aa:	2d07      	cmp	r5, #7
   da5ac:	dc04      	bgt.n	da5b8 <__hexnan+0xa0>
   da5ae:	462a      	mov	r2, r5
   da5b0:	4649      	mov	r1, r9
   da5b2:	4620      	mov	r0, r4
   da5b4:	f7ff ff8a 	bl	da4cc <L_shift>
   da5b8:	4544      	cmp	r4, r8
   da5ba:	d934      	bls.n	da626 <__hexnan+0x10e>
   da5bc:	f1a8 0204 	sub.w	r2, r8, #4
   da5c0:	4623      	mov	r3, r4
   da5c2:	f853 1b04 	ldr.w	r1, [r3], #4
   da5c6:	f842 1f04 	str.w	r1, [r2, #4]!
   da5ca:	429f      	cmp	r7, r3
   da5cc:	d2f9      	bcs.n	da5c2 <__hexnan+0xaa>
   da5ce:	1b3b      	subs	r3, r7, r4
   da5d0:	f023 0303 	bic.w	r3, r3, #3
   da5d4:	3304      	adds	r3, #4
   da5d6:	3401      	adds	r4, #1
   da5d8:	3e03      	subs	r6, #3
   da5da:	42b4      	cmp	r4, r6
   da5dc:	bf88      	it	hi
   da5de:	2304      	movhi	r3, #4
   da5e0:	4443      	add	r3, r8
   da5e2:	2200      	movs	r2, #0
   da5e4:	f843 2b04 	str.w	r2, [r3], #4
   da5e8:	429f      	cmp	r7, r3
   da5ea:	d2fb      	bcs.n	da5e4 <__hexnan+0xcc>
   da5ec:	683b      	ldr	r3, [r7, #0]
   da5ee:	b91b      	cbnz	r3, da5f8 <__hexnan+0xe0>
   da5f0:	4547      	cmp	r7, r8
   da5f2:	d127      	bne.n	da644 <__hexnan+0x12c>
   da5f4:	2301      	movs	r3, #1
   da5f6:	603b      	str	r3, [r7, #0]
   da5f8:	2005      	movs	r0, #5
   da5fa:	e026      	b.n	da64a <__hexnan+0x132>
   da5fc:	3501      	adds	r5, #1
   da5fe:	2d08      	cmp	r5, #8
   da600:	f10b 0b01 	add.w	fp, fp, #1
   da604:	dd06      	ble.n	da614 <__hexnan+0xfc>
   da606:	4544      	cmp	r4, r8
   da608:	d9c3      	bls.n	da592 <__hexnan+0x7a>
   da60a:	2300      	movs	r3, #0
   da60c:	f844 3c04 	str.w	r3, [r4, #-4]
   da610:	2501      	movs	r5, #1
   da612:	3c04      	subs	r4, #4
   da614:	6822      	ldr	r2, [r4, #0]
   da616:	f000 000f 	and.w	r0, r0, #15
   da61a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da61e:	6022      	str	r2, [r4, #0]
   da620:	e7b7      	b.n	da592 <__hexnan+0x7a>
   da622:	2508      	movs	r5, #8
   da624:	e7b5      	b.n	da592 <__hexnan+0x7a>
   da626:	9b01      	ldr	r3, [sp, #4]
   da628:	2b00      	cmp	r3, #0
   da62a:	d0df      	beq.n	da5ec <__hexnan+0xd4>
   da62c:	f04f 32ff 	mov.w	r2, #4294967295
   da630:	f1c3 0320 	rsb	r3, r3, #32
   da634:	fa22 f303 	lsr.w	r3, r2, r3
   da638:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da63c:	401a      	ands	r2, r3
   da63e:	f846 2c04 	str.w	r2, [r6, #-4]
   da642:	e7d3      	b.n	da5ec <__hexnan+0xd4>
   da644:	3f04      	subs	r7, #4
   da646:	e7d1      	b.n	da5ec <__hexnan+0xd4>
   da648:	2004      	movs	r0, #4
   da64a:	b007      	add	sp, #28
   da64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da650 <__ascii_mbtowc>:
   da650:	b082      	sub	sp, #8
   da652:	b901      	cbnz	r1, da656 <__ascii_mbtowc+0x6>
   da654:	a901      	add	r1, sp, #4
   da656:	b142      	cbz	r2, da66a <__ascii_mbtowc+0x1a>
   da658:	b14b      	cbz	r3, da66e <__ascii_mbtowc+0x1e>
   da65a:	7813      	ldrb	r3, [r2, #0]
   da65c:	600b      	str	r3, [r1, #0]
   da65e:	7812      	ldrb	r2, [r2, #0]
   da660:	1e10      	subs	r0, r2, #0
   da662:	bf18      	it	ne
   da664:	2001      	movne	r0, #1
   da666:	b002      	add	sp, #8
   da668:	4770      	bx	lr
   da66a:	4610      	mov	r0, r2
   da66c:	e7fb      	b.n	da666 <__ascii_mbtowc+0x16>
   da66e:	f06f 0001 	mvn.w	r0, #1
   da672:	e7f8      	b.n	da666 <__ascii_mbtowc+0x16>

000da674 <_Balloc>:
   da674:	b570      	push	{r4, r5, r6, lr}
   da676:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da678:	4604      	mov	r4, r0
   da67a:	460d      	mov	r5, r1
   da67c:	b93e      	cbnz	r6, da68e <_Balloc+0x1a>
   da67e:	2010      	movs	r0, #16
   da680:	f7fc fbda 	bl	d6e38 <malloc>
   da684:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da688:	6260      	str	r0, [r4, #36]	; 0x24
   da68a:	6006      	str	r6, [r0, #0]
   da68c:	60c6      	str	r6, [r0, #12]
   da68e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da690:	68f3      	ldr	r3, [r6, #12]
   da692:	b183      	cbz	r3, da6b6 <_Balloc+0x42>
   da694:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da696:	68db      	ldr	r3, [r3, #12]
   da698:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da69c:	b9b8      	cbnz	r0, da6ce <_Balloc+0x5a>
   da69e:	2101      	movs	r1, #1
   da6a0:	fa01 f605 	lsl.w	r6, r1, r5
   da6a4:	1d72      	adds	r2, r6, #5
   da6a6:	0092      	lsls	r2, r2, #2
   da6a8:	4620      	mov	r0, r4
   da6aa:	f000 fc22 	bl	daef2 <_calloc_r>
   da6ae:	b160      	cbz	r0, da6ca <_Balloc+0x56>
   da6b0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da6b4:	e00e      	b.n	da6d4 <_Balloc+0x60>
   da6b6:	2221      	movs	r2, #33	; 0x21
   da6b8:	2104      	movs	r1, #4
   da6ba:	4620      	mov	r0, r4
   da6bc:	f000 fc19 	bl	daef2 <_calloc_r>
   da6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da6c2:	60f0      	str	r0, [r6, #12]
   da6c4:	68db      	ldr	r3, [r3, #12]
   da6c6:	2b00      	cmp	r3, #0
   da6c8:	d1e4      	bne.n	da694 <_Balloc+0x20>
   da6ca:	2000      	movs	r0, #0
   da6cc:	bd70      	pop	{r4, r5, r6, pc}
   da6ce:	6802      	ldr	r2, [r0, #0]
   da6d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da6d4:	2300      	movs	r3, #0
   da6d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da6da:	e7f7      	b.n	da6cc <_Balloc+0x58>

000da6dc <_Bfree>:
   da6dc:	b570      	push	{r4, r5, r6, lr}
   da6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da6e0:	4605      	mov	r5, r0
   da6e2:	460c      	mov	r4, r1
   da6e4:	b93e      	cbnz	r6, da6f6 <_Bfree+0x1a>
   da6e6:	2010      	movs	r0, #16
   da6e8:	f7fc fba6 	bl	d6e38 <malloc>
   da6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da6f0:	6268      	str	r0, [r5, #36]	; 0x24
   da6f2:	6006      	str	r6, [r0, #0]
   da6f4:	60c6      	str	r6, [r0, #12]
   da6f6:	b13c      	cbz	r4, da708 <_Bfree+0x2c>
   da6f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da6fa:	6862      	ldr	r2, [r4, #4]
   da6fc:	68db      	ldr	r3, [r3, #12]
   da6fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da702:	6021      	str	r1, [r4, #0]
   da704:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da708:	bd70      	pop	{r4, r5, r6, pc}

000da70a <__multadd>:
   da70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da70e:	690e      	ldr	r6, [r1, #16]
   da710:	4607      	mov	r7, r0
   da712:	4698      	mov	r8, r3
   da714:	460c      	mov	r4, r1
   da716:	f101 0014 	add.w	r0, r1, #20
   da71a:	2300      	movs	r3, #0
   da71c:	6805      	ldr	r5, [r0, #0]
   da71e:	b2a9      	uxth	r1, r5
   da720:	fb02 8101 	mla	r1, r2, r1, r8
   da724:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da728:	0c2d      	lsrs	r5, r5, #16
   da72a:	fb02 c505 	mla	r5, r2, r5, ip
   da72e:	b289      	uxth	r1, r1
   da730:	3301      	adds	r3, #1
   da732:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da736:	429e      	cmp	r6, r3
   da738:	f840 1b04 	str.w	r1, [r0], #4
   da73c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da740:	dcec      	bgt.n	da71c <__multadd+0x12>
   da742:	f1b8 0f00 	cmp.w	r8, #0
   da746:	d01b      	beq.n	da780 <__multadd+0x76>
   da748:	68a3      	ldr	r3, [r4, #8]
   da74a:	42b3      	cmp	r3, r6
   da74c:	dc12      	bgt.n	da774 <__multadd+0x6a>
   da74e:	6861      	ldr	r1, [r4, #4]
   da750:	4638      	mov	r0, r7
   da752:	3101      	adds	r1, #1
   da754:	f7ff ff8e 	bl	da674 <_Balloc>
   da758:	6922      	ldr	r2, [r4, #16]
   da75a:	3202      	adds	r2, #2
   da75c:	f104 010c 	add.w	r1, r4, #12
   da760:	4605      	mov	r5, r0
   da762:	0092      	lsls	r2, r2, #2
   da764:	300c      	adds	r0, #12
   da766:	f7fe fced 	bl	d9144 <memcpy>
   da76a:	4621      	mov	r1, r4
   da76c:	4638      	mov	r0, r7
   da76e:	f7ff ffb5 	bl	da6dc <_Bfree>
   da772:	462c      	mov	r4, r5
   da774:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da778:	3601      	adds	r6, #1
   da77a:	f8c3 8014 	str.w	r8, [r3, #20]
   da77e:	6126      	str	r6, [r4, #16]
   da780:	4620      	mov	r0, r4
   da782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da786 <__s2b>:
   da786:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da78a:	460c      	mov	r4, r1
   da78c:	4615      	mov	r5, r2
   da78e:	461f      	mov	r7, r3
   da790:	2209      	movs	r2, #9
   da792:	3308      	adds	r3, #8
   da794:	4606      	mov	r6, r0
   da796:	fb93 f3f2 	sdiv	r3, r3, r2
   da79a:	2100      	movs	r1, #0
   da79c:	2201      	movs	r2, #1
   da79e:	429a      	cmp	r2, r3
   da7a0:	db20      	blt.n	da7e4 <__s2b+0x5e>
   da7a2:	4630      	mov	r0, r6
   da7a4:	f7ff ff66 	bl	da674 <_Balloc>
   da7a8:	9b08      	ldr	r3, [sp, #32]
   da7aa:	6143      	str	r3, [r0, #20]
   da7ac:	2d09      	cmp	r5, #9
   da7ae:	f04f 0301 	mov.w	r3, #1
   da7b2:	6103      	str	r3, [r0, #16]
   da7b4:	dd19      	ble.n	da7ea <__s2b+0x64>
   da7b6:	f104 0909 	add.w	r9, r4, #9
   da7ba:	46c8      	mov	r8, r9
   da7bc:	442c      	add	r4, r5
   da7be:	f818 3b01 	ldrb.w	r3, [r8], #1
   da7c2:	4601      	mov	r1, r0
   da7c4:	3b30      	subs	r3, #48	; 0x30
   da7c6:	220a      	movs	r2, #10
   da7c8:	4630      	mov	r0, r6
   da7ca:	f7ff ff9e 	bl	da70a <__multadd>
   da7ce:	45a0      	cmp	r8, r4
   da7d0:	d1f5      	bne.n	da7be <__s2b+0x38>
   da7d2:	f1a5 0408 	sub.w	r4, r5, #8
   da7d6:	444c      	add	r4, r9
   da7d8:	1b2d      	subs	r5, r5, r4
   da7da:	1963      	adds	r3, r4, r5
   da7dc:	42bb      	cmp	r3, r7
   da7de:	db07      	blt.n	da7f0 <__s2b+0x6a>
   da7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da7e4:	0052      	lsls	r2, r2, #1
   da7e6:	3101      	adds	r1, #1
   da7e8:	e7d9      	b.n	da79e <__s2b+0x18>
   da7ea:	340a      	adds	r4, #10
   da7ec:	2509      	movs	r5, #9
   da7ee:	e7f3      	b.n	da7d8 <__s2b+0x52>
   da7f0:	f814 3b01 	ldrb.w	r3, [r4], #1
   da7f4:	4601      	mov	r1, r0
   da7f6:	3b30      	subs	r3, #48	; 0x30
   da7f8:	220a      	movs	r2, #10
   da7fa:	4630      	mov	r0, r6
   da7fc:	f7ff ff85 	bl	da70a <__multadd>
   da800:	e7eb      	b.n	da7da <__s2b+0x54>

000da802 <__hi0bits>:
   da802:	0c03      	lsrs	r3, r0, #16
   da804:	041b      	lsls	r3, r3, #16
   da806:	b9d3      	cbnz	r3, da83e <__hi0bits+0x3c>
   da808:	0400      	lsls	r0, r0, #16
   da80a:	2310      	movs	r3, #16
   da80c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da810:	bf04      	itt	eq
   da812:	0200      	lsleq	r0, r0, #8
   da814:	3308      	addeq	r3, #8
   da816:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da81a:	bf04      	itt	eq
   da81c:	0100      	lsleq	r0, r0, #4
   da81e:	3304      	addeq	r3, #4
   da820:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da824:	bf04      	itt	eq
   da826:	0080      	lsleq	r0, r0, #2
   da828:	3302      	addeq	r3, #2
   da82a:	2800      	cmp	r0, #0
   da82c:	db05      	blt.n	da83a <__hi0bits+0x38>
   da82e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da832:	f103 0301 	add.w	r3, r3, #1
   da836:	bf08      	it	eq
   da838:	2320      	moveq	r3, #32
   da83a:	4618      	mov	r0, r3
   da83c:	4770      	bx	lr
   da83e:	2300      	movs	r3, #0
   da840:	e7e4      	b.n	da80c <__hi0bits+0xa>

000da842 <__lo0bits>:
   da842:	6803      	ldr	r3, [r0, #0]
   da844:	f013 0207 	ands.w	r2, r3, #7
   da848:	4601      	mov	r1, r0
   da84a:	d00b      	beq.n	da864 <__lo0bits+0x22>
   da84c:	07da      	lsls	r2, r3, #31
   da84e:	d424      	bmi.n	da89a <__lo0bits+0x58>
   da850:	0798      	lsls	r0, r3, #30
   da852:	bf49      	itett	mi
   da854:	085b      	lsrmi	r3, r3, #1
   da856:	089b      	lsrpl	r3, r3, #2
   da858:	2001      	movmi	r0, #1
   da85a:	600b      	strmi	r3, [r1, #0]
   da85c:	bf5c      	itt	pl
   da85e:	600b      	strpl	r3, [r1, #0]
   da860:	2002      	movpl	r0, #2
   da862:	4770      	bx	lr
   da864:	b298      	uxth	r0, r3
   da866:	b9b0      	cbnz	r0, da896 <__lo0bits+0x54>
   da868:	0c1b      	lsrs	r3, r3, #16
   da86a:	2010      	movs	r0, #16
   da86c:	f013 0fff 	tst.w	r3, #255	; 0xff
   da870:	bf04      	itt	eq
   da872:	0a1b      	lsreq	r3, r3, #8
   da874:	3008      	addeq	r0, #8
   da876:	071a      	lsls	r2, r3, #28
   da878:	bf04      	itt	eq
   da87a:	091b      	lsreq	r3, r3, #4
   da87c:	3004      	addeq	r0, #4
   da87e:	079a      	lsls	r2, r3, #30
   da880:	bf04      	itt	eq
   da882:	089b      	lsreq	r3, r3, #2
   da884:	3002      	addeq	r0, #2
   da886:	07da      	lsls	r2, r3, #31
   da888:	d403      	bmi.n	da892 <__lo0bits+0x50>
   da88a:	085b      	lsrs	r3, r3, #1
   da88c:	f100 0001 	add.w	r0, r0, #1
   da890:	d005      	beq.n	da89e <__lo0bits+0x5c>
   da892:	600b      	str	r3, [r1, #0]
   da894:	4770      	bx	lr
   da896:	4610      	mov	r0, r2
   da898:	e7e8      	b.n	da86c <__lo0bits+0x2a>
   da89a:	2000      	movs	r0, #0
   da89c:	4770      	bx	lr
   da89e:	2020      	movs	r0, #32
   da8a0:	4770      	bx	lr

000da8a2 <__i2b>:
   da8a2:	b510      	push	{r4, lr}
   da8a4:	460c      	mov	r4, r1
   da8a6:	2101      	movs	r1, #1
   da8a8:	f7ff fee4 	bl	da674 <_Balloc>
   da8ac:	2201      	movs	r2, #1
   da8ae:	6144      	str	r4, [r0, #20]
   da8b0:	6102      	str	r2, [r0, #16]
   da8b2:	bd10      	pop	{r4, pc}

000da8b4 <__multiply>:
   da8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8b8:	4615      	mov	r5, r2
   da8ba:	690a      	ldr	r2, [r1, #16]
   da8bc:	692b      	ldr	r3, [r5, #16]
   da8be:	429a      	cmp	r2, r3
   da8c0:	bfb8      	it	lt
   da8c2:	460b      	movlt	r3, r1
   da8c4:	460c      	mov	r4, r1
   da8c6:	bfbc      	itt	lt
   da8c8:	462c      	movlt	r4, r5
   da8ca:	461d      	movlt	r5, r3
   da8cc:	6927      	ldr	r7, [r4, #16]
   da8ce:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da8d2:	68a3      	ldr	r3, [r4, #8]
   da8d4:	6861      	ldr	r1, [r4, #4]
   da8d6:	eb07 0609 	add.w	r6, r7, r9
   da8da:	42b3      	cmp	r3, r6
   da8dc:	bfb8      	it	lt
   da8de:	3101      	addlt	r1, #1
   da8e0:	b085      	sub	sp, #20
   da8e2:	f7ff fec7 	bl	da674 <_Balloc>
   da8e6:	f100 0114 	add.w	r1, r0, #20
   da8ea:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da8ee:	460b      	mov	r3, r1
   da8f0:	2200      	movs	r2, #0
   da8f2:	4543      	cmp	r3, r8
   da8f4:	d31d      	bcc.n	da932 <__multiply+0x7e>
   da8f6:	f104 0314 	add.w	r3, r4, #20
   da8fa:	f105 0214 	add.w	r2, r5, #20
   da8fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da902:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da906:	9302      	str	r3, [sp, #8]
   da908:	1b3b      	subs	r3, r7, r4
   da90a:	3b15      	subs	r3, #21
   da90c:	f023 0303 	bic.w	r3, r3, #3
   da910:	3304      	adds	r3, #4
   da912:	f104 0515 	add.w	r5, r4, #21
   da916:	42af      	cmp	r7, r5
   da918:	bf38      	it	cc
   da91a:	2304      	movcc	r3, #4
   da91c:	9301      	str	r3, [sp, #4]
   da91e:	9b02      	ldr	r3, [sp, #8]
   da920:	9203      	str	r2, [sp, #12]
   da922:	4293      	cmp	r3, r2
   da924:	d808      	bhi.n	da938 <__multiply+0x84>
   da926:	2e00      	cmp	r6, #0
   da928:	dc5a      	bgt.n	da9e0 <__multiply+0x12c>
   da92a:	6106      	str	r6, [r0, #16]
   da92c:	b005      	add	sp, #20
   da92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da932:	f843 2b04 	str.w	r2, [r3], #4
   da936:	e7dc      	b.n	da8f2 <__multiply+0x3e>
   da938:	f8b2 a000 	ldrh.w	sl, [r2]
   da93c:	f1ba 0f00 	cmp.w	sl, #0
   da940:	d024      	beq.n	da98c <__multiply+0xd8>
   da942:	f104 0e14 	add.w	lr, r4, #20
   da946:	4689      	mov	r9, r1
   da948:	f04f 0c00 	mov.w	ip, #0
   da94c:	f85e 5b04 	ldr.w	r5, [lr], #4
   da950:	f8d9 b000 	ldr.w	fp, [r9]
   da954:	b2ab      	uxth	r3, r5
   da956:	fa1f fb8b 	uxth.w	fp, fp
   da95a:	fb0a b303 	mla	r3, sl, r3, fp
   da95e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da962:	f8d9 5000 	ldr.w	r5, [r9]
   da966:	4463      	add	r3, ip
   da968:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da96c:	fb0a c50b 	mla	r5, sl, fp, ip
   da970:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da974:	b29b      	uxth	r3, r3
   da976:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da97a:	4577      	cmp	r7, lr
   da97c:	f849 3b04 	str.w	r3, [r9], #4
   da980:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da984:	d8e2      	bhi.n	da94c <__multiply+0x98>
   da986:	9b01      	ldr	r3, [sp, #4]
   da988:	f841 c003 	str.w	ip, [r1, r3]
   da98c:	9b03      	ldr	r3, [sp, #12]
   da98e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da992:	3204      	adds	r2, #4
   da994:	f1b9 0f00 	cmp.w	r9, #0
   da998:	d020      	beq.n	da9dc <__multiply+0x128>
   da99a:	680b      	ldr	r3, [r1, #0]
   da99c:	f104 0c14 	add.w	ip, r4, #20
   da9a0:	468e      	mov	lr, r1
   da9a2:	f04f 0a00 	mov.w	sl, #0
   da9a6:	f8bc 5000 	ldrh.w	r5, [ip]
   da9aa:	f8be b002 	ldrh.w	fp, [lr, #2]
   da9ae:	fb09 b505 	mla	r5, r9, r5, fp
   da9b2:	44aa      	add	sl, r5
   da9b4:	b29b      	uxth	r3, r3
   da9b6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da9ba:	f84e 3b04 	str.w	r3, [lr], #4
   da9be:	f85c 3b04 	ldr.w	r3, [ip], #4
   da9c2:	f8be 5000 	ldrh.w	r5, [lr]
   da9c6:	0c1b      	lsrs	r3, r3, #16
   da9c8:	fb09 5303 	mla	r3, r9, r3, r5
   da9cc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da9d0:	4567      	cmp	r7, ip
   da9d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da9d6:	d8e6      	bhi.n	da9a6 <__multiply+0xf2>
   da9d8:	9d01      	ldr	r5, [sp, #4]
   da9da:	514b      	str	r3, [r1, r5]
   da9dc:	3104      	adds	r1, #4
   da9de:	e79e      	b.n	da91e <__multiply+0x6a>
   da9e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da9e4:	2b00      	cmp	r3, #0
   da9e6:	d1a0      	bne.n	da92a <__multiply+0x76>
   da9e8:	3e01      	subs	r6, #1
   da9ea:	e79c      	b.n	da926 <__multiply+0x72>

000da9ec <__pow5mult>:
   da9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da9f0:	4615      	mov	r5, r2
   da9f2:	f012 0203 	ands.w	r2, r2, #3
   da9f6:	4606      	mov	r6, r0
   da9f8:	460f      	mov	r7, r1
   da9fa:	d007      	beq.n	daa0c <__pow5mult+0x20>
   da9fc:	4c21      	ldr	r4, [pc, #132]	; (daa84 <__pow5mult+0x98>)
   da9fe:	3a01      	subs	r2, #1
   daa00:	2300      	movs	r3, #0
   daa02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   daa06:	f7ff fe80 	bl	da70a <__multadd>
   daa0a:	4607      	mov	r7, r0
   daa0c:	10ad      	asrs	r5, r5, #2
   daa0e:	d035      	beq.n	daa7c <__pow5mult+0x90>
   daa10:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daa12:	b93c      	cbnz	r4, daa24 <__pow5mult+0x38>
   daa14:	2010      	movs	r0, #16
   daa16:	f7fc fa0f 	bl	d6e38 <malloc>
   daa1a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   daa1e:	6270      	str	r0, [r6, #36]	; 0x24
   daa20:	6004      	str	r4, [r0, #0]
   daa22:	60c4      	str	r4, [r0, #12]
   daa24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daa28:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daa2c:	b94c      	cbnz	r4, daa42 <__pow5mult+0x56>
   daa2e:	f240 2171 	movw	r1, #625	; 0x271
   daa32:	4630      	mov	r0, r6
   daa34:	f7ff ff35 	bl	da8a2 <__i2b>
   daa38:	2300      	movs	r3, #0
   daa3a:	f8c8 0008 	str.w	r0, [r8, #8]
   daa3e:	4604      	mov	r4, r0
   daa40:	6003      	str	r3, [r0, #0]
   daa42:	f04f 0900 	mov.w	r9, #0
   daa46:	07eb      	lsls	r3, r5, #31
   daa48:	d50a      	bpl.n	daa60 <__pow5mult+0x74>
   daa4a:	4639      	mov	r1, r7
   daa4c:	4622      	mov	r2, r4
   daa4e:	4630      	mov	r0, r6
   daa50:	f7ff ff30 	bl	da8b4 <__multiply>
   daa54:	4639      	mov	r1, r7
   daa56:	4680      	mov	r8, r0
   daa58:	4630      	mov	r0, r6
   daa5a:	f7ff fe3f 	bl	da6dc <_Bfree>
   daa5e:	4647      	mov	r7, r8
   daa60:	106d      	asrs	r5, r5, #1
   daa62:	d00b      	beq.n	daa7c <__pow5mult+0x90>
   daa64:	6820      	ldr	r0, [r4, #0]
   daa66:	b938      	cbnz	r0, daa78 <__pow5mult+0x8c>
   daa68:	4622      	mov	r2, r4
   daa6a:	4621      	mov	r1, r4
   daa6c:	4630      	mov	r0, r6
   daa6e:	f7ff ff21 	bl	da8b4 <__multiply>
   daa72:	6020      	str	r0, [r4, #0]
   daa74:	f8c0 9000 	str.w	r9, [r0]
   daa78:	4604      	mov	r4, r0
   daa7a:	e7e4      	b.n	daa46 <__pow5mult+0x5a>
   daa7c:	4638      	mov	r0, r7
   daa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daa82:	bf00      	nop
   daa84:	000dc4e8 	.word	0x000dc4e8

000daa88 <__lshift>:
   daa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daa8c:	460c      	mov	r4, r1
   daa8e:	6849      	ldr	r1, [r1, #4]
   daa90:	6923      	ldr	r3, [r4, #16]
   daa92:	eb03 1862 	add.w	r8, r3, r2, asr #5
   daa96:	68a3      	ldr	r3, [r4, #8]
   daa98:	4607      	mov	r7, r0
   daa9a:	4691      	mov	r9, r2
   daa9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   daaa0:	f108 0601 	add.w	r6, r8, #1
   daaa4:	42b3      	cmp	r3, r6
   daaa6:	db3f      	blt.n	dab28 <__lshift+0xa0>
   daaa8:	4638      	mov	r0, r7
   daaaa:	f7ff fde3 	bl	da674 <_Balloc>
   daaae:	2300      	movs	r3, #0
   daab0:	4605      	mov	r5, r0
   daab2:	f100 0114 	add.w	r1, r0, #20
   daab6:	f100 0210 	add.w	r2, r0, #16
   daaba:	4618      	mov	r0, r3
   daabc:	4553      	cmp	r3, sl
   daabe:	db36      	blt.n	dab2e <__lshift+0xa6>
   daac0:	6920      	ldr	r0, [r4, #16]
   daac2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   daac6:	f104 0314 	add.w	r3, r4, #20
   daaca:	f019 091f 	ands.w	r9, r9, #31
   daace:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   daad2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   daad6:	d02e      	beq.n	dab36 <__lshift+0xae>
   daad8:	f1c9 0e20 	rsb	lr, r9, #32
   daadc:	468a      	mov	sl, r1
   daade:	2200      	movs	r2, #0
   daae0:	6818      	ldr	r0, [r3, #0]
   daae2:	fa00 f009 	lsl.w	r0, r0, r9
   daae6:	4302      	orrs	r2, r0
   daae8:	f84a 2b04 	str.w	r2, [sl], #4
   daaec:	f853 2b04 	ldr.w	r2, [r3], #4
   daaf0:	459c      	cmp	ip, r3
   daaf2:	fa22 f20e 	lsr.w	r2, r2, lr
   daaf6:	d8f3      	bhi.n	daae0 <__lshift+0x58>
   daaf8:	ebac 0304 	sub.w	r3, ip, r4
   daafc:	3b15      	subs	r3, #21
   daafe:	f023 0303 	bic.w	r3, r3, #3
   dab02:	3304      	adds	r3, #4
   dab04:	f104 0015 	add.w	r0, r4, #21
   dab08:	4560      	cmp	r0, ip
   dab0a:	bf88      	it	hi
   dab0c:	2304      	movhi	r3, #4
   dab0e:	50ca      	str	r2, [r1, r3]
   dab10:	b10a      	cbz	r2, dab16 <__lshift+0x8e>
   dab12:	f108 0602 	add.w	r6, r8, #2
   dab16:	3e01      	subs	r6, #1
   dab18:	4638      	mov	r0, r7
   dab1a:	612e      	str	r6, [r5, #16]
   dab1c:	4621      	mov	r1, r4
   dab1e:	f7ff fddd 	bl	da6dc <_Bfree>
   dab22:	4628      	mov	r0, r5
   dab24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab28:	3101      	adds	r1, #1
   dab2a:	005b      	lsls	r3, r3, #1
   dab2c:	e7ba      	b.n	daaa4 <__lshift+0x1c>
   dab2e:	f842 0f04 	str.w	r0, [r2, #4]!
   dab32:	3301      	adds	r3, #1
   dab34:	e7c2      	b.n	daabc <__lshift+0x34>
   dab36:	3904      	subs	r1, #4
   dab38:	f853 2b04 	ldr.w	r2, [r3], #4
   dab3c:	f841 2f04 	str.w	r2, [r1, #4]!
   dab40:	459c      	cmp	ip, r3
   dab42:	d8f9      	bhi.n	dab38 <__lshift+0xb0>
   dab44:	e7e7      	b.n	dab16 <__lshift+0x8e>

000dab46 <__mcmp>:
   dab46:	b530      	push	{r4, r5, lr}
   dab48:	6902      	ldr	r2, [r0, #16]
   dab4a:	690c      	ldr	r4, [r1, #16]
   dab4c:	1b12      	subs	r2, r2, r4
   dab4e:	d10e      	bne.n	dab6e <__mcmp+0x28>
   dab50:	f100 0314 	add.w	r3, r0, #20
   dab54:	3114      	adds	r1, #20
   dab56:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dab5a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dab5e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dab62:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dab66:	42a5      	cmp	r5, r4
   dab68:	d003      	beq.n	dab72 <__mcmp+0x2c>
   dab6a:	d305      	bcc.n	dab78 <__mcmp+0x32>
   dab6c:	2201      	movs	r2, #1
   dab6e:	4610      	mov	r0, r2
   dab70:	bd30      	pop	{r4, r5, pc}
   dab72:	4283      	cmp	r3, r0
   dab74:	d3f3      	bcc.n	dab5e <__mcmp+0x18>
   dab76:	e7fa      	b.n	dab6e <__mcmp+0x28>
   dab78:	f04f 32ff 	mov.w	r2, #4294967295
   dab7c:	e7f7      	b.n	dab6e <__mcmp+0x28>

000dab7e <__mdiff>:
   dab7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dab82:	460c      	mov	r4, r1
   dab84:	4606      	mov	r6, r0
   dab86:	4611      	mov	r1, r2
   dab88:	4620      	mov	r0, r4
   dab8a:	4617      	mov	r7, r2
   dab8c:	f7ff ffdb 	bl	dab46 <__mcmp>
   dab90:	1e05      	subs	r5, r0, #0
   dab92:	d108      	bne.n	daba6 <__mdiff+0x28>
   dab94:	4629      	mov	r1, r5
   dab96:	4630      	mov	r0, r6
   dab98:	f7ff fd6c 	bl	da674 <_Balloc>
   dab9c:	2301      	movs	r3, #1
   dab9e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   daba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daba6:	bfa4      	itt	ge
   daba8:	463b      	movge	r3, r7
   dabaa:	4627      	movge	r7, r4
   dabac:	4630      	mov	r0, r6
   dabae:	6879      	ldr	r1, [r7, #4]
   dabb0:	bfa6      	itte	ge
   dabb2:	461c      	movge	r4, r3
   dabb4:	2500      	movge	r5, #0
   dabb6:	2501      	movlt	r5, #1
   dabb8:	f7ff fd5c 	bl	da674 <_Balloc>
   dabbc:	693e      	ldr	r6, [r7, #16]
   dabbe:	60c5      	str	r5, [r0, #12]
   dabc0:	6925      	ldr	r5, [r4, #16]
   dabc2:	f107 0114 	add.w	r1, r7, #20
   dabc6:	f104 0914 	add.w	r9, r4, #20
   dabca:	f100 0e14 	add.w	lr, r0, #20
   dabce:	f107 0210 	add.w	r2, r7, #16
   dabd2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dabd6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dabda:	46f2      	mov	sl, lr
   dabdc:	2700      	movs	r7, #0
   dabde:	f859 3b04 	ldr.w	r3, [r9], #4
   dabe2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dabe6:	fa1f f883 	uxth.w	r8, r3
   dabea:	fa17 f78b 	uxtah	r7, r7, fp
   dabee:	0c1b      	lsrs	r3, r3, #16
   dabf0:	eba7 0808 	sub.w	r8, r7, r8
   dabf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dabf8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dabfc:	fa1f f888 	uxth.w	r8, r8
   dac00:	141f      	asrs	r7, r3, #16
   dac02:	454d      	cmp	r5, r9
   dac04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dac08:	f84a 3b04 	str.w	r3, [sl], #4
   dac0c:	d8e7      	bhi.n	dabde <__mdiff+0x60>
   dac0e:	1b2b      	subs	r3, r5, r4
   dac10:	3b15      	subs	r3, #21
   dac12:	f023 0303 	bic.w	r3, r3, #3
   dac16:	3304      	adds	r3, #4
   dac18:	3415      	adds	r4, #21
   dac1a:	42a5      	cmp	r5, r4
   dac1c:	bf38      	it	cc
   dac1e:	2304      	movcc	r3, #4
   dac20:	4419      	add	r1, r3
   dac22:	4473      	add	r3, lr
   dac24:	469e      	mov	lr, r3
   dac26:	460d      	mov	r5, r1
   dac28:	4565      	cmp	r5, ip
   dac2a:	d30e      	bcc.n	dac4a <__mdiff+0xcc>
   dac2c:	f10c 0203 	add.w	r2, ip, #3
   dac30:	1a52      	subs	r2, r2, r1
   dac32:	f022 0203 	bic.w	r2, r2, #3
   dac36:	3903      	subs	r1, #3
   dac38:	458c      	cmp	ip, r1
   dac3a:	bf38      	it	cc
   dac3c:	2200      	movcc	r2, #0
   dac3e:	441a      	add	r2, r3
   dac40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dac44:	b17b      	cbz	r3, dac66 <__mdiff+0xe8>
   dac46:	6106      	str	r6, [r0, #16]
   dac48:	e7ab      	b.n	daba2 <__mdiff+0x24>
   dac4a:	f855 8b04 	ldr.w	r8, [r5], #4
   dac4e:	fa17 f488 	uxtah	r4, r7, r8
   dac52:	1422      	asrs	r2, r4, #16
   dac54:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dac58:	b2a4      	uxth	r4, r4
   dac5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dac5e:	f84e 4b04 	str.w	r4, [lr], #4
   dac62:	1417      	asrs	r7, r2, #16
   dac64:	e7e0      	b.n	dac28 <__mdiff+0xaa>
   dac66:	3e01      	subs	r6, #1
   dac68:	e7ea      	b.n	dac40 <__mdiff+0xc2>
	...

000dac6c <__ulp>:
   dac6c:	b082      	sub	sp, #8
   dac6e:	ed8d 0b00 	vstr	d0, [sp]
   dac72:	9b01      	ldr	r3, [sp, #4]
   dac74:	4912      	ldr	r1, [pc, #72]	; (dacc0 <__ulp+0x54>)
   dac76:	4019      	ands	r1, r3
   dac78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dac7c:	2900      	cmp	r1, #0
   dac7e:	dd05      	ble.n	dac8c <__ulp+0x20>
   dac80:	2200      	movs	r2, #0
   dac82:	460b      	mov	r3, r1
   dac84:	ec43 2b10 	vmov	d0, r2, r3
   dac88:	b002      	add	sp, #8
   dac8a:	4770      	bx	lr
   dac8c:	4249      	negs	r1, r1
   dac8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dac92:	ea4f 5021 	mov.w	r0, r1, asr #20
   dac96:	f04f 0200 	mov.w	r2, #0
   dac9a:	f04f 0300 	mov.w	r3, #0
   dac9e:	da04      	bge.n	dacaa <__ulp+0x3e>
   daca0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   daca4:	fa41 f300 	asr.w	r3, r1, r0
   daca8:	e7ec      	b.n	dac84 <__ulp+0x18>
   dacaa:	f1a0 0114 	sub.w	r1, r0, #20
   dacae:	291e      	cmp	r1, #30
   dacb0:	bfda      	itte	le
   dacb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dacb6:	fa20 f101 	lsrle.w	r1, r0, r1
   dacba:	2101      	movgt	r1, #1
   dacbc:	460a      	mov	r2, r1
   dacbe:	e7e1      	b.n	dac84 <__ulp+0x18>
   dacc0:	7ff00000 	.word	0x7ff00000

000dacc4 <__b2d>:
   dacc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacc6:	6905      	ldr	r5, [r0, #16]
   dacc8:	f100 0714 	add.w	r7, r0, #20
   daccc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dacd0:	1f2e      	subs	r6, r5, #4
   dacd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dacd6:	4620      	mov	r0, r4
   dacd8:	f7ff fd93 	bl	da802 <__hi0bits>
   dacdc:	f1c0 0320 	rsb	r3, r0, #32
   dace0:	280a      	cmp	r0, #10
   dace2:	f8df c07c 	ldr.w	ip, [pc, #124]	; dad60 <__b2d+0x9c>
   dace6:	600b      	str	r3, [r1, #0]
   dace8:	dc14      	bgt.n	dad14 <__b2d+0x50>
   dacea:	f1c0 0e0b 	rsb	lr, r0, #11
   dacee:	fa24 f10e 	lsr.w	r1, r4, lr
   dacf2:	42b7      	cmp	r7, r6
   dacf4:	ea41 030c 	orr.w	r3, r1, ip
   dacf8:	bf34      	ite	cc
   dacfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dacfe:	2100      	movcs	r1, #0
   dad00:	3015      	adds	r0, #21
   dad02:	fa04 f000 	lsl.w	r0, r4, r0
   dad06:	fa21 f10e 	lsr.w	r1, r1, lr
   dad0a:	ea40 0201 	orr.w	r2, r0, r1
   dad0e:	ec43 2b10 	vmov	d0, r2, r3
   dad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dad14:	42b7      	cmp	r7, r6
   dad16:	bf3a      	itte	cc
   dad18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dad1c:	f1a5 0608 	subcc.w	r6, r5, #8
   dad20:	2100      	movcs	r1, #0
   dad22:	380b      	subs	r0, #11
   dad24:	d017      	beq.n	dad56 <__b2d+0x92>
   dad26:	f1c0 0c20 	rsb	ip, r0, #32
   dad2a:	fa04 f500 	lsl.w	r5, r4, r0
   dad2e:	42be      	cmp	r6, r7
   dad30:	fa21 f40c 	lsr.w	r4, r1, ip
   dad34:	ea45 0504 	orr.w	r5, r5, r4
   dad38:	bf8c      	ite	hi
   dad3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dad3e:	2400      	movls	r4, #0
   dad40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dad44:	fa01 f000 	lsl.w	r0, r1, r0
   dad48:	fa24 f40c 	lsr.w	r4, r4, ip
   dad4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dad50:	ea40 0204 	orr.w	r2, r0, r4
   dad54:	e7db      	b.n	dad0e <__b2d+0x4a>
   dad56:	ea44 030c 	orr.w	r3, r4, ip
   dad5a:	460a      	mov	r2, r1
   dad5c:	e7d7      	b.n	dad0e <__b2d+0x4a>
   dad5e:	bf00      	nop
   dad60:	3ff00000 	.word	0x3ff00000

000dad64 <__d2b>:
   dad64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dad68:	4689      	mov	r9, r1
   dad6a:	2101      	movs	r1, #1
   dad6c:	ec57 6b10 	vmov	r6, r7, d0
   dad70:	4690      	mov	r8, r2
   dad72:	f7ff fc7f 	bl	da674 <_Balloc>
   dad76:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dad7a:	4604      	mov	r4, r0
   dad7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dad80:	bb35      	cbnz	r5, dadd0 <__d2b+0x6c>
   dad82:	2e00      	cmp	r6, #0
   dad84:	9301      	str	r3, [sp, #4]
   dad86:	d028      	beq.n	dadda <__d2b+0x76>
   dad88:	4668      	mov	r0, sp
   dad8a:	9600      	str	r6, [sp, #0]
   dad8c:	f7ff fd59 	bl	da842 <__lo0bits>
   dad90:	9900      	ldr	r1, [sp, #0]
   dad92:	b300      	cbz	r0, dadd6 <__d2b+0x72>
   dad94:	9a01      	ldr	r2, [sp, #4]
   dad96:	f1c0 0320 	rsb	r3, r0, #32
   dad9a:	fa02 f303 	lsl.w	r3, r2, r3
   dad9e:	430b      	orrs	r3, r1
   dada0:	40c2      	lsrs	r2, r0
   dada2:	6163      	str	r3, [r4, #20]
   dada4:	9201      	str	r2, [sp, #4]
   dada6:	9b01      	ldr	r3, [sp, #4]
   dada8:	61a3      	str	r3, [r4, #24]
   dadaa:	2b00      	cmp	r3, #0
   dadac:	bf14      	ite	ne
   dadae:	2202      	movne	r2, #2
   dadb0:	2201      	moveq	r2, #1
   dadb2:	6122      	str	r2, [r4, #16]
   dadb4:	b1d5      	cbz	r5, dadec <__d2b+0x88>
   dadb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dadba:	4405      	add	r5, r0
   dadbc:	f8c9 5000 	str.w	r5, [r9]
   dadc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dadc4:	f8c8 0000 	str.w	r0, [r8]
   dadc8:	4620      	mov	r0, r4
   dadca:	b003      	add	sp, #12
   dadcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dadd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dadd4:	e7d5      	b.n	dad82 <__d2b+0x1e>
   dadd6:	6161      	str	r1, [r4, #20]
   dadd8:	e7e5      	b.n	dada6 <__d2b+0x42>
   dadda:	a801      	add	r0, sp, #4
   daddc:	f7ff fd31 	bl	da842 <__lo0bits>
   dade0:	9b01      	ldr	r3, [sp, #4]
   dade2:	6163      	str	r3, [r4, #20]
   dade4:	2201      	movs	r2, #1
   dade6:	6122      	str	r2, [r4, #16]
   dade8:	3020      	adds	r0, #32
   dadea:	e7e3      	b.n	dadb4 <__d2b+0x50>
   dadec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dadf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dadf4:	f8c9 0000 	str.w	r0, [r9]
   dadf8:	6918      	ldr	r0, [r3, #16]
   dadfa:	f7ff fd02 	bl	da802 <__hi0bits>
   dadfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dae02:	e7df      	b.n	dadc4 <__d2b+0x60>

000dae04 <__ratio>:
   dae04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae08:	4688      	mov	r8, r1
   dae0a:	4669      	mov	r1, sp
   dae0c:	4681      	mov	r9, r0
   dae0e:	f7ff ff59 	bl	dacc4 <__b2d>
   dae12:	a901      	add	r1, sp, #4
   dae14:	4640      	mov	r0, r8
   dae16:	ec55 4b10 	vmov	r4, r5, d0
   dae1a:	f7ff ff53 	bl	dacc4 <__b2d>
   dae1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dae22:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dae26:	eba3 0c02 	sub.w	ip, r3, r2
   dae2a:	e9dd 3200 	ldrd	r3, r2, [sp]
   dae2e:	1a9b      	subs	r3, r3, r2
   dae30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dae34:	ec51 0b10 	vmov	r0, r1, d0
   dae38:	2b00      	cmp	r3, #0
   dae3a:	bfd6      	itet	le
   dae3c:	460a      	movle	r2, r1
   dae3e:	462a      	movgt	r2, r5
   dae40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dae44:	468b      	mov	fp, r1
   dae46:	462f      	mov	r7, r5
   dae48:	bfd4      	ite	le
   dae4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dae4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dae52:	4620      	mov	r0, r4
   dae54:	ee10 2a10 	vmov	r2, s0
   dae58:	465b      	mov	r3, fp
   dae5a:	4639      	mov	r1, r7
   dae5c:	f7fd ff1c 	bl	d8c98 <__aeabi_ddiv>
   dae60:	ec41 0b10 	vmov	d0, r0, r1
   dae64:	b003      	add	sp, #12
   dae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dae6a <__copybits>:
   dae6a:	3901      	subs	r1, #1
   dae6c:	b570      	push	{r4, r5, r6, lr}
   dae6e:	1149      	asrs	r1, r1, #5
   dae70:	6914      	ldr	r4, [r2, #16]
   dae72:	3101      	adds	r1, #1
   dae74:	f102 0314 	add.w	r3, r2, #20
   dae78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dae7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dae80:	1f05      	subs	r5, r0, #4
   dae82:	42a3      	cmp	r3, r4
   dae84:	d30c      	bcc.n	daea0 <__copybits+0x36>
   dae86:	1aa3      	subs	r3, r4, r2
   dae88:	3b11      	subs	r3, #17
   dae8a:	f023 0303 	bic.w	r3, r3, #3
   dae8e:	3211      	adds	r2, #17
   dae90:	42a2      	cmp	r2, r4
   dae92:	bf88      	it	hi
   dae94:	2300      	movhi	r3, #0
   dae96:	4418      	add	r0, r3
   dae98:	2300      	movs	r3, #0
   dae9a:	4288      	cmp	r0, r1
   dae9c:	d305      	bcc.n	daeaa <__copybits+0x40>
   dae9e:	bd70      	pop	{r4, r5, r6, pc}
   daea0:	f853 6b04 	ldr.w	r6, [r3], #4
   daea4:	f845 6f04 	str.w	r6, [r5, #4]!
   daea8:	e7eb      	b.n	dae82 <__copybits+0x18>
   daeaa:	f840 3b04 	str.w	r3, [r0], #4
   daeae:	e7f4      	b.n	dae9a <__copybits+0x30>

000daeb0 <__any_on>:
   daeb0:	f100 0214 	add.w	r2, r0, #20
   daeb4:	6900      	ldr	r0, [r0, #16]
   daeb6:	114b      	asrs	r3, r1, #5
   daeb8:	4298      	cmp	r0, r3
   daeba:	b510      	push	{r4, lr}
   daebc:	db11      	blt.n	daee2 <__any_on+0x32>
   daebe:	dd0a      	ble.n	daed6 <__any_on+0x26>
   daec0:	f011 011f 	ands.w	r1, r1, #31
   daec4:	d007      	beq.n	daed6 <__any_on+0x26>
   daec6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   daeca:	fa24 f001 	lsr.w	r0, r4, r1
   daece:	fa00 f101 	lsl.w	r1, r0, r1
   daed2:	428c      	cmp	r4, r1
   daed4:	d10b      	bne.n	daeee <__any_on+0x3e>
   daed6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daeda:	4293      	cmp	r3, r2
   daedc:	d803      	bhi.n	daee6 <__any_on+0x36>
   daede:	2000      	movs	r0, #0
   daee0:	bd10      	pop	{r4, pc}
   daee2:	4603      	mov	r3, r0
   daee4:	e7f7      	b.n	daed6 <__any_on+0x26>
   daee6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   daeea:	2900      	cmp	r1, #0
   daeec:	d0f5      	beq.n	daeda <__any_on+0x2a>
   daeee:	2001      	movs	r0, #1
   daef0:	e7f6      	b.n	daee0 <__any_on+0x30>

000daef2 <_calloc_r>:
   daef2:	b513      	push	{r0, r1, r4, lr}
   daef4:	434a      	muls	r2, r1
   daef6:	4611      	mov	r1, r2
   daef8:	9201      	str	r2, [sp, #4]
   daefa:	f7fb ffc5 	bl	d6e88 <_malloc_r>
   daefe:	4604      	mov	r4, r0
   daf00:	b118      	cbz	r0, daf0a <_calloc_r+0x18>
   daf02:	9a01      	ldr	r2, [sp, #4]
   daf04:	2100      	movs	r1, #0
   daf06:	f7fe f92b 	bl	d9160 <memset>
   daf0a:	4620      	mov	r0, r4
   daf0c:	b002      	add	sp, #8
   daf0e:	bd10      	pop	{r4, pc}

000daf10 <nan>:
   daf10:	ed9f 0b01 	vldr	d0, [pc, #4]	; daf18 <nan+0x8>
   daf14:	4770      	bx	lr
   daf16:	bf00      	nop
   daf18:	00000000 	.word	0x00000000
   daf1c:	7ff80000 	.word	0x7ff80000

000daf20 <__ascii_wctomb>:
   daf20:	b149      	cbz	r1, daf36 <__ascii_wctomb+0x16>
   daf22:	2aff      	cmp	r2, #255	; 0xff
   daf24:	bf85      	ittet	hi
   daf26:	238a      	movhi	r3, #138	; 0x8a
   daf28:	6003      	strhi	r3, [r0, #0]
   daf2a:	700a      	strbls	r2, [r1, #0]
   daf2c:	f04f 30ff 	movhi.w	r0, #4294967295
   daf30:	bf98      	it	ls
   daf32:	2001      	movls	r0, #1
   daf34:	4770      	bx	lr
   daf36:	4608      	mov	r0, r1
   daf38:	4770      	bx	lr
	...

000daf3c <__aeabi_d2lz>:
   daf3c:	b538      	push	{r3, r4, r5, lr}
   daf3e:	2200      	movs	r2, #0
   daf40:	2300      	movs	r3, #0
   daf42:	4604      	mov	r4, r0
   daf44:	460d      	mov	r5, r1
   daf46:	f7fd ffef 	bl	d8f28 <__aeabi_dcmplt>
   daf4a:	b928      	cbnz	r0, daf58 <__aeabi_d2lz+0x1c>
   daf4c:	4620      	mov	r0, r4
   daf4e:	4629      	mov	r1, r5
   daf50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daf54:	f7fe b8be 	b.w	d90d4 <__aeabi_d2ulz>
   daf58:	4620      	mov	r0, r4
   daf5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   daf5e:	f7fe f8b9 	bl	d90d4 <__aeabi_d2ulz>
   daf62:	4240      	negs	r0, r0
   daf64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daf68:	bd38      	pop	{r3, r4, r5, pc}
   daf6a:	bf00      	nop

000daf6c <dynalib_user>:
   daf6c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   daf7c:	0000 0000 4f4e 4544 4552 3244 4e00 444f     ....NODERED2.NOD
   daf8c:	5245 4445 0033 6925 2500 696c 2500 2e32     ERED3.%i.%li.%2.
   daf9c:	6637 6900 006e 756f 0074 7770 006d 7764     7f.in.out.pwm.dw
   dafac:	6100 0077 5072 6a76 7665 3879 2d52 4e39     .aw.rPvjevy8R-9N
   dafbc:	4336 7458 4730 724f 7549 6d32 5365 706a     6CXt0GOrIu2meSjp
   dafcc:	5062 4331 7600 0077 6f50 6e69 0074 616c     bP1C.vw.Point.la
   dafdc:	2e62 6874 7765 6c63 632e 6d6f                b.thewcl.com.

000dafe9 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   dafe9:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e30     blnkinf.ver.1.0.
   daff9:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   db009:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   db019:	6974 6c63 0065 7562 6c69 0064 754a 206c     ticle.build.Jul 
   db029:	3431 3220 3230 2031 3831 353a 3a30 3130     14 2021 18:50:01
   db039:	0000 6400 6665 7561 746c 0020 534d 0042     ...default .MSB.
   db049:	534c 0042 533c 4950 6553 7474 6e69 7367     LSB.<SPISettings
   db059:	6420 6665 7561 746c 003e 533c 4950 6553      default>.<SPISe
   db069:	7474 6e69 7367 2520 2573 2075 7325 4d20     ttings %s%u %s M
   db079:	444f 2545 3e75                               ODE%u>.

000db080 <_ZL4font>:
   db080:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   db090:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   db0a0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   db0b0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   db0c0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   db0d0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   db0e0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   db0f0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   db100:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   db110:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   db120:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   db130:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   db140:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   db150:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   db160:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   db170:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   db180:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   db190:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   db1a0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   db1b0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   db1c0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   db1d0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   db1e0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   db1f0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   db200:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   db210:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   db220:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   db230:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   db240:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   db250:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   db260:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   db270:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   db280:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   db290:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   db2a0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   db2b0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   db2c0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   db2d0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   db2e0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   db2f0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   db300:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   db310:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   db320:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   db330:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   db340:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   db350:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   db360:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   db370:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   db380:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   db390:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   db3a0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   db3b0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   db3c0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   db3d0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   db3e0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   db3f0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   db400:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   db410:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   db420:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   db430:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   db440:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   db450:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   db460:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   db470:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   db480:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   db490:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   db4a0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   db4b0:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   db4c0:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   db4d0:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   db4e0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   db4f0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   db500:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   db510:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   db520:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   db530:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   db540:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   db550:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   db560:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   db570:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000db580 <_ZTV12Adafruit_GFX>:
	...
   db590:	54d1 000d 7281 000d 40a9 000d 4ed9 000d     .T...r...@...N..
   db5a0:	4edb 000d 4f0d 000d 4ee9 000d 4efb 000d     .N...O...N...N..
   db5b0:	4e1d 000d 4ed9 000d 5105 000d 507f 000d     .N...N...Q...P..
   db5c0:	4f25 000d 4f63 000d 4f9d 000d 4fe3 000d     %O..cO...O...O..
   db5d0:	5081 000d 4fff 000d                         .P...O..

000db5d8 <_ZTV16OledWingAdafruit>:
	...
   db5e0:	55e1 000d 5601 000d 54d1 000d 7281 000d     .U...V...T...r..
   db5f0:	5fd9 000d 4ed9 000d 4edb 000d 4f0d 000d     ._...N...N...O..
   db600:	4ee9 000d 4efb 000d 4e1d 000d 4ed9 000d     .N...N...N...N..
   db610:	5105 000d 6193 000d 6727 000d 66d9 000d     .Q...a..'g...f..
   db620:	4f9d 000d 4fe3 000d 5081 000d 4fff 000d     .O...O...P...O..
   db630:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000db640 <_ZTVN8particle11SPISettingsE>:
	...
   db648:	4dc9 000d 4d9d 000d 4d9f 000d               .M...M...M..

000db654 <_ZL12splash1_data>:
   db654:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   db664:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   db674:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   db684:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   db694:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   db6a4:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   db6bc:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   db6cc:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   db6dc:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   db6ec:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   db6fc:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   db70c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   db71c:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   db72c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   db73c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   db74c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   db75c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   db76c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   db77c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   db78c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   db79c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   db7ac:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   db7bc:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   db7cc:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   db7e4:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   db7fc:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   db80c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   db81c:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   db82c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   db83c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   db84c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   db85c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   db86c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   db87c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   db88c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   db89c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   db8ac:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   db8bc:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   db8cc:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   db8dc:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   db8ec:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   db8fc:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   db90c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000db914 <_ZL12splash2_data>:
   db914:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   db924:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   db934:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   db950:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   db960:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   db970:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   db980:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   db990:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   db9a0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   db9b0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   db9c0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   db9d0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   db9e0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   db9f0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dba00:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   dba10:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   dba20:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   dba30:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   dba40:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   dba50:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   dba60:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   dba70:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   dba80:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   dba90:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dbaa8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dbab8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   dbac8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dbad8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dbae8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dbaf4 <_ZTV16Adafruit_SSD1306>:
	...
   dbafc:	5fad 000d 5fc5 000d 54d1 000d 7281 000d     ._..._...T...r..
   dbb0c:	5fd9 000d 4ed9 000d 4edb 000d 4f0d 000d     ._...N...N...O..
   dbb1c:	4ee9 000d 4efb 000d 4e1d 000d 4ed9 000d     .N...N...N...N..
   dbb2c:	5105 000d 6193 000d 6727 000d 66d9 000d     .Q...a..'g...f..
   dbb3c:	4f9d 000d 4fe3 000d 5081 000d 4fff 000d     .O...O...P...O..

000dbb4c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   dbb4c:	8000 e0c0 f8f0 fefc                         ........

000dbb54 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   dbb54:	0100 0703 1f0f 7f3f                         ......?.

000dbb5c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   dbb5c:	d5ae a880                                   ....

000dbb60 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   dbb60:	00d3 8d40                                   ..@.

000dbb64 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   dbb64:	0020 c8a1                                    ...

000dbb68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   dbb68:	40db a6a4 af2e                              .@....

000dbb6e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   dbb6e:	02da 8f81                                   ....

000dbb72 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   dbb72:	12da                                         ...

000dbb75 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   dbb75:	02da                                         ...

000dbb78 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   dbb78:	0022 21ff 0000 0000                         "..!....

000dbb80 <_ZL22BlynkReadHandlerVector>:
   dbb80:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbb90:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbba0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbbb0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbbc0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbbd0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbbe0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbbf0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc00:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc10:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc20:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc30:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc40:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc50:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc60:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc70:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc80:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbc90:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbca0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbcb0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbcc0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbcd0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbce0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbcf0:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd00:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd10:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd20:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd30:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd40:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd50:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd60:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..
   dbd70:	68b1 000d 68b1 000d 68b1 000d 68b1 000d     .h...h...h...h..

000dbd80 <_ZL23BlynkWriteHandlerVector>:
   dbd80:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbd90:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbda0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbdb0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbdc0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbdd0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbde0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbdf0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe00:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe10:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe20:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe30:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe40:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe50:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe60:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe70:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe80:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbe90:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbea0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbeb0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbec0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbed0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbee0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbef0:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf00:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf10:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf20:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf30:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf40:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf50:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf60:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..
   dbf70:	68b3 000d 68b3 000d 68b3 000d 68b3 000d     .h...h...h...h..

000dbf80 <_ZTVN5spark13EthernetClassE>:
	...
   dbf88:	6f17 000d 6f0d 000d 6f03 000d 6ef9 000d     .o...o...o...n..
   dbf98:	6eed 000d 6ee1 000d 8179 000d 8181 000d     .n...n..y.......
   dbfa8:	6ed5 000d 6ecd 000d 6ec3 000d 6eb9 000d     .n...n...n...n..
   dbfb8:	81b1 000d                                   ....

000dbfbc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbfbc:	0800 1810 2820 3830                         .... (08

000dbfc4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dbfcc:	616e 006e 6e69 0066 766f 0066 002e 7061     nan.inf.ovf...ap
   dbfdc:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
   dbfec:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dbffc <_ZTV9IPAddress>:
	...
   dc004:	7731 000d 7721 000d 7723 000d               1w..!w..#w..

000dc010 <_ZTV9USBSerial>:
	...
   dc018:	7855 000d 78bd 000d 7893 000d 7281 000d     Ux...x...x...r..
   dc028:	7885 000d 7857 000d 7867 000d 78b7 000d     .x..Wx..gx...x..
   dc038:	7877 000d 7851 000d                         wx..Qx..

000dc040 <_ZTV11USARTSerial>:
	...
   dc048:	7961 000d 79cd 000d 79a5 000d 7281 000d     ay...y...y...r..
   dc058:	7975 000d 7991 000d 7983 000d 799f 000d     uy...y...y...y..
   dc068:	7963 000d 7967 000d                         cy..gy..

000dc070 <_ZTV7TwoWire>:
	...
   dc078:	7a5d 000d 7aa7 000d 7a7f 000d 7a5f 000d     ]z...z...z.._z..
   dc088:	7a87 000d 7a8f 000d 7a97 000d 7a9f 000d     .z...z...z...z..
   dc098:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   dc0a8:	2072 203d 6425 0000                         r = %d..

000dc0b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc0b8:	7b8b 000d 7bad 000d 7fc7 000d 7bbb 000d     .{...{.......{..
   dc0c8:	7b8d 000d                                   .{..

000dc0cc <_ZTV9TCPClient>:
	...
   dc0d4:	7c39 000d 7c6d 000d 7b09 000d 7b23 000d     9|..m|...{..#{..
   dc0e4:	7e5d 000d 7ccf 000d 7ca1 000d 7b4d 000d     ]~...|...|..M{..
   dc0f4:	7d67 000d 7fcd 000d 7d03 000d 7f11 000d     g}.......}......
   dc104:	7b4f 000d 7b81 000d 7b35 000d 7bbf 000d     O{...{..5{...{..
   dc114:	7c81 000d                                   .|..

000dc118 <_ZTVN5spark9WiFiClassE>:
	...
   dc120:	811b 000d 8111 000d 8107 000d 80c9 000d     ................
   dc130:	759d 000d 80fb 000d 8179 000d 8181 000d     .u......y.......
   dc140:	80ef 000d 80e7 000d 80dd 000d 80d3 000d     ................
   dc150:	81b1 000d                                   ....

000dc154 <_ZTVN5spark12NetworkClassE>:
	...
   dc15c:	8139 000d 8143 000d 814d 000d 8157 000d     9...C...M...W...
   dc16c:	8161 000d 816d 000d 8179 000d 8181 000d     a...m...y.......
   dc17c:	8189 000d 8195 000d 819d 000d 81a7 000d     ................
   dc18c:	81b1 000d                                   ....

000dc190 <_ZSt7nothrow>:
	...

000dc191 <_ZTSSt19_Sp_make_shared_tag>:
   dc191:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dc1a1:	6572 5f64 6174 0067 0000                     red_tag....

000dc1ac <_ZTISt19_Sp_make_shared_tag>:
   dc1ac:	c1ec 000d c191 000d                         ........

000dc1b4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dc1b4:	c24c 000d c1c0 000d c270 000d               L.......p...

000dc1c0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dc1c0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dc1d0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dc1e0:	0045 0000                                   E...

000dc1e4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dc1e4:	0000 0000 c1b4 000d 84f5 000d 8509 000d     ................
   dc1f4:	869d 000d 869d 000d 8573 000d 84b5 000d     ........s.......
   dc204:	855b 000d 851d 000d 84e9 000d               [...........

000dc210 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dc210:	c24c 000d c21c 000d c1b4 000d               L...........

000dc21c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dc21c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dc22c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dc23c:	666e 456f 0000 0000                         nfoE....

000dc244 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dc244:	0000 0000 c210 000d 859d 000d 85b1 000d     ................
   dc254:	869d 000d 869d 000d 8573 000d 84b5 000d     ........s.......
   dc264:	8671 000d 85fd 000d 85c5 000d               q...........

000dc270 <_ZTISt9type_info>:
   dc270:	c1ec 000d c278 000d                         ....x...

000dc278 <_ZTSSt9type_info>:
   dc278:	7453 7439 7079 5f65 6e69 6f66 6900 696e     St9type_info.ini
   dc288:	7974 0000                                   ty..

000dc28c <fpi.7566>:
   dc28c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc29c:	0000 0000                                   ....

000dc2a0 <fpinan.7602>:
   dc2a0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dc2b8 <tinytens>:
   dc2b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc2c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc2d8:	6f43 64ac 0628 1168                         Co.d(.h.

000dc2e0 <_ctype_>:
   dc2e0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc2f0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc300:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc310:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc320:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc330:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc340:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc350:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc360:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc3e4 <_C_numeric_locale>:
   dc3e4:	bfd8 000d b044 000d e38c 2003 4f50 4953     ....D...... POSI
   dc3f4:	0058 0000                                   X...

000dc3f8 <__mprec_bigtens>:
   dc3f8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc408:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc418:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc420 <__mprec_tens>:
   dc420:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc430:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc440:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc450:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc460:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc470:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc480:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc490:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc4a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc4b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc4c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc4d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc4e0:	9db4 79d9 7843 44ea                         ...yCx.D

000dc4e8 <p05.7490>:
   dc4e8:	0005 0000 0019 0000 007d 0000               ........}...

000dc4f4 <link_const_variable_data_end>:
   dc4f4:	000d4cf1 	.word	0x000d4cf1
   dc4f8:	000d6f21 	.word	0x000d6f21
   dc4fc:	000d70b1 	.word	0x000d70b1
   dc500:	000d7259 	.word	0x000d7259
   dc504:	000d75a9 	.word	0x000d75a9
   dc508:	000d75b9 	.word	0x000d75b9
   dc50c:	000d75e1 	.word	0x000d75e1
   dc510:	000d8125 	.word	0x000d8125
   dc514:	000d8291 	.word	0x000d8291

000dc518 <link_constructors_end>:
	...
